// File generated by CPPExt (Transient)
//
//
//                     Copyright (C) 1991 - 2000 by  
//                      Matra Datavision SA.  All rights reserved.
//  
//                     Copyright (C) 2001 - 2004 by
//                     Open CASCADE SA.  All rights reserved.
// 
// This file is part of the Open CASCADE Technology software.
//
// This software may be distributed and/or modified under the terms and
// conditions of the Open CASCADE Public License as defined by Open CASCADE SA
// and appearing in the file LICENSE included in the packaging of this file.
//  
// This software is distributed on an "AS IS" basis, without warranty of any
// kind, and Open CASCADE SA hereby disclaims all such warranties,
// including without limitation, any warranties of merchantability, fitness
// for a particular purpose or non-infringement. Please see the License for
// the specific terms and conditions governing rights and limitations under the
// License.

#ifndef _BRepMeshAdapt_FastDiscret_HeaderFile
#define _BRepMeshAdapt_FastDiscret_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Handle_BRepMeshAdapt_FastDiscret_HeaderFile
#include <Handle_BRepMeshAdapt_FastDiscret.hxx>
#endif

#ifndef _TriangleAdapt_Parameters_HeaderFile
#include <TriangleAdapt_Parameters.h>
#endif

#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _BRepMeshAdapt_DataMapOfVertexInteger_HeaderFile
#include <BRepMeshAdapt_DataMapOfVertexInteger.hxx>
#endif
#ifndef _MeshShape_DataMapOfShapeListOfTransient_HeaderFile
#include <MeshShape_DataMapOfShapeListOfTransient.hxx>
#endif
#ifndef _BRepMeshAdapt_DataMapOfShapeReal_HeaderFile
#include <BRepMeshAdapt_DataMapOfShapeReal.hxx>
#endif
#ifndef _MeshShape_DataMapOfIntegerPnt_HeaderFile
#include <MeshShape_DataMapOfIntegerPnt.hxx>
#endif
#ifndef _BRepMeshAdapt_IndexedMapOfVertex_HeaderFile
#include <BRepMeshAdapt_IndexedMapOfVertex.hxx>
#endif
#ifndef _TopTools_ListOfShape_HeaderFile
#include <TopTools_ListOfShape.hxx>
#endif
#ifndef _TColStd_IndexedMapOfInteger_HeaderFile
#include <TColStd_IndexedMapOfInteger.hxx>
#endif
#ifndef _BRepMeshAdapt_DataMapOfIntegerListOfXY_HeaderFile
#include <BRepMeshAdapt_DataMapOfIntegerListOfXY.hxx>
#endif
#ifndef _BRepMeshAdapt_Status_HeaderFile
#include <BRepMeshAdapt_Status.hxx>
#endif
#ifndef _TColStd_IndexedMapOfReal_HeaderFile
#include <TColStd_IndexedMapOfReal.hxx>
#endif
#ifndef _MMgt_TShared_HeaderFile
#include <MMgt_TShared.hxx>
#endif
#ifndef _Handle_Poly_Triangulation_HeaderFile
#include <Handle_Poly_Triangulation.hxx>
#endif
#ifndef _Handle_BRepAdaptor_HSurface_HeaderFile
#include <Handle_BRepAdaptor_HSurface.hxx>
#endif
class Bnd_Box;
class TopoDS_Shape;
class TopoDS_Face;
class TopTools_ListOfShape;
class TColgp_SequenceOfPnt2d;
class Poly_Triangulation;
class BRepAdaptor_HSurface;
class TColgp_Array1OfPnt2d;
class TColStd_Array1OfInteger;
class BRepMeshAdapt_ListOfVertex;
class TopoDS_Edge;
class BRepMeshAdapt_Classifier;
class gp_XY;
class TopoDS_Vertex;
class gp_Pnt2d;


//! Algorithm  to mesh  a shape  with  respect of  the <br>
//!          frontier the deflection  and by option the  shared <br>
//!          components. <br>
class BRepMeshAdapt_FastDiscret : public MMgt_TShared {

public:
 // Methods PUBLIC
 // 


Standard_EXPORT BRepMeshAdapt_FastDiscret(const Standard_Real defle,const Standard_Real angle,const Bnd_Box& B,const Standard_Boolean withShare = Standard_True,const Standard_Boolean inshape = Standard_False,const Standard_Boolean relative = Standard_False,const Standard_Boolean shapetrigu = Standard_False);

//! if the  boolean    <relative>   is  True,    the <br>
//!          deflection used   for the polygonalisation   of <br>
//!          each edge will be <defle> * Size of Edge. <br>
//!          the deflection used for the faces will be the maximum <br>
//!          deflection of their edges. <br>
//! <br>
//!          if <shapetrigu> is True, the triangulation, if exists <br>
//!          with a correct deflection, can be used to re-triangulate <br>
//!          the shape. <br>
//! <br>
//!          if   <inshape>   is   True, the      calculated <br>
//!          triangulation will be stored in the shape. <br>
Standard_EXPORT BRepMeshAdapt_FastDiscret(const Standard_Real defle,const TopoDS_Shape& shape,const Bnd_Box& B,const Standard_Real angle,const Standard_Boolean withShare = Standard_True,const Standard_Boolean inshape = Standard_False,const Standard_Boolean relative = Standard_False,const Standard_Boolean shapetrigu = Standard_False);


Standard_EXPORT   void Add(const TopoDS_Shape& shape) ;


Standard_EXPORT   void Add(const TopoDS_Face& face) ;


Standard_EXPORT   BRepMeshAdapt_Status CurrentFaceStatus() const;

//Added functions to support Parameter Datatype
void SetTriangleParameters(const TriangleAdapt_Parameters& params)
{
    myTriangleParameters = params;
}
const TriangleAdapt_Parameters& GetTriangleParameters() const
{
     return myTriangleParameters;
}
//End of own Functions

Standard_EXPORT   void NotTriangulatedFaces(TopTools_ListOfShape& L) const;

  Standard_Integer& NbIterations() ;


Standard_EXPORT   gp_XY FindUV(const TopoDS_Vertex& V,const gp_Pnt2d& XY,const Standard_Integer ip,const Handle(BRepAdaptor_HSurface)& S,const Standard_Real mindist) ;
//Standard_EXPORT ~BRepMeshAdapt_FastDiscret();




 // Type management
 //
 Standard_EXPORT const Handle(Standard_Type)& DynamicType() const;
 //Standard_EXPORT Standard_Boolean	       IsKind(const Handle(Standard_Type)&) const;

protected:

 // Methods PROTECTED
 // 


 // Fields PROTECTED
 //


private: 

 // Methods PRIVATE
 // 


Standard_EXPORT   void FindHoles(const TopoDS_Face& aFace,const Standard_Boolean isPlanar,TColgp_SequenceOfPnt2d& aHoles) ;


Standard_EXPORT   Handle_Poly_Triangulation Triangulate(const Handle(BRepAdaptor_HSurface)& caro,const Standard_Real defface,const TColgp_Array1OfPnt2d& tabP,const TColStd_Array1OfInteger& tabI,const BRepMeshAdapt_ListOfVertex& tabV,const TColgp_SequenceOfPnt2d& tabH,const Standard_Boolean isfirst,const Standard_Boolean anIncreasePrecision) ;


Standard_EXPORT   void Add(const TopoDS_Edge& edge,const TopoDS_Face& face,const Handle(BRepAdaptor_HSurface)& S,const Standard_Real defedge) ;


Standard_EXPORT   Standard_Boolean Update(const TopoDS_Edge& Edge,const TopoDS_Face& Face,const Handle(BRepAdaptor_HSurface)& S,const Standard_Real defedge) ;


Standard_EXPORT   void InternalVertices(const Handle(BRepAdaptor_HSurface)& caro,BRepMeshAdapt_ListOfVertex& inter,const Standard_Real defedge,const BRepMeshAdapt_Classifier& classifier) ;


Standard_EXPORT   Standard_Real Control(const Handle(BRepAdaptor_HSurface)& caro,const Standard_Real defface,const Standard_Boolean isfirst) ;


 // Fields PRIVATE
 //
TriangleAdapt_Parameters myTriangleParameters;

Standard_Real myDeflection;
Standard_Real myAngle;
Standard_Boolean mySharedMode;
Standard_Boolean myRelative;
Standard_Integer myNbIterations;
Standard_Integer myNbDomains;
Standard_Integer myNbLocations;
BRepMeshAdapt_DataMapOfVertexInteger vertices;
MeshShape_DataMapOfShapeListOfTransient edges;
BRepMeshAdapt_DataMapOfShapeReal mapdefle;
MeshShape_DataMapOfIntegerPnt Location3d;
BRepMeshAdapt_IndexedMapOfVertex structure;
TopTools_ListOfShape mynottriangulated;
Standard_Real mydtotale;
MeshShape_DataMapOfShapeListOfTransient internaledges;
TColStd_IndexedMapOfInteger myvemap;
BRepMeshAdapt_DataMapOfIntegerListOfXY mylocation2d;
Standard_Real myumin;
Standard_Real myumax;
Standard_Real myvmin;
Standard_Real myvmax;
BRepMeshAdapt_Status myfacestate;
Standard_Real deltaX;
Standard_Real deltaY;
TColStd_IndexedMapOfReal myUParam;
TColStd_IndexedMapOfReal myVParam;


};


#include <BRepMeshAdapt_FastDiscret.lxx>



// other Inline functions and methods (like "C++: function call" methods)
//


#endif
