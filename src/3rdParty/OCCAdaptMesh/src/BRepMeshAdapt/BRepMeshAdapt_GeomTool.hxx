// File generated by CPPExt (Value)
//
//                     Copyright (C) 1991 - 2000 by  
//                      Matra Datavision SA.  All rights reserved.
//  
//                     Copyright (C) 2001 - 2004 by
//                     Open CASCADE SA.  All rights reserved.
// 
// This file is part of the Open CASCADE Technology software.
//
// This software may be distributed and/or modified under the terms and
// conditions of the Open CASCADE Public License as defined by Open CASCADE SA
// and appearing in the file LICENSE included in the packaging of this file.
//  
// This software is distributed on an "AS IS" basis, without warranty of any
// kind, and Open CASCADE SA hereby disclaims all such warranties,
// including without limitation, any warranties of merchantability, fitness
// for a particular purpose or non-infringement. Please see the License for
// the specific terms and conditions governing rights and limitations under the
// License.

#ifndef _BRepMeshAdapt_GeomTool_HeaderFile
#define _BRepMeshAdapt_GeomTool_HeaderFile

#ifndef _GCPnts_TangentialDeflection_HeaderFile
#include <GCPnts_TangentialDeflection.hxx>
#endif
#ifndef _GeomAbs_IsoType_HeaderFile
#include <GeomAbs_IsoType.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Handle_BRepAdaptor_HSurface_HeaderFile
#include <Handle_BRepAdaptor_HSurface.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _MeshShape_CurvatureType_HeaderFile
#include <MeshShape_CurvatureType.hxx>
#endif
class TopoDS_Edge;
class BRepAdaptor_Curve;
class TopoDS_Face;
class BRepMeshAdapt_ShapeTool;
class BRepAdaptor_HSurface;
class gp_Pnt;
class gp_Pnt2d;
class gp_Dir;


#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif


class BRepMeshAdapt_GeomTool  {

public:

    void* operator new(size_t,void* anAddress) 
      {
        return anAddress;
      }
    void* operator new(size_t size) 
      { 
        return Standard::Allocate(size); 
      }
    void  operator delete(void *anAddress) 
      { 
        if (anAddress) Standard::Free((Standard_Address&)anAddress); 
      }
 // Methods PUBLIC
 // 


Standard_EXPORT BRepMeshAdapt_GeomTool(BRepAdaptor_Curve& C,const Standard_Real Ufirst,const Standard_Real Ulast,const Standard_Real AngDefl,const Standard_Real Deflection,const Standard_Integer nbpointsmin = 2);


Standard_EXPORT BRepMeshAdapt_GeomTool(const Handle(BRepAdaptor_HSurface)& S,const Standard_Real ParamIso,const GeomAbs_IsoType Type,const Standard_Real Ufirst,const Standard_Real Ulast,const Standard_Real AngDefl,const Standard_Real Deflection,const Standard_Integer nbpointsmin = 2);


Standard_EXPORT   Standard_Integer NbPoints() const;


Standard_EXPORT   void Value(const Standard_Real IsoParam,const Standard_Integer Index,Standard_Real& W,gp_Pnt& P,gp_Pnt2d& UV) const;


Standard_EXPORT   void Value(const BRepAdaptor_Curve& C,const Handle(BRepAdaptor_HSurface)& S,const Standard_Integer Index,Standard_Real& W,gp_Pnt& P,gp_Pnt2d& UV) const;


Standard_EXPORT static  void D0(const Handle(BRepAdaptor_HSurface)& F,const Standard_Real U,const Standard_Real V,gp_Pnt& P) ;


Standard_EXPORT static  Standard_Boolean Normal(const Handle(BRepAdaptor_HSurface)& F,const Standard_Real U,const Standard_Real V,gp_Pnt& P,gp_Dir& Nor) ;


Standard_EXPORT static  MeshShape_CurvatureType CurvatureComplexity(const Handle(BRepAdaptor_HSurface)& SF) ;





protected:

 // Methods PROTECTED
 // 


 // Fields PROTECTED
 //


private: 

 // Methods PRIVATE
 // 


 // Fields PRIVATE
 //
GCPnts_TangentialDeflection pnts;
GCPnts_TangentialDeflection pntsOfIsoparametric;
GeomAbs_IsoType parametric;


};





// other Inline functions and methods (like "C++: function call" methods)
//


#endif
