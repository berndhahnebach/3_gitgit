// File generated by CPPExt (Value)
//
//                     Copyright (C) 1991 - 2000 by  
//                      Matra Datavision SA.  All rights reserved.
//  
//                     Copyright (C) 2001 - 2004 by
//                     Open CASCADE SA.  All rights reserved.
// 
// This file is part of the Open CASCADE Technology software.
//
// This software may be distributed and/or modified under the terms and
// conditions of the Open CASCADE Public License as defined by Open CASCADE SA
// and appearing in the file LICENSE included in the packaging of this file.
//  
// This software is distributed on an "AS IS" basis, without warranty of any
// kind, and Open CASCADE SA hereby disclaims all such warranties,
// including without limitation, any warranties of merchantability, fitness
// for a particular purpose or non-infringement. Please see the License for
// the specific terms and conditions governing rights and limitations under the
// License.

#ifndef _MeshAlgoAdapt_HeaderFile
#define _MeshAlgoAdapt_HeaderFile

#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
class MeshAlgoAdapt_Vertex;
class MeshAlgoAdapt_Edge;
class MeshAlgoAdapt_Triangle;
class MeshAlgoAdapt_Circ;
class MeshAlgoAdapt_DataMapOfIntegerCirc;
class MeshAlgoAdapt_CircleTool;
class MeshAlgoAdapt_PntComparator;
class MeshAlgoAdapt_IndexedPntComparator;
class MeshAlgoAdapt_Delaunay;
class MeshAlgoAdapt_DataStructure;
class MeshAlgoAdapt_ComparatorOfVertex;
class MeshAlgoAdapt_ComparatorOfIndexedVertex;
class MeshAlgoAdapt_Array1OfVertex;
class MeshAlgoAdapt_HArray1OfVertex;
class MeshAlgoAdapt_HeapSortVertex;
class MeshAlgoAdapt_HeapSortIndexedVertex;
class MeshAlgoAdapt_DataMapNodeOfDataMapOfIntegerCirc;
class MeshAlgoAdapt_DataMapIteratorOfDataMapOfIntegerCirc;


#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

//! Manages different algorithms for triangulation. <br>
//!          (like Delaunay) <br>
class MeshAlgoAdapt  {

public:

    void* operator new(size_t,void* anAddress) 
      {
        return anAddress;
      }
    void* operator new(size_t size) 
      { 
        return Standard::Allocate(size); 
      }
    void  operator delete(void *anAddress) 
      { 
        if (anAddress) Standard::Free((Standard_Address&)anAddress); 
      }
 // Methods PUBLIC
 // 


Standard_EXPORT static  void SetMesure(const Standard_Boolean val) ;


Standard_EXPORT static  void SetTrace(const Standard_Integer val) ;





protected:

 // Methods PROTECTED
 // 


 // Fields PROTECTED
 //


private: 

 // Methods PRIVATE
 // 


 // Fields PRIVATE
 //

friend class MeshAlgoAdapt_Vertex;
friend class MeshAlgoAdapt_Edge;
friend class MeshAlgoAdapt_Triangle;
friend class MeshAlgoAdapt_Circ;
friend class MeshAlgoAdapt_DataMapOfIntegerCirc;
friend class MeshAlgoAdapt_CircleTool;
friend class MeshAlgoAdapt_PntComparator;
friend class MeshAlgoAdapt_IndexedPntComparator;
friend class MeshAlgoAdapt_Delaunay;
friend class MeshAlgoAdapt_DataStructure;
friend class MeshAlgoAdapt_ComparatorOfVertex;
friend class MeshAlgoAdapt_ComparatorOfIndexedVertex;
friend class MeshAlgoAdapt_Array1OfVertex;
friend class MeshAlgoAdapt_HArray1OfVertex;
friend class MeshAlgoAdapt_HeapSortVertex;
friend class MeshAlgoAdapt_HeapSortIndexedVertex;
friend class MeshAlgoAdapt_DataMapNodeOfDataMapOfIntegerCirc;
friend class MeshAlgoAdapt_DataMapIteratorOfDataMapOfIntegerCirc;

};





// other Inline functions and methods (like "C++: function call" methods)
//


#endif
