
// This file is generated by src/Tools/generateTemaplates/templateClassPyExport.py out of the XML file
// Every change you make here get lost at the next full rebuild!
#ifndef PART_LINEPY_H
#define PART_LINEPY_H

#include <Mod/Part/App/GeometryPy.h>
#include <Mod/Part/App/Geometry.h>

namespace Part
{

//===========================================================================
// LinePy - Python wrapper
//===========================================================================

/** The python export class for GeomLine
 */
class PartExport LinePy : public Part::GeometryPy
{
public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    static PyParentObject Parents[];
    virtual PyTypeObject *GetType(void) {return &Type;};
    virtual PyParentObject *GetParents(void) {return Parents;}

public:
    LinePy(GeomLine *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(struct _typeobject *, PyObject *, PyObject *);
    virtual int PyInit(PyObject* args, PyObject*k);
    ~LinePy();

    typedef GeomLine* PointerType ;

    virtual PyObject *_repr(void);        // the representation
    const char *representation(void) const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the setStartPoint() method
    static PyObject * staticCallback_setStartPoint (PyObject *self, PyObject *args, PyObject *kwd);
    /// implementer for the setStartPoint() method
    PyObject*  setStartPoint(PyObject *args);
    /// callback for the setEndPoint() method
    static PyObject * staticCallback_setEndPoint (PyObject *self, PyObject *args, PyObject *kwd);
    /// implementer for the setEndPoint() method
    PyObject*  setEndPoint(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object methods */
    //@{

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(char *attr);              // __getattr__ function
    int _setattr(char *attr, PyObject *value);        // __setattr__ function

    /// getter for the object handled by this class
    GeomLine *getGeomLinePtr(void) const;

    /** @name additional declarations and methods for the wrapper class */
    //@{
public:
      LinePy(const Geom_Line & line, PyTypeObject *T = &Type)
      :GeometryPy(new GeomLine(new Geom_Line(line)),T){}
	
    //@}
};

#define PARENTSPartLinePy &LinePy::Type,PARENTSPartGeometryPy

}  //namespace Part

#endif  // PART_LINEPY_H


