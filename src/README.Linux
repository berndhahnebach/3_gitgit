
How to build and run FreeCAD under Linux
========================================

Prerequisites
-------------

To compile FreeCAD, you will need, besides functioning Linux
and programming tools (like compiler), the following libraries:

o Python (http://www.python.org), I have 2.3
o Qt (http://www.trolltech.no), >= 3.2.x, I have 3.2.1
o Coin3D (http://www.coin3d.org), >= 2.x, I have 2.2.1
o SoQt (http://www.coin3d.org), >= 1.x, I have 1.0.2
o OpenCascade (http://www.opencascade.org), you need >=5.1 here
o Xerces-c (downloads http://xml.apache.org/dist/xerces-c/), mine is 2.4

To avoid any linker problems during the build process it would be a good idea to have 
the library paths either in your LD_LIBRARY_PATH variable or in your ld.so.conf file.

During the compilation some Python scripts get executed. So the Python interpreter has 
to work properly.

First of all you should build the Qt plugin that provides all custom widgets of FreeCAD 
we need for the Qt Designer. The sources are located under src/Tools/plugins/widget. 
So far we don't provide a makefile but calling 'qmake plugin.pro' creates it. 
Calling 'make' will create the library libFreeCAD_widgets.so. To make known this library 
to your Qt Designer you have to copy the file to $QTDIR/plugin/designer.


Configuration
-------------

For the build process of FreeCAD we make use of configure scripts.
To have an overview of all options type in ./configure --help, first.

If you have installed all libraries above into standard paths you need
not any options at all. Unless you have installed any library into a
non-standard path, then make use of the --with-XXX-includes or --with-XXX-libs
options, please. (XXX stands for the corresponding library.)

Note: To specify FreeCAD's root directory it is recommended to use only the '--prefix' 
option from the configure script but not the --bindir, --libdir, ... options, because
at startup FreeCAD makes assumptions where its lib-, doc-, .. directories reside.
The default root directory is located in ~/FreeCAD.

If you know how to work with GNU autoconf, feel free to contribute improvements
to our configuration scripts --- that would be great.


Installation
------------

Once you have built the sources successfully using 'make' you can with 'make install'
install FreeCAD onto your machine whereever you want. Go to the directory FreeCAD/bin
and just type in ./FreeCAD. 
FreeCAD's default root directory resides under ~/FreeCAD, so you don't need root privileges 
therefore.


Modules
-------

To build the modules (located in src/Mod) for FreeCAD you have to repeat the same procedure 
for each of them. The 'make install' creates the libraries in ~/FreeCAD/Mod/<module>/lib - 
as default directory, creates some symbolic links that Python needs and copy the Init.py and 
InitGui.py files to the right location.

We need these symbolic links because Python expects them to load the libraries. The .py files 
are needed by FreeCAD to initialize the workbenches.

Note: The Test and the Sketcher modules are pure Python modules, so you need not build them. 
Just copy the directories to their desired locations.

After having built and installed the core and module libraries, go to FreeCAD/bin and try 
./FreeCAD invoking the main window. 

Note: Since OpenCASCADE requires a lot of environment variables for initialization stuff and
you don't want to burst your ~/.bashrc (or the rc-file of your preferred shell) you can use
our fc.sh shell script. Just make a few adjustments and copy it to FreeCAD/bin.

So, just have fun!

Should you have some Linux specific problems with FreeCAD, drop me a mail.
However, due to my limited knowledge, I do not promise anything.


Known problems
--------------

Here I have added a list of known problems concerning installation of libraries or the build
process of FreeCAD.

Problem:
Installation of Coin/SoQt could fail if the configure script searches
for QGLWidget either in libqgl or libqt-gl.

Solution:
QGLWidget now resides in libqt-mt, so create links called libqgl.so and libqt-gl.so, 
linking to libqt-mt.so.
[ as root ]
> ln -s /usr/lib/qt3/lib/libqt-mt.so ./libqgl.so
> ln -s /usr/lib/qt3/lib/libqt-mt.so ./libqt-gl.so


Worth noting up front that OpenCascade requires at least 500Mb of swap space 
( according to their documentation ). Linux uses a separate partition for
the swap space, so you might have to re-partition the hard drive to achieve this 
( I did! ) and it is worth doing that before the rest of the install!

Problem:
OCC install wizard doesn't work - just prints a few lines of dots and then stops.

Solution: 
Export the display so that root can connect to it, and then run the java script 
manually as root:
> xhost +      // Allow root to access our display
> su           // Change user to root
> /usr/lib/java/jre/bin/java -jar ./Linux/setup.jar


Problem:
configure script fails because looking for strstream.h. Later compilers (like gcc 3.3.x)
do not use this file anymore.

Solution:
Comment out the AC_CHECK_HEADERS([strstream.h],,[AC_MSG_ERROR([This header is needed. Bye.])])
statement or check out latest sources from CVS repository hosted on sourceforge.net.


Problem:
configure couldn't execute various scripts: missing, config.sub, etc.

Solution:
Rerun the automake scripts, telling them to add in the missing script files from system
templates:
> automake --add-missing --force-missing
> autoconf
> ./configure


Problem:
After running configure, couldn't execute libtool (which is created by configure ). 
If I viewed the libtool file in an editor ( e.g. vi ) I could see ^M at the end of 
every line - which is the Windows EOL character, but not the Unix/Linux EOL character.

Solution:
Open libtool in a 'smart' text editor, such as Kate, save it and close it again - all 
of the Windows ^M 's are converted into Linux ^L ( or whatever ).


Vaclav Smilauer <smilauer@volny.cz>

(updated by Werner Mayer)
