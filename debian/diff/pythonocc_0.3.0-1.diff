--- pythonocc-0.3.0.orig/src/wrapper/environment.py
+++ pythonocc-0.3.0/src/wrapper/environment.py
@@ -126,8 +126,8 @@
         OCC_INC = os.path.join(OCC_ROOT,'inc')
         OCC_LIB = os.path.join(OCC_ROOT,'lib')
     else:
-        OCC_INC = '/usr/local/inc' # Ubuntu 8.04 Hardy default installation path for headers
-        OCC_LIB = '/usr/local/lib' # Ubuntu 8.04 Hardy default installation path for libraries
+        OCC_INC = '/usr/include/opencascade' # Ubuntu 8.04 Hardy default installation path for headers
+        OCC_LIB = '/usr/lib' # Ubuntu 8.04 Hardy default installation path for libraries
     SALOME_GEOM_LIB = '/opt/SalomeGeometry/lib'
     GCC_XML_PATH = '/usr/bin' # Ubuntu 8.04 Hardy installation path for gccxml
     PYGCCXML_DEFINES = ['HAVE_CONFIG_H','HAVE_LIMITS_H','CSFDB','OCC_CONVERT_SIGNALS','LIN','LININTEL','_GNU_SOURCE=1']
--- pythonocc-0.3.0.orig/src/wrapper/SWIG/linux_darwin/Standard_wrap.cpp
+++ pythonocc-0.3.0/src/wrapper/SWIG/linux_darwin/Standard_wrap.cpp
@@ -0,0 +1,15917 @@
+/* ----------------------------------------------------------------------------
+ * This file was automatically generated by SWIG (http://www.swig.org).
+ * Version 1.3.33
+ * 
+ * This file is not intended to be easily readable and contains a number of 
+ * coding conventions designed to improve portability and efficiency. Do not make
+ * changes to this file unless you know what you are doing--modify the SWIG 
+ * interface file instead. 
+ * ----------------------------------------------------------------------------- */
+
+#define SWIGPYTHON
+#define SWIG_PYTHON_DIRECTOR_NO_VTABLE
+
+#ifdef __cplusplus
+template<typename T> class SwigValueWrapper {
+    T *tt;
+public:
+    SwigValueWrapper() : tt(0) { }
+    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
+    SwigValueWrapper(const T& t) : tt(new T(t)) { }
+    ~SwigValueWrapper() { delete tt; } 
+    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
+    operator T&() const { return *tt; }
+    T *operator&() { return tt; }
+private:
+    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
+};
+
+template <typename T> T SwigValueInit() {
+  return T();
+}
+#endif
+
+/* -----------------------------------------------------------------------------
+ *  This section contains generic SWIG labels for method/variable
+ *  declarations/attributes, and other compiler dependent labels.
+ * ----------------------------------------------------------------------------- */
+
+/* template workaround for compilers that cannot correctly implement the C++ standard */
+#ifndef SWIGTEMPLATEDISAMBIGUATOR
+# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
+#  define SWIGTEMPLATEDISAMBIGUATOR template
+# elif defined(__HP_aCC)
+/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
+/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
+#  define SWIGTEMPLATEDISAMBIGUATOR template
+# else
+#  define SWIGTEMPLATEDISAMBIGUATOR
+# endif
+#endif
+
+/* inline attribute */
+#ifndef SWIGINLINE
+# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
+#   define SWIGINLINE inline
+# else
+#   define SWIGINLINE
+# endif
+#endif
+
+/* attribute recognised by some compilers to avoid 'unused' warnings */
+#ifndef SWIGUNUSED
+# if defined(__GNUC__)
+#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
+#     define SWIGUNUSED __attribute__ ((__unused__)) 
+#   else
+#     define SWIGUNUSED
+#   endif
+# elif defined(__ICC)
+#   define SWIGUNUSED __attribute__ ((__unused__)) 
+# else
+#   define SWIGUNUSED 
+# endif
+#endif
+
+#ifndef SWIGUNUSEDPARM
+# ifdef __cplusplus
+#   define SWIGUNUSEDPARM(p)
+# else
+#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
+# endif
+#endif
+
+/* internal SWIG method */
+#ifndef SWIGINTERN
+# define SWIGINTERN static SWIGUNUSED
+#endif
+
+/* internal inline SWIG method */
+#ifndef SWIGINTERNINLINE
+# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
+#endif
+
+/* exporting methods */
+#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
+#  ifndef GCC_HASCLASSVISIBILITY
+#    define GCC_HASCLASSVISIBILITY
+#  endif
+#endif
+
+#ifndef SWIGEXPORT
+# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
+#   if defined(STATIC_LINKED)
+#     define SWIGEXPORT
+#   else
+#     define SWIGEXPORT __declspec(dllexport)
+#   endif
+# else
+#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
+#     define SWIGEXPORT __attribute__ ((visibility("default")))
+#   else
+#     define SWIGEXPORT
+#   endif
+# endif
+#endif
+
+/* calling conventions for Windows */
+#ifndef SWIGSTDCALL
+# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
+#   define SWIGSTDCALL __stdcall
+# else
+#   define SWIGSTDCALL
+# endif 
+#endif
+
+/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
+#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
+# define _CRT_SECURE_NO_DEPRECATE
+#endif
+
+/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
+#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
+# define _SCL_SECURE_NO_DEPRECATE
+#endif
+
+
+
+/* Python.h has to appear first */
+#include <Python.h>
+
+/* -----------------------------------------------------------------------------
+ * swigrun.swg
+ *
+ * This file contains generic CAPI SWIG runtime support for pointer
+ * type checking.
+ * ----------------------------------------------------------------------------- */
+
+/* This should only be incremented when either the layout of swig_type_info changes,
+   or for whatever reason, the runtime changes incompatibly */
+#define SWIG_RUNTIME_VERSION "3"
+
+/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
+#ifdef SWIG_TYPE_TABLE
+# define SWIG_QUOTE_STRING(x) #x
+# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
+# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
+#else
+# define SWIG_TYPE_TABLE_NAME
+#endif
+
+/*
+  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
+  creating a static or dynamic library from the swig runtime code.
+  In 99.9% of the cases, swig just needs to declare them as 'static'.
+  
+  But only do this if is strictly necessary, ie, if you have problems
+  with your compiler or so.
+*/
+
+#ifndef SWIGRUNTIME
+# define SWIGRUNTIME SWIGINTERN
+#endif
+
+#ifndef SWIGRUNTIMEINLINE
+# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
+#endif
+
+/*  Generic buffer size */
+#ifndef SWIG_BUFFER_SIZE
+# define SWIG_BUFFER_SIZE 1024
+#endif
+
+/* Flags for pointer conversions */
+#define SWIG_POINTER_DISOWN        0x1
+
+/* Flags for new pointer objects */
+#define SWIG_POINTER_OWN           0x1
+
+
+/* 
+   Flags/methods for returning states.
+   
+   The swig conversion methods, as ConvertPtr, return and integer 
+   that tells if the conversion was successful or not. And if not,
+   an error code can be returned (see swigerrors.swg for the codes).
+   
+   Use the following macros/flags to set or process the returning
+   states.
+   
+   In old swig versions, you usually write code as:
+
+     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
+       // success code
+     } else {
+       //fail code
+     }
+
+   Now you can be more explicit as:
+
+    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
+    if (SWIG_IsOK(res)) {
+      // success code
+    } else {
+      // fail code
+    }
+
+   that seems to be the same, but now you can also do
+
+    Type *ptr;
+    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
+    if (SWIG_IsOK(res)) {
+      // success code
+      if (SWIG_IsNewObj(res) {
+        ...
+	delete *ptr;
+      } else {
+        ...
+      }
+    } else {
+      // fail code
+    }
+    
+   I.e., now SWIG_ConvertPtr can return new objects and you can
+   identify the case and take care of the deallocation. Of course that
+   requires also to SWIG_ConvertPtr to return new result values, as
+
+      int SWIG_ConvertPtr(obj, ptr,...) {         
+        if (<obj is ok>) {			       
+          if (<need new object>) {		       
+            *ptr = <ptr to new allocated object>; 
+            return SWIG_NEWOBJ;		       
+          } else {				       
+            *ptr = <ptr to old object>;	       
+            return SWIG_OLDOBJ;		       
+          } 				       
+        } else {				       
+          return SWIG_BADOBJ;		       
+        }					       
+      }
+
+   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
+   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
+   swig errors code.
+
+   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
+   allows to return the 'cast rank', for example, if you have this
+
+       int food(double)
+       int fooi(int);
+
+   and you call
+ 
+      food(1)   // cast rank '1'  (1 -> 1.0)
+      fooi(1)   // cast rank '0'
+
+   just use the SWIG_AddCast()/SWIG_CheckState()
+
+
+ */
+#define SWIG_OK                    (0) 
+#define SWIG_ERROR                 (-1)
+#define SWIG_IsOK(r)               (r >= 0)
+#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  
+
+/* The CastRankLimit says how many bits are used for the cast rank */
+#define SWIG_CASTRANKLIMIT         (1 << 8)
+/* The NewMask denotes the object was created (using new/malloc) */
+#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
+/* The TmpMask is for in/out typemaps that use temporal objects */
+#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
+/* Simple returning values */
+#define SWIG_BADOBJ                (SWIG_ERROR)
+#define SWIG_OLDOBJ                (SWIG_OK)
+#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
+#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
+/* Check, add and del mask methods */
+#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
+#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
+#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
+#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
+#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
+#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))
+
+
+/* Cast-Rank Mode */
+#if defined(SWIG_CASTRANK_MODE)
+#  ifndef SWIG_TypeRank
+#    define SWIG_TypeRank             unsigned long
+#  endif
+#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
+#    define SWIG_MAXCASTRANK          (2)
+#  endif
+#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
+#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
+SWIGINTERNINLINE int SWIG_AddCast(int r) { 
+  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
+}
+SWIGINTERNINLINE int SWIG_CheckState(int r) { 
+  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
+}
+#else /* no cast-rank mode */
+#  define SWIG_AddCast
+#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
+#endif
+
+
+
+
+#include <string.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+typedef void *(*swig_converter_func)(void *);
+typedef struct swig_type_info *(*swig_dycast_func)(void **);
+
+/* Structure to store inforomation on one type */
+typedef struct swig_type_info {
+  const char             *name;			/* mangled name of this type */
+  const char             *str;			/* human readable name of this type */
+  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
+  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
+  void                   *clientdata;		/* language specific type data */
+  int                    owndata;		/* flag if the structure owns the clientdata */
+} swig_type_info;
+
+/* Structure to store a type and conversion function used for casting */
+typedef struct swig_cast_info {
+  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
+  swig_converter_func     converter;		/* function to cast the void pointers */
+  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
+  struct swig_cast_info  *prev;			/* pointer to the previous cast */
+} swig_cast_info;
+
+/* Structure used to store module information
+ * Each module generates one structure like this, and the runtime collects
+ * all of these structures and stores them in a circularly linked list.*/
+typedef struct swig_module_info {
+  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
+  size_t                 size;		        /* Number of types in this module */
+  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
+  swig_type_info         **type_initial;	/* Array of initially generated type structures */
+  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
+  void                    *clientdata;		/* Language specific module data */
+} swig_module_info;
+
+/* 
+  Compare two type names skipping the space characters, therefore
+  "char*" == "char *" and "Class<int>" == "Class<int >", etc.
+
+  Return 0 when the two name types are equivalent, as in
+  strncmp, but skipping ' '.
+*/
+SWIGRUNTIME int
+SWIG_TypeNameComp(const char *f1, const char *l1,
+		  const char *f2, const char *l2) {
+  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
+    while ((*f1 == ' ') && (f1 != l1)) ++f1;
+    while ((*f2 == ' ') && (f2 != l2)) ++f2;
+    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
+  }
+  return (int)((l1 - f1) - (l2 - f2));
+}
+
+/*
+  Check type equivalence in a name list like <name1>|<name2>|...
+  Return 0 if not equal, 1 if equal
+*/
+SWIGRUNTIME int
+SWIG_TypeEquiv(const char *nb, const char *tb) {
+  int equiv = 0;
+  const char* te = tb + strlen(tb);
+  const char* ne = nb;
+  while (!equiv && *ne) {
+    for (nb = ne; *ne; ++ne) {
+      if (*ne == '|') break;
+    }
+    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
+    if (*ne) ++ne;
+  }
+  return equiv;
+}
+
+/*
+  Check type equivalence in a name list like <name1>|<name2>|...
+  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
+*/
+SWIGRUNTIME int
+SWIG_TypeCompare(const char *nb, const char *tb) {
+  int equiv = 0;
+  const char* te = tb + strlen(tb);
+  const char* ne = nb;
+  while (!equiv && *ne) {
+    for (nb = ne; *ne; ++ne) {
+      if (*ne == '|') break;
+    }
+    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
+    if (*ne) ++ne;
+  }
+  return equiv;
+}
+
+
+/* think of this as a c++ template<> or a scheme macro */
+#define SWIG_TypeCheck_Template(comparison, ty)         \
+  if (ty) {                                             \
+    swig_cast_info *iter = ty->cast;                    \
+    while (iter) {                                      \
+      if (comparison) {                                 \
+        if (iter == ty->cast) return iter;              \
+        /* Move iter to the top of the linked list */   \
+        iter->prev->next = iter->next;                  \
+        if (iter->next)                                 \
+          iter->next->prev = iter->prev;                \
+        iter->next = ty->cast;                          \
+        iter->prev = 0;                                 \
+        if (ty->cast) ty->cast->prev = iter;            \
+        ty->cast = iter;                                \
+        return iter;                                    \
+      }                                                 \
+      iter = iter->next;                                \
+    }                                                   \
+  }                                                     \
+  return 0
+
+/*
+  Check the typename
+*/
+SWIGRUNTIME swig_cast_info *
+SWIG_TypeCheck(const char *c, swig_type_info *ty) {
+  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
+}
+
+/* Same as previous function, except strcmp is replaced with a pointer comparison */
+SWIGRUNTIME swig_cast_info *
+SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
+  SWIG_TypeCheck_Template(iter->type == from, into);
+}
+
+/*
+  Cast a pointer up an inheritance hierarchy
+*/
+SWIGRUNTIMEINLINE void *
+SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
+  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
+}
+
+/* 
+   Dynamic pointer casting. Down an inheritance hierarchy
+*/
+SWIGRUNTIME swig_type_info *
+SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
+  swig_type_info *lastty = ty;
+  if (!ty || !ty->dcast) return ty;
+  while (ty && (ty->dcast)) {
+    ty = (*ty->dcast)(ptr);
+    if (ty) lastty = ty;
+  }
+  return lastty;
+}
+
+/*
+  Return the name associated with this type
+*/
+SWIGRUNTIMEINLINE const char *
+SWIG_TypeName(const swig_type_info *ty) {
+  return ty->name;
+}
+
+/*
+  Return the pretty name associated with this type,
+  that is an unmangled type name in a form presentable to the user.
+*/
+SWIGRUNTIME const char *
+SWIG_TypePrettyName(const swig_type_info *type) {
+  /* The "str" field contains the equivalent pretty names of the
+     type, separated by vertical-bar characters.  We choose
+     to print the last name, as it is often (?) the most
+     specific. */
+  if (!type) return NULL;
+  if (type->str != NULL) {
+    const char *last_name = type->str;
+    const char *s;
+    for (s = type->str; *s; s++)
+      if (*s == '|') last_name = s+1;
+    return last_name;
+  }
+  else
+    return type->name;
+}
+
+/* 
+   Set the clientdata field for a type
+*/
+SWIGRUNTIME void
+SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
+  swig_cast_info *cast = ti->cast;
+  /* if (ti->clientdata == clientdata) return; */
+  ti->clientdata = clientdata;
+  
+  while (cast) {
+    if (!cast->converter) {
+      swig_type_info *tc = cast->type;
+      if (!tc->clientdata) {
+	SWIG_TypeClientData(tc, clientdata);
+      }
+    }    
+    cast = cast->next;
+  }
+}
+SWIGRUNTIME void
+SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
+  SWIG_TypeClientData(ti, clientdata);
+  ti->owndata = 1;
+}
+  
+/*
+  Search for a swig_type_info structure only by mangled name
+  Search is a O(log #types)
+  
+  We start searching at module start, and finish searching when start == end.  
+  Note: if start == end at the beginning of the function, we go all the way around
+  the circular list.
+*/
+SWIGRUNTIME swig_type_info *
+SWIG_MangledTypeQueryModule(swig_module_info *start, 
+                            swig_module_info *end, 
+		            const char *name) {
+  swig_module_info *iter = start;
+  do {
+    if (iter->size) {
+      register size_t l = 0;
+      register size_t r = iter->size - 1;
+      do {
+	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
+	register size_t i = (l + r) >> 1; 
+	const char *iname = iter->types[i]->name;
+	if (iname) {
+	  register int compare = strcmp(name, iname);
+	  if (compare == 0) {	    
+	    return iter->types[i];
+	  } else if (compare < 0) {
+	    if (i) {
+	      r = i - 1;
+	    } else {
+	      break;
+	    }
+	  } else if (compare > 0) {
+	    l = i + 1;
+	  }
+	} else {
+	  break; /* should never happen */
+	}
+      } while (l <= r);
+    }
+    iter = iter->next;
+  } while (iter != end);
+  return 0;
+}
+
+/*
+  Search for a swig_type_info structure for either a mangled name or a human readable name.
+  It first searches the mangled names of the types, which is a O(log #types)
+  If a type is not found it then searches the human readable names, which is O(#types).
+  
+  We start searching at module start, and finish searching when start == end.  
+  Note: if start == end at the beginning of the function, we go all the way around
+  the circular list.
+*/
+SWIGRUNTIME swig_type_info *
+SWIG_TypeQueryModule(swig_module_info *start, 
+                     swig_module_info *end, 
+		     const char *name) {
+  /* STEP 1: Search the name field using binary search */
+  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
+  if (ret) {
+    return ret;
+  } else {
+    /* STEP 2: If the type hasn't been found, do a complete search
+       of the str field (the human readable name) */
+    swig_module_info *iter = start;
+    do {
+      register size_t i = 0;
+      for (; i < iter->size; ++i) {
+	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
+	  return iter->types[i];
+      }
+      iter = iter->next;
+    } while (iter != end);
+  }
+  
+  /* neither found a match */
+  return 0;
+}
+
+/* 
+   Pack binary data into a string
+*/
+SWIGRUNTIME char *
+SWIG_PackData(char *c, void *ptr, size_t sz) {
+  static const char hex[17] = "0123456789abcdef";
+  register const unsigned char *u = (unsigned char *) ptr;
+  register const unsigned char *eu =  u + sz;
+  for (; u != eu; ++u) {
+    register unsigned char uu = *u;
+    *(c++) = hex[(uu & 0xf0) >> 4];
+    *(c++) = hex[uu & 0xf];
+  }
+  return c;
+}
+
+/* 
+   Unpack binary data from a string
+*/
+SWIGRUNTIME const char *
+SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
+  register unsigned char *u = (unsigned char *) ptr;
+  register const unsigned char *eu = u + sz;
+  for (; u != eu; ++u) {
+    register char d = *(c++);
+    register unsigned char uu;
+    if ((d >= '0') && (d <= '9'))
+      uu = ((d - '0') << 4);
+    else if ((d >= 'a') && (d <= 'f'))
+      uu = ((d - ('a'-10)) << 4);
+    else 
+      return (char *) 0;
+    d = *(c++);
+    if ((d >= '0') && (d <= '9'))
+      uu |= (d - '0');
+    else if ((d >= 'a') && (d <= 'f'))
+      uu |= (d - ('a'-10));
+    else 
+      return (char *) 0;
+    *u = uu;
+  }
+  return c;
+}
+
+/* 
+   Pack 'void *' into a string buffer.
+*/
+SWIGRUNTIME char *
+SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
+  char *r = buff;
+  if ((2*sizeof(void *) + 2) > bsz) return 0;
+  *(r++) = '_';
+  r = SWIG_PackData(r,&ptr,sizeof(void *));
+  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
+  strcpy(r,name);
+  return buff;
+}
+
+SWIGRUNTIME const char *
+SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
+  if (*c != '_') {
+    if (strcmp(c,"NULL") == 0) {
+      *ptr = (void *) 0;
+      return name;
+    } else {
+      return 0;
+    }
+  }
+  return SWIG_UnpackData(++c,ptr,sizeof(void *));
+}
+
+SWIGRUNTIME char *
+SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
+  char *r = buff;
+  size_t lname = (name ? strlen(name) : 0);
+  if ((2*sz + 2 + lname) > bsz) return 0;
+  *(r++) = '_';
+  r = SWIG_PackData(r,ptr,sz);
+  if (lname) {
+    strncpy(r,name,lname+1);
+  } else {
+    *r = 0;
+  }
+  return buff;
+}
+
+SWIGRUNTIME const char *
+SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
+  if (*c != '_') {
+    if (strcmp(c,"NULL") == 0) {
+      memset(ptr,0,sz);
+      return name;
+    } else {
+      return 0;
+    }
+  }
+  return SWIG_UnpackData(++c,ptr,sz);
+}
+
+#ifdef __cplusplus
+}
+#endif
+
+/*  Errors in SWIG */
+#define  SWIG_UnknownError    	   -1 
+#define  SWIG_IOError        	   -2 
+#define  SWIG_RuntimeError   	   -3 
+#define  SWIG_IndexError     	   -4 
+#define  SWIG_TypeError      	   -5 
+#define  SWIG_DivisionByZero 	   -6 
+#define  SWIG_OverflowError  	   -7 
+#define  SWIG_SyntaxError    	   -8 
+#define  SWIG_ValueError     	   -9 
+#define  SWIG_SystemError    	   -10
+#define  SWIG_AttributeError 	   -11
+#define  SWIG_MemoryError    	   -12 
+#define  SWIG_NullReferenceError   -13
+
+
+
+
+/* Add PyOS_snprintf for old Pythons */
+#if PY_VERSION_HEX < 0x02020000
+# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
+#  define PyOS_snprintf _snprintf
+# else
+#  define PyOS_snprintf snprintf
+# endif
+#endif
+
+/* A crude PyString_FromFormat implementation for old Pythons */
+#if PY_VERSION_HEX < 0x02020000
+
+#ifndef SWIG_PYBUFFER_SIZE
+# define SWIG_PYBUFFER_SIZE 1024
+#endif
+
+static PyObject *
+PyString_FromFormat(const char *fmt, ...) {
+  va_list ap;
+  char buf[SWIG_PYBUFFER_SIZE * 2];
+  int res;
+  va_start(ap, fmt);
+  res = vsnprintf(buf, sizeof(buf), fmt, ap);
+  va_end(ap);
+  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
+}
+#endif
+
+/* Add PyObject_Del for old Pythons */
+#if PY_VERSION_HEX < 0x01060000
+# define PyObject_Del(op) PyMem_DEL((op))
+#endif
+#ifndef PyObject_DEL
+# define PyObject_DEL PyObject_Del
+#endif
+
+/* A crude PyExc_StopIteration exception for old Pythons */
+#if PY_VERSION_HEX < 0x02020000
+# ifndef PyExc_StopIteration
+#  define PyExc_StopIteration PyExc_RuntimeError
+# endif
+# ifndef PyObject_GenericGetAttr
+#  define PyObject_GenericGetAttr 0
+# endif
+#endif
+/* Py_NotImplemented is defined in 2.1 and up. */
+#if PY_VERSION_HEX < 0x02010000
+# ifndef Py_NotImplemented
+#  define Py_NotImplemented PyExc_RuntimeError
+# endif
+#endif
+
+
+/* A crude PyString_AsStringAndSize implementation for old Pythons */
+#if PY_VERSION_HEX < 0x02010000
+# ifndef PyString_AsStringAndSize
+#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
+# endif
+#endif
+
+/* PySequence_Size for old Pythons */
+#if PY_VERSION_HEX < 0x02000000
+# ifndef PySequence_Size
+#  define PySequence_Size PySequence_Length
+# endif
+#endif
+
+
+/* PyBool_FromLong for old Pythons */
+#if PY_VERSION_HEX < 0x02030000
+static
+PyObject *PyBool_FromLong(long ok)
+{
+  PyObject *result = ok ? Py_True : Py_False;
+  Py_INCREF(result);
+  return result;
+}
+#endif
+
+/* Py_ssize_t for old Pythons */
+/* This code is as recommended by: */
+/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
+#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
+typedef int Py_ssize_t;
+# define PY_SSIZE_T_MAX INT_MAX
+# define PY_SSIZE_T_MIN INT_MIN
+#endif
+
+/* -----------------------------------------------------------------------------
+ * error manipulation
+ * ----------------------------------------------------------------------------- */
+
+SWIGRUNTIME PyObject*
+SWIG_Python_ErrorType(int code) {
+  PyObject* type = 0;
+  switch(code) {
+  case SWIG_MemoryError:
+    type = PyExc_MemoryError;
+    break;
+  case SWIG_IOError:
+    type = PyExc_IOError;
+    break;
+  case SWIG_RuntimeError:
+    type = PyExc_RuntimeError;
+    break;
+  case SWIG_IndexError:
+    type = PyExc_IndexError;
+    break;
+  case SWIG_TypeError:
+    type = PyExc_TypeError;
+    break;
+  case SWIG_DivisionByZero:
+    type = PyExc_ZeroDivisionError;
+    break;
+  case SWIG_OverflowError:
+    type = PyExc_OverflowError;
+    break;
+  case SWIG_SyntaxError:
+    type = PyExc_SyntaxError;
+    break;
+  case SWIG_ValueError:
+    type = PyExc_ValueError;
+    break;
+  case SWIG_SystemError:
+    type = PyExc_SystemError;
+    break;
+  case SWIG_AttributeError:
+    type = PyExc_AttributeError;
+    break;
+  default:
+    type = PyExc_RuntimeError;
+  }
+  return type;
+}
+
+
+SWIGRUNTIME void
+SWIG_Python_AddErrorMsg(const char* mesg)
+{
+  PyObject *type = 0;
+  PyObject *value = 0;
+  PyObject *traceback = 0;
+
+  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
+  if (value) {
+    PyObject *old_str = PyObject_Str(value);
+    PyErr_Clear();
+    Py_XINCREF(type);
+    PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
+    Py_DECREF(old_str);
+    Py_DECREF(value);
+  } else {
+    PyErr_Format(PyExc_RuntimeError, mesg);
+  }
+}
+
+
+
+#if defined(SWIG_PYTHON_NO_THREADS)
+#  if defined(SWIG_PYTHON_THREADS)
+#    undef SWIG_PYTHON_THREADS
+#  endif
+#endif
+#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
+#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
+#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
+#      define SWIG_PYTHON_USE_GIL
+#    endif
+#  endif
+#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
+#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
+#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
+#    endif
+#    ifdef __cplusplus /* C++ code */
+       class SWIG_Python_Thread_Block {
+         bool status;
+         PyGILState_STATE state;
+       public:
+         void end() { if (status) { PyGILState_Release(state); status = false;} }
+         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
+         ~SWIG_Python_Thread_Block() { end(); }
+       };
+       class SWIG_Python_Thread_Allow {
+         bool status;
+         PyThreadState *save;
+       public:
+         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
+         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
+         ~SWIG_Python_Thread_Allow() { end(); }
+       };
+#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
+#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
+#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
+#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
+#    else /* C code */
+#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
+#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
+#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
+#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
+#    endif
+#  else /* Old thread way, not implemented, user must provide it */
+#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
+#      define SWIG_PYTHON_INITIALIZE_THREADS
+#    endif
+#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
+#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
+#    endif
+#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
+#      define SWIG_PYTHON_THREAD_END_BLOCK
+#    endif
+#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
+#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
+#    endif
+#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
+#      define SWIG_PYTHON_THREAD_END_ALLOW
+#    endif
+#  endif
+#else /* No thread support */
+#  define SWIG_PYTHON_INITIALIZE_THREADS
+#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
+#  define SWIG_PYTHON_THREAD_END_BLOCK
+#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
+#  define SWIG_PYTHON_THREAD_END_ALLOW
+#endif
+
+/* -----------------------------------------------------------------------------
+ * Python API portion that goes into the runtime
+ * ----------------------------------------------------------------------------- */
+
+#ifdef __cplusplus
+extern "C" {
+#if 0
+} /* cc-mode */
+#endif
+#endif
+
+/* -----------------------------------------------------------------------------
+ * Constant declarations
+ * ----------------------------------------------------------------------------- */
+
+/* Constant Types */
+#define SWIG_PY_POINTER 4
+#define SWIG_PY_BINARY  5
+
+/* Constant information structure */
+typedef struct swig_const_info {
+  int type;
+  char *name;
+  long lvalue;
+  double dvalue;
+  void   *pvalue;
+  swig_type_info **ptype;
+} swig_const_info;
+
+#ifdef __cplusplus
+#if 0
+{ /* cc-mode */
+#endif
+}
+#endif
+
+
+/* -----------------------------------------------------------------------------
+ * See the LICENSE file for information on copyright, usage and redistribution
+ * of SWIG, and the README file for authors - http://www.swig.org/release.html.
+ *
+ * pyrun.swg
+ *
+ * This file contains the runtime support for Python modules
+ * and includes code for managing global variables and pointer
+ * type checking.
+ *
+ * ----------------------------------------------------------------------------- */
+
+/* Common SWIG API */
+
+/* for raw pointers */
+#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
+#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
+#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)
+#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(ptr, type, flags)
+#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
+#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
+#define swig_owntype                                    int
+
+/* for raw packed data */
+#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
+#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)
+
+/* for class or struct pointers */
+#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
+#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)
+
+/* for C or C++ function pointers */
+#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
+#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(ptr, type, 0)
+
+/* for C++ member pointers, ie, member methods */
+#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
+#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)
+
+
+/* Runtime API */
+
+#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule()
+#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
+#define SWIG_NewClientData(obj)                         PySwigClientData_New(obj)
+
+#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
+#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
+#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
+#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
+#define SWIG_fail                        		goto fail					   
+
+
+/* Runtime API implementation */
+
+/* Error manipulation */
+
+SWIGINTERN void 
+SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
+  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
+  PyErr_SetObject(errtype, obj);
+  Py_DECREF(obj);
+  SWIG_PYTHON_THREAD_END_BLOCK;
+}
+
+SWIGINTERN void 
+SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
+  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
+  PyErr_SetString(errtype, (char *) msg);
+  SWIG_PYTHON_THREAD_END_BLOCK;
+}
+
+#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)
+
+/* Set a constant value */
+
+SWIGINTERN void
+SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
+  PyDict_SetItemString(d, (char*) name, obj);
+  Py_DECREF(obj);                            
+}
+
+/* Append a value to the result obj */
+
+SWIGINTERN PyObject*
+SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
+#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
+  if (!result) {
+    result = obj;
+  } else if (result == Py_None) {
+    Py_DECREF(result);
+    result = obj;
+  } else {
+    if (!PyList_Check(result)) {
+      PyObject *o2 = result;
+      result = PyList_New(1);
+      PyList_SetItem(result, 0, o2);
+    }
+    PyList_Append(result,obj);
+    Py_DECREF(obj);
+  }
+  return result;
+#else
+  PyObject*   o2;
+  PyObject*   o3;
+  if (!result) {
+    result = obj;
+  } else if (result == Py_None) {
+    Py_DECREF(result);
+    result = obj;
+  } else {
+    if (!PyTuple_Check(result)) {
+      o2 = result;
+      result = PyTuple_New(1);
+      PyTuple_SET_ITEM(result, 0, o2);
+    }
+    o3 = PyTuple_New(1);
+    PyTuple_SET_ITEM(o3, 0, obj);
+    o2 = result;
+    result = PySequence_Concat(o2, o3);
+    Py_DECREF(o2);
+    Py_DECREF(o3);
+  }
+  return result;
+#endif
+}
+
+/* Unpack the argument tuple */
+
+SWIGINTERN int
+SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
+{
+  if (!args) {
+    if (!min && !max) {
+      return 1;
+    } else {
+      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
+		   name, (min == max ? "" : "at least "), (int)min);
+      return 0;
+    }
+  }  
+  if (!PyTuple_Check(args)) {
+    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
+    return 0;
+  } else {
+    register Py_ssize_t l = PyTuple_GET_SIZE(args);
+    if (l < min) {
+      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
+		   name, (min == max ? "" : "at least "), (int)min, (int)l);
+      return 0;
+    } else if (l > max) {
+      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
+		   name, (min == max ? "" : "at most "), (int)max, (int)l);
+      return 0;
+    } else {
+      register int i;
+      for (i = 0; i < l; ++i) {
+	objs[i] = PyTuple_GET_ITEM(args, i);
+      }
+      for (; l < max; ++l) {
+	objs[l] = 0;
+      }
+      return i + 1;
+    }    
+  }
+}
+
+/* A functor is a function object with one single object argument */
+#if PY_VERSION_HEX >= 0x02020000
+#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
+#else
+#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
+#endif
+
+/*
+  Helper for static pointer initialization for both C and C++ code, for example
+  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
+*/
+#ifdef __cplusplus
+#define SWIG_STATIC_POINTER(var)  var
+#else
+#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
+#endif
+
+/* -----------------------------------------------------------------------------
+ * Pointer declarations
+ * ----------------------------------------------------------------------------- */
+
+/* Flags for new pointer objects */
+#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
+#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)
+
+#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)
+
+#ifdef __cplusplus
+extern "C" {
+#if 0
+} /* cc-mode */
+#endif
+#endif
+
+/*  How to access Py_None */
+#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
+#  ifndef SWIG_PYTHON_NO_BUILD_NONE
+#    ifndef SWIG_PYTHON_BUILD_NONE
+#      define SWIG_PYTHON_BUILD_NONE
+#    endif
+#  endif
+#endif
+
+#ifdef SWIG_PYTHON_BUILD_NONE
+#  ifdef Py_None
+#   undef Py_None
+#   define Py_None SWIG_Py_None()
+#  endif
+SWIGRUNTIMEINLINE PyObject * 
+_SWIG_Py_None(void)
+{
+  PyObject *none = Py_BuildValue((char*)"");
+  Py_DECREF(none);
+  return none;
+}
+SWIGRUNTIME PyObject * 
+SWIG_Py_None(void)
+{
+  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
+  return none;
+}
+#endif
+
+/* The python void return value */
+
+SWIGRUNTIMEINLINE PyObject * 
+SWIG_Py_Void(void)
+{
+  PyObject *none = Py_None;
+  Py_INCREF(none);
+  return none;
+}
+
+/* PySwigClientData */
+
+typedef struct {
+  PyObject *klass;
+  PyObject *newraw;
+  PyObject *newargs;
+  PyObject *destroy;
+  int delargs;
+  int implicitconv;
+} PySwigClientData;
+
+SWIGRUNTIMEINLINE int 
+SWIG_Python_CheckImplicit(swig_type_info *ty)
+{
+  PySwigClientData *data = (PySwigClientData *)ty->clientdata;
+  return data ? data->implicitconv : 0;
+}
+
+SWIGRUNTIMEINLINE PyObject *
+SWIG_Python_ExceptionType(swig_type_info *desc) {
+  PySwigClientData *data = desc ? (PySwigClientData *) desc->clientdata : 0;
+  PyObject *klass = data ? data->klass : 0;
+  return (klass ? klass : PyExc_RuntimeError);
+}
+
+
+SWIGRUNTIME PySwigClientData * 
+PySwigClientData_New(PyObject* obj)
+{
+  if (!obj) {
+    return 0;
+  } else {
+    PySwigClientData *data = (PySwigClientData *)malloc(sizeof(PySwigClientData));
+    /* the klass element */
+    data->klass = obj;
+    Py_INCREF(data->klass);
+    /* the newraw method and newargs arguments used to create a new raw instance */
+    if (PyClass_Check(obj)) {
+      data->newraw = 0;
+      data->newargs = obj;
+      Py_INCREF(obj);
+    } else {
+#if (PY_VERSION_HEX < 0x02020000)
+      data->newraw = 0;
+#else
+      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
+#endif
+      if (data->newraw) {
+	Py_INCREF(data->newraw);
+	data->newargs = PyTuple_New(1);
+	PyTuple_SetItem(data->newargs, 0, obj);
+      } else {
+	data->newargs = obj;
+      }
+      Py_INCREF(data->newargs);
+    }
+    /* the destroy method, aka as the C++ delete method */
+    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
+    if (PyErr_Occurred()) {
+      PyErr_Clear();
+      data->destroy = 0;
+    }
+    if (data->destroy) {
+      int flags;
+      Py_INCREF(data->destroy);
+      flags = PyCFunction_GET_FLAGS(data->destroy);
+#ifdef METH_O
+      data->delargs = !(flags & (METH_O));
+#else
+      data->delargs = 0;
+#endif
+    } else {
+      data->delargs = 0;
+    }
+    data->implicitconv = 0;
+    return data;
+  }
+}
+
+SWIGRUNTIME void 
+PySwigClientData_Del(PySwigClientData* data)
+{
+  Py_XDECREF(data->newraw);
+  Py_XDECREF(data->newargs);
+  Py_XDECREF(data->destroy);
+}
+
+/* =============== PySwigObject =====================*/
+
+typedef struct {
+  PyObject_HEAD
+  void *ptr;
+  swig_type_info *ty;
+  int own;
+  PyObject *next;
+} PySwigObject;
+
+SWIGRUNTIME PyObject *
+PySwigObject_long(PySwigObject *v)
+{
+  return PyLong_FromVoidPtr(v->ptr);
+}
+
+SWIGRUNTIME PyObject *
+PySwigObject_format(const char* fmt, PySwigObject *v)
+{
+  PyObject *res = NULL;
+  PyObject *args = PyTuple_New(1);
+  if (args) {
+    if (PyTuple_SetItem(args, 0, PySwigObject_long(v)) == 0) {
+      PyObject *ofmt = PyString_FromString(fmt);
+      if (ofmt) {
+	res = PyString_Format(ofmt,args);
+	Py_DECREF(ofmt);
+      }
+      Py_DECREF(args);
+    }
+  }
+  return res;
+}
+
+SWIGRUNTIME PyObject *
+PySwigObject_oct(PySwigObject *v)
+{
+  return PySwigObject_format("%o",v);
+}
+
+SWIGRUNTIME PyObject *
+PySwigObject_hex(PySwigObject *v)
+{
+  return PySwigObject_format("%x",v);
+}
+
+SWIGRUNTIME PyObject *
+#ifdef METH_NOARGS
+PySwigObject_repr(PySwigObject *v)
+#else
+PySwigObject_repr(PySwigObject *v, PyObject *args)
+#endif
+{
+  const char *name = SWIG_TypePrettyName(v->ty);
+  PyObject *hex = PySwigObject_hex(v);    
+  PyObject *repr = PyString_FromFormat("<Swig Object of type '%s' at 0x%s>", name, PyString_AsString(hex));
+  Py_DECREF(hex);
+  if (v->next) {
+#ifdef METH_NOARGS
+    PyObject *nrep = PySwigObject_repr((PySwigObject *)v->next);
+#else
+    PyObject *nrep = PySwigObject_repr((PySwigObject *)v->next, args);
+#endif
+    PyString_ConcatAndDel(&repr,nrep);
+  }
+  return repr;  
+}
+
+SWIGRUNTIME int
+PySwigObject_print(PySwigObject *v, FILE *fp, int SWIGUNUSEDPARM(flags))
+{
+#ifdef METH_NOARGS
+  PyObject *repr = PySwigObject_repr(v);
+#else
+  PyObject *repr = PySwigObject_repr(v, NULL);
+#endif
+  if (repr) {
+    fputs(PyString_AsString(repr), fp);
+    Py_DECREF(repr);
+    return 0; 
+  } else {
+    return 1; 
+  }
+}
+
+SWIGRUNTIME PyObject *
+PySwigObject_str(PySwigObject *v)
+{
+  char result[SWIG_BUFFER_SIZE];
+  return SWIG_PackVoidPtr(result, v->ptr, v->ty->name, sizeof(result)) ?
+    PyString_FromString(result) : 0;
+}
+
+SWIGRUNTIME int
+PySwigObject_compare(PySwigObject *v, PySwigObject *w)
+{
+  void *i = v->ptr;
+  void *j = w->ptr;
+  return (i < j) ? -1 : ((i > j) ? 1 : 0);
+}
+
+SWIGRUNTIME PyTypeObject* _PySwigObject_type(void);
+
+SWIGRUNTIME PyTypeObject*
+PySwigObject_type(void) {
+  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigObject_type();
+  return type;
+}
+
+SWIGRUNTIMEINLINE int
+PySwigObject_Check(PyObject *op) {
+  return ((op)->ob_type == PySwigObject_type())
+    || (strcmp((op)->ob_type->tp_name,"PySwigObject") == 0);
+}
+
+SWIGRUNTIME PyObject *
+PySwigObject_New(void *ptr, swig_type_info *ty, int own);
+
+SWIGRUNTIME void
+PySwigObject_dealloc(PyObject *v)
+{
+  PySwigObject *sobj = (PySwigObject *) v;
+  PyObject *next = sobj->next;
+  if (sobj->own) {
+    swig_type_info *ty = sobj->ty;
+    PySwigClientData *data = ty ? (PySwigClientData *) ty->clientdata : 0;
+    PyObject *destroy = data ? data->destroy : 0;
+    if (destroy) {
+      /* destroy is always a VARARGS method */
+      PyObject *res;
+      if (data->delargs) {
+	/* we need to create a temporal object to carry the destroy operation */
+	PyObject *tmp = PySwigObject_New(sobj->ptr, ty, 0);
+	res = SWIG_Python_CallFunctor(destroy, tmp);
+	Py_DECREF(tmp);
+      } else {
+	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
+	PyObject *mself = PyCFunction_GET_SELF(destroy);
+	res = ((*meth)(mself, v));
+      }
+      Py_XDECREF(res);
+    } else {
+      const char *name = SWIG_TypePrettyName(ty);
+#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
+      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", name);
+#endif
+    }
+  } 
+  Py_XDECREF(next);
+  PyObject_DEL(v);
+}
+
+SWIGRUNTIME PyObject* 
+PySwigObject_append(PyObject* v, PyObject* next)
+{
+  PySwigObject *sobj = (PySwigObject *) v;
+#ifndef METH_O
+  PyObject *tmp = 0;
+  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
+  next = tmp;
+#endif
+  if (!PySwigObject_Check(next)) {
+    return NULL;
+  }
+  sobj->next = next;
+  Py_INCREF(next);
+  return SWIG_Py_Void();
+}
+
+SWIGRUNTIME PyObject* 
+#ifdef METH_NOARGS
+PySwigObject_next(PyObject* v)
+#else
+PySwigObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
+#endif
+{
+  PySwigObject *sobj = (PySwigObject *) v;
+  if (sobj->next) {    
+    Py_INCREF(sobj->next);
+    return sobj->next;
+  } else {
+    return SWIG_Py_Void();
+  }
+}
+
+SWIGINTERN PyObject*
+#ifdef METH_NOARGS
+PySwigObject_disown(PyObject *v)
+#else
+PySwigObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
+#endif
+{
+  PySwigObject *sobj = (PySwigObject *)v;
+  sobj->own = 0;
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject*
+#ifdef METH_NOARGS
+PySwigObject_acquire(PyObject *v)
+#else
+PySwigObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
+#endif
+{
+  PySwigObject *sobj = (PySwigObject *)v;
+  sobj->own = SWIG_POINTER_OWN;
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject*
+PySwigObject_own(PyObject *v, PyObject *args)
+{
+  PyObject *val = 0;
+#if (PY_VERSION_HEX < 0x02020000)
+  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
+#else
+  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
+#endif
+    {
+      return NULL;
+    } 
+  else
+    {
+      PySwigObject *sobj = (PySwigObject *)v;
+      PyObject *obj = PyBool_FromLong(sobj->own);
+      if (val) {
+#ifdef METH_NOARGS
+	if (PyObject_IsTrue(val)) {
+	  PySwigObject_acquire(v);
+	} else {
+	  PySwigObject_disown(v);
+	}
+#else
+	if (PyObject_IsTrue(val)) {
+	  PySwigObject_acquire(v,args);
+	} else {
+	  PySwigObject_disown(v,args);
+	}
+#endif
+      } 
+      return obj;
+    }
+}
+
+#ifdef METH_O
+static PyMethodDef
+swigobject_methods[] = {
+  {(char *)"disown",  (PyCFunction)PySwigObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
+  {(char *)"acquire", (PyCFunction)PySwigObject_acquire, METH_NOARGS,  (char *)"aquires ownership of the pointer"},
+  {(char *)"own",     (PyCFunction)PySwigObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
+  {(char *)"append",  (PyCFunction)PySwigObject_append,  METH_O,       (char *)"appends another 'this' object"},
+  {(char *)"next",    (PyCFunction)PySwigObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
+  {(char *)"__repr__",(PyCFunction)PySwigObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
+  {0, 0, 0, 0}  
+};
+#else
+static PyMethodDef
+swigobject_methods[] = {
+  {(char *)"disown",  (PyCFunction)PySwigObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
+  {(char *)"acquire", (PyCFunction)PySwigObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
+  {(char *)"own",     (PyCFunction)PySwigObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
+  {(char *)"append",  (PyCFunction)PySwigObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
+  {(char *)"next",    (PyCFunction)PySwigObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
+  {(char *)"__repr__",(PyCFunction)PySwigObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
+  {0, 0, 0, 0}  
+};
+#endif
+
+#if PY_VERSION_HEX < 0x02020000
+SWIGINTERN PyObject *
+PySwigObject_getattr(PySwigObject *sobj,char *name)
+{
+  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
+}
+#endif
+
+SWIGRUNTIME PyTypeObject*
+_PySwigObject_type(void) {
+  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";
+  
+  static PyNumberMethods PySwigObject_as_number = {
+    (binaryfunc)0, /*nb_add*/
+    (binaryfunc)0, /*nb_subtract*/
+    (binaryfunc)0, /*nb_multiply*/
+    (binaryfunc)0, /*nb_divide*/
+    (binaryfunc)0, /*nb_remainder*/
+    (binaryfunc)0, /*nb_divmod*/
+    (ternaryfunc)0,/*nb_power*/
+    (unaryfunc)0,  /*nb_negative*/
+    (unaryfunc)0,  /*nb_positive*/
+    (unaryfunc)0,  /*nb_absolute*/
+    (inquiry)0,    /*nb_nonzero*/
+    0,		   /*nb_invert*/
+    0,		   /*nb_lshift*/
+    0,		   /*nb_rshift*/
+    0,		   /*nb_and*/
+    0,		   /*nb_xor*/
+    0,		   /*nb_or*/
+    (coercion)0,   /*nb_coerce*/
+    (unaryfunc)PySwigObject_long, /*nb_int*/
+    (unaryfunc)PySwigObject_long, /*nb_long*/
+    (unaryfunc)0,                 /*nb_float*/
+    (unaryfunc)PySwigObject_oct,  /*nb_oct*/
+    (unaryfunc)PySwigObject_hex,  /*nb_hex*/
+#if PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
+    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
+#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
+    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
+#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
+    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
+#endif
+  };
+
+  static PyTypeObject pyswigobject_type;  
+  static int type_init = 0;
+  if (!type_init) {
+    const PyTypeObject tmp
+      = {
+	PyObject_HEAD_INIT(NULL)
+	0,				    /* ob_size */
+	(char *)"PySwigObject",		    /* tp_name */
+	sizeof(PySwigObject),		    /* tp_basicsize */
+	0,			            /* tp_itemsize */
+	(destructor)PySwigObject_dealloc,   /* tp_dealloc */
+	(printfunc)PySwigObject_print,	    /* tp_print */
+#if PY_VERSION_HEX < 0x02020000
+	(getattrfunc)PySwigObject_getattr,  /* tp_getattr */ 
+#else
+	(getattrfunc)0,			    /* tp_getattr */ 
+#endif
+	(setattrfunc)0,			    /* tp_setattr */ 
+	(cmpfunc)PySwigObject_compare,	    /* tp_compare */ 
+	(reprfunc)PySwigObject_repr,	    /* tp_repr */    
+	&PySwigObject_as_number,	    /* tp_as_number */
+	0,				    /* tp_as_sequence */
+	0,				    /* tp_as_mapping */
+	(hashfunc)0,			    /* tp_hash */
+	(ternaryfunc)0,			    /* tp_call */
+	(reprfunc)PySwigObject_str,	    /* tp_str */
+	PyObject_GenericGetAttr,            /* tp_getattro */
+	0,				    /* tp_setattro */
+	0,		                    /* tp_as_buffer */
+	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
+	swigobject_doc, 	            /* tp_doc */        
+	0,                                  /* tp_traverse */
+	0,                                  /* tp_clear */
+	0,                                  /* tp_richcompare */
+	0,                                  /* tp_weaklistoffset */
+#if PY_VERSION_HEX >= 0x02020000
+	0,                                  /* tp_iter */
+	0,                                  /* tp_iternext */
+	swigobject_methods,		    /* tp_methods */ 
+	0,			            /* tp_members */
+	0,				    /* tp_getset */	    	
+	0,			            /* tp_base */	        
+	0,				    /* tp_dict */	    	
+	0,				    /* tp_descr_get */  	
+	0,				    /* tp_descr_set */  	
+	0,				    /* tp_dictoffset */ 	
+	0,				    /* tp_init */	    	
+	0,				    /* tp_alloc */	    	
+	0,			            /* tp_new */	    	
+	0,	                            /* tp_free */	   
+        0,                                  /* tp_is_gc */  
+	0,				    /* tp_bases */   
+	0,				    /* tp_mro */
+	0,				    /* tp_cache */   
+ 	0,				    /* tp_subclasses */
+	0,				    /* tp_weaklist */
+#endif
+#if PY_VERSION_HEX >= 0x02030000
+	0,                                  /* tp_del */
+#endif
+#ifdef COUNT_ALLOCS
+	0,0,0,0                             /* tp_alloc -> tp_next */
+#endif
+      };
+    pyswigobject_type = tmp;
+    pyswigobject_type.ob_type = &PyType_Type;
+    type_init = 1;
+  }
+  return &pyswigobject_type;
+}
+
+SWIGRUNTIME PyObject *
+PySwigObject_New(void *ptr, swig_type_info *ty, int own)
+{
+  PySwigObject *sobj = PyObject_NEW(PySwigObject, PySwigObject_type());
+  if (sobj) {
+    sobj->ptr  = ptr;
+    sobj->ty   = ty;
+    sobj->own  = own;
+    sobj->next = 0;
+  }
+  return (PyObject *)sobj;
+}
+
+/* -----------------------------------------------------------------------------
+ * Implements a simple Swig Packed type, and use it instead of string
+ * ----------------------------------------------------------------------------- */
+
+typedef struct {
+  PyObject_HEAD
+  void *pack;
+  swig_type_info *ty;
+  size_t size;
+} PySwigPacked;
+
+SWIGRUNTIME int
+PySwigPacked_print(PySwigPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
+{
+  char result[SWIG_BUFFER_SIZE];
+  fputs("<Swig Packed ", fp); 
+  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
+    fputs("at ", fp); 
+    fputs(result, fp); 
+  }
+  fputs(v->ty->name,fp); 
+  fputs(">", fp);
+  return 0; 
+}
+  
+SWIGRUNTIME PyObject *
+PySwigPacked_repr(PySwigPacked *v)
+{
+  char result[SWIG_BUFFER_SIZE];
+  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
+    return PyString_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
+  } else {
+    return PyString_FromFormat("<Swig Packed %s>", v->ty->name);
+  }  
+}
+
+SWIGRUNTIME PyObject *
+PySwigPacked_str(PySwigPacked *v)
+{
+  char result[SWIG_BUFFER_SIZE];
+  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
+    return PyString_FromFormat("%s%s", result, v->ty->name);
+  } else {
+    return PyString_FromString(v->ty->name);
+  }  
+}
+
+SWIGRUNTIME int
+PySwigPacked_compare(PySwigPacked *v, PySwigPacked *w)
+{
+  size_t i = v->size;
+  size_t j = w->size;
+  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
+  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
+}
+
+SWIGRUNTIME PyTypeObject* _PySwigPacked_type(void);
+
+SWIGRUNTIME PyTypeObject*
+PySwigPacked_type(void) {
+  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigPacked_type();
+  return type;
+}
+
+SWIGRUNTIMEINLINE int
+PySwigPacked_Check(PyObject *op) {
+  return ((op)->ob_type == _PySwigPacked_type()) 
+    || (strcmp((op)->ob_type->tp_name,"PySwigPacked") == 0);
+}
+
+SWIGRUNTIME void
+PySwigPacked_dealloc(PyObject *v)
+{
+  if (PySwigPacked_Check(v)) {
+    PySwigPacked *sobj = (PySwigPacked *) v;
+    free(sobj->pack);
+  }
+  PyObject_DEL(v);
+}
+
+SWIGRUNTIME PyTypeObject*
+_PySwigPacked_type(void) {
+  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
+  static PyTypeObject pyswigpacked_type;
+  static int type_init = 0;  
+  if (!type_init) {
+    const PyTypeObject tmp
+      = {
+	PyObject_HEAD_INIT(NULL)
+	0,				    /* ob_size */	
+	(char *)"PySwigPacked",		    /* tp_name */	
+	sizeof(PySwigPacked),		    /* tp_basicsize */	
+	0,				    /* tp_itemsize */	
+	(destructor)PySwigPacked_dealloc,   /* tp_dealloc */	
+	(printfunc)PySwigPacked_print,	    /* tp_print */   	
+	(getattrfunc)0,			    /* tp_getattr */ 	
+	(setattrfunc)0,			    /* tp_setattr */ 	
+	(cmpfunc)PySwigPacked_compare,	    /* tp_compare */ 	
+	(reprfunc)PySwigPacked_repr,	    /* tp_repr */    	
+	0,	                            /* tp_as_number */	
+	0,				    /* tp_as_sequence */
+	0,				    /* tp_as_mapping */	
+	(hashfunc)0,			    /* tp_hash */	
+	(ternaryfunc)0,			    /* tp_call */	
+	(reprfunc)PySwigPacked_str,	    /* tp_str */	
+	PyObject_GenericGetAttr,            /* tp_getattro */
+	0,				    /* tp_setattro */
+	0,		                    /* tp_as_buffer */
+	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
+	swigpacked_doc, 	            /* tp_doc */
+	0,                                  /* tp_traverse */
+	0,                                  /* tp_clear */
+	0,                                  /* tp_richcompare */
+	0,                                  /* tp_weaklistoffset */
+#if PY_VERSION_HEX >= 0x02020000
+	0,                                  /* tp_iter */
+	0,                                  /* tp_iternext */
+	0,		                    /* tp_methods */ 
+	0,			            /* tp_members */
+	0,				    /* tp_getset */	    	
+	0,			            /* tp_base */	        
+	0,				    /* tp_dict */	    	
+	0,				    /* tp_descr_get */  	
+	0,				    /* tp_descr_set */  	
+	0,				    /* tp_dictoffset */ 	
+	0,				    /* tp_init */	    	
+	0,				    /* tp_alloc */	    	
+	0,			            /* tp_new */	    	
+	0, 	                            /* tp_free */	   
+        0,                                  /* tp_is_gc */  
+	0,				    /* tp_bases */   
+	0,				    /* tp_mro */
+	0,				    /* tp_cache */   
+ 	0,				    /* tp_subclasses */
+	0,				    /* tp_weaklist */
+#endif
+#if PY_VERSION_HEX >= 0x02030000
+	0,                                  /* tp_del */
+#endif
+#ifdef COUNT_ALLOCS
+	0,0,0,0                             /* tp_alloc -> tp_next */
+#endif
+      };
+    pyswigpacked_type = tmp;
+    pyswigpacked_type.ob_type = &PyType_Type;
+    type_init = 1;
+  }
+  return &pyswigpacked_type;
+}
+
+SWIGRUNTIME PyObject *
+PySwigPacked_New(void *ptr, size_t size, swig_type_info *ty)
+{
+  PySwigPacked *sobj = PyObject_NEW(PySwigPacked, PySwigPacked_type());
+  if (sobj) {
+    void *pack = malloc(size);
+    if (pack) {
+      memcpy(pack, ptr, size);
+      sobj->pack = pack;
+      sobj->ty   = ty;
+      sobj->size = size;
+    } else {
+      PyObject_DEL((PyObject *) sobj);
+      sobj = 0;
+    }
+  }
+  return (PyObject *) sobj;
+}
+
+SWIGRUNTIME swig_type_info *
+PySwigPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
+{
+  if (PySwigPacked_Check(obj)) {
+    PySwigPacked *sobj = (PySwigPacked *)obj;
+    if (sobj->size != size) return 0;
+    memcpy(ptr, sobj->pack, size);
+    return sobj->ty;
+  } else {
+    return 0;
+  }
+}
+
+/* -----------------------------------------------------------------------------
+ * pointers/data manipulation
+ * ----------------------------------------------------------------------------- */
+
+SWIGRUNTIMEINLINE PyObject *
+_SWIG_This(void)
+{
+  return PyString_FromString("this");
+}
+
+SWIGRUNTIME PyObject *
+SWIG_This(void)
+{
+  static PyObject *SWIG_STATIC_POINTER(swig_this) = _SWIG_This();
+  return swig_this;
+}
+
+/* #define SWIG_PYTHON_SLOW_GETSET_THIS */
+
+SWIGRUNTIME PySwigObject *
+SWIG_Python_GetSwigThis(PyObject *pyobj) 
+{
+  if (PySwigObject_Check(pyobj)) {
+    return (PySwigObject *) pyobj;
+  } else {
+    PyObject *obj = 0;
+#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
+    if (PyInstance_Check(pyobj)) {
+      obj = _PyInstance_Lookup(pyobj, SWIG_This());      
+    } else {
+      PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
+      if (dictptr != NULL) {
+	PyObject *dict = *dictptr;
+	obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
+      } else {
+#ifdef PyWeakref_CheckProxy
+	if (PyWeakref_CheckProxy(pyobj)) {
+	  PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
+	  return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
+	}
+#endif
+	obj = PyObject_GetAttr(pyobj,SWIG_This());
+	if (obj) {
+	  Py_DECREF(obj);
+	} else {
+	  if (PyErr_Occurred()) PyErr_Clear();
+	  return 0;
+	}
+      }
+    }
+#else
+    obj = PyObject_GetAttr(pyobj,SWIG_This());
+    if (obj) {
+      Py_DECREF(obj);
+    } else {
+      if (PyErr_Occurred()) PyErr_Clear();
+      return 0;
+    }
+#endif
+    if (obj && !PySwigObject_Check(obj)) {
+      /* a PyObject is called 'this', try to get the 'real this'
+	 PySwigObject from it */ 
+      return SWIG_Python_GetSwigThis(obj);
+    }
+    return (PySwigObject *)obj;
+  }
+}
+
+/* Acquire a pointer value */
+
+SWIGRUNTIME int
+SWIG_Python_AcquirePtr(PyObject *obj, int own) {
+  if (own) {
+    PySwigObject *sobj = SWIG_Python_GetSwigThis(obj);
+    if (sobj) {
+      int oldown = sobj->own;
+      sobj->own = own;
+      return oldown;
+    }
+  }
+  return 0;
+}
+
+/* Convert a pointer value */
+
+SWIGRUNTIME int
+SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
+  if (!obj) return SWIG_ERROR;
+  if (obj == Py_None) {
+    if (ptr) *ptr = 0;
+    return SWIG_OK;
+  } else {
+    PySwigObject *sobj = SWIG_Python_GetSwigThis(obj);
+    while (sobj) {
+      void *vptr = sobj->ptr;
+      if (ty) {
+	swig_type_info *to = sobj->ty;
+	if (to == ty) {
+	  /* no type cast needed */
+	  if (ptr) *ptr = vptr;
+	  break;
+	} else {
+	  swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
+	  if (!tc) {
+	    sobj = (PySwigObject *)sobj->next;
+	  } else {
+	    if (ptr) *ptr = SWIG_TypeCast(tc,vptr);
+	    break;
+	  }
+	}
+      } else {
+	if (ptr) *ptr = vptr;
+	break;
+      }
+    }
+    if (sobj) {
+      if (own) *own = sobj->own;
+      if (flags & SWIG_POINTER_DISOWN) {
+	sobj->own = 0;
+      }
+      return SWIG_OK;
+    } else {
+      int res = SWIG_ERROR;
+      if (flags & SWIG_POINTER_IMPLICIT_CONV) {
+	PySwigClientData *data = ty ? (PySwigClientData *) ty->clientdata : 0;
+	if (data && !data->implicitconv) {
+	  PyObject *klass = data->klass;
+	  if (klass) {
+	    PyObject *impconv;
+	    data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
+	    impconv = SWIG_Python_CallFunctor(klass, obj);
+	    data->implicitconv = 0;
+	    if (PyErr_Occurred()) {
+	      PyErr_Clear();
+	      impconv = 0;
+	    }
+	    if (impconv) {
+	      PySwigObject *iobj = SWIG_Python_GetSwigThis(impconv);
+	      if (iobj) {
+		void *vptr;
+		res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
+		if (SWIG_IsOK(res)) {
+		  if (ptr) {
+		    *ptr = vptr;
+		    /* transfer the ownership to 'ptr' */
+		    iobj->own = 0;
+		    res = SWIG_AddCast(res);
+		    res = SWIG_AddNewMask(res);
+		  } else {
+		    res = SWIG_AddCast(res);		    
+		  }
+		}
+	      }
+	      Py_DECREF(impconv);
+	    }
+	  }
+	}
+      }
+      return res;
+    }
+  }
+}
+
+/* Convert a function ptr value */
+
+SWIGRUNTIME int
+SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
+  if (!PyCFunction_Check(obj)) {
+    return SWIG_ConvertPtr(obj, ptr, ty, 0);
+  } else {
+    void *vptr = 0;
+    
+    /* here we get the method pointer for callbacks */
+    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
+    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
+    if (desc) {
+      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
+      if (!desc) return SWIG_ERROR;
+    }
+    if (ty) {
+      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
+      if (!tc) return SWIG_ERROR;
+      *ptr = SWIG_TypeCast(tc,vptr);
+    } else {
+      *ptr = vptr;
+    }
+    return SWIG_OK;
+  }
+}
+
+/* Convert a packed value value */
+
+SWIGRUNTIME int
+SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
+  swig_type_info *to = PySwigPacked_UnpackData(obj, ptr, sz);
+  if (!to) return SWIG_ERROR;
+  if (ty) {
+    if (to != ty) {
+      /* check type cast? */
+      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
+      if (!tc) return SWIG_ERROR;
+    }
+  }
+  return SWIG_OK;
+}  
+
+/* -----------------------------------------------------------------------------
+ * Create a new pointer object
+ * ----------------------------------------------------------------------------- */
+
+/*
+  Create a new instance object, whitout calling __init__, and set the
+  'this' attribute.
+*/
+
+SWIGRUNTIME PyObject* 
+SWIG_Python_NewShadowInstance(PySwigClientData *data, PyObject *swig_this)
+{
+#if (PY_VERSION_HEX >= 0x02020000)
+  PyObject *inst = 0;
+  PyObject *newraw = data->newraw;
+  if (newraw) {
+    inst = PyObject_Call(newraw, data->newargs, NULL);
+    if (inst) {
+#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
+      PyObject **dictptr = _PyObject_GetDictPtr(inst);
+      if (dictptr != NULL) {
+	PyObject *dict = *dictptr;
+	if (dict == NULL) {
+	  dict = PyDict_New();
+	  *dictptr = dict;
+	  PyDict_SetItem(dict, SWIG_This(), swig_this);
+	}
+      }
+#else
+      PyObject *key = SWIG_This();
+      PyObject_SetAttr(inst, key, swig_this);
+#endif
+    }
+  } else {
+    PyObject *dict = PyDict_New();
+    PyDict_SetItem(dict, SWIG_This(), swig_this);
+    inst = PyInstance_NewRaw(data->newargs, dict);
+    Py_DECREF(dict);
+  }
+  return inst;
+#else
+#if (PY_VERSION_HEX >= 0x02010000)
+  PyObject *inst;
+  PyObject *dict = PyDict_New();
+  PyDict_SetItem(dict, SWIG_This(), swig_this);
+  inst = PyInstance_NewRaw(data->newargs, dict);
+  Py_DECREF(dict);
+  return (PyObject *) inst;
+#else
+  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
+  if (inst == NULL) {
+    return NULL;
+  }
+  inst->in_class = (PyClassObject *)data->newargs;
+  Py_INCREF(inst->in_class);
+  inst->in_dict = PyDict_New();
+  if (inst->in_dict == NULL) {
+    Py_DECREF(inst);
+    return NULL;
+  }
+#ifdef Py_TPFLAGS_HAVE_WEAKREFS
+  inst->in_weakreflist = NULL;
+#endif
+#ifdef Py_TPFLAGS_GC
+  PyObject_GC_Init(inst);
+#endif
+  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
+  return (PyObject *) inst;
+#endif
+#endif
+}
+
+SWIGRUNTIME void
+SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
+{
+ PyObject *dict;
+#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
+ PyObject **dictptr = _PyObject_GetDictPtr(inst);
+ if (dictptr != NULL) {
+   dict = *dictptr;
+   if (dict == NULL) {
+     dict = PyDict_New();
+     *dictptr = dict;
+   }
+   PyDict_SetItem(dict, SWIG_This(), swig_this);
+   return;
+ }
+#endif
+ dict = PyObject_GetAttrString(inst, (char*)"__dict__");
+ PyDict_SetItem(dict, SWIG_This(), swig_this);
+ Py_DECREF(dict);
+} 
+
+
+SWIGINTERN PyObject *
+SWIG_Python_InitShadowInstance(PyObject *args) {
+  PyObject *obj[2];
+  if (!SWIG_Python_UnpackTuple(args,(char*)"swiginit", 2, 2, obj)) {
+    return NULL;
+  } else {
+    PySwigObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
+    if (sthis) {
+      PySwigObject_append((PyObject*) sthis, obj[1]);
+    } else {
+      SWIG_Python_SetSwigThis(obj[0], obj[1]);
+    }
+    return SWIG_Py_Void();
+  }
+}
+
+/* Create a new pointer object */
+
+SWIGRUNTIME PyObject *
+SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
+  if (!ptr) {
+    return SWIG_Py_Void();
+  } else {
+    int own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
+    PyObject *robj = PySwigObject_New(ptr, type, own);
+    PySwigClientData *clientdata = type ? (PySwigClientData *)(type->clientdata) : 0;
+    if (clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
+      PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
+      if (inst) {
+	Py_DECREF(robj);
+	robj = inst;
+      }
+    }
+    return robj;
+  }
+}
+
+/* Create a new packed object */
+
+SWIGRUNTIMEINLINE PyObject *
+SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
+  return ptr ? PySwigPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
+}
+
+/* -----------------------------------------------------------------------------*
+ *  Get type list 
+ * -----------------------------------------------------------------------------*/
+
+#ifdef SWIG_LINK_RUNTIME
+void *SWIG_ReturnGlobalTypeList(void *);
+#endif
+
+SWIGRUNTIME swig_module_info *
+SWIG_Python_GetModule(void) {
+  static void *type_pointer = (void *)0;
+  /* first check if module already created */
+  if (!type_pointer) {
+#ifdef SWIG_LINK_RUNTIME
+    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
+#else
+    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
+				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
+    if (PyErr_Occurred()) {
+      PyErr_Clear();
+      type_pointer = (void *)0;
+    }
+#endif
+  }
+  return (swig_module_info *) type_pointer;
+}
+
+#if PY_MAJOR_VERSION < 2
+/* PyModule_AddObject function was introduced in Python 2.0.  The following function
+   is copied out of Python/modsupport.c in python version 2.3.4 */
+SWIGINTERN int
+PyModule_AddObject(PyObject *m, char *name, PyObject *o)
+{
+  PyObject *dict;
+  if (!PyModule_Check(m)) {
+    PyErr_SetString(PyExc_TypeError,
+		    "PyModule_AddObject() needs module as first arg");
+    return SWIG_ERROR;
+  }
+  if (!o) {
+    PyErr_SetString(PyExc_TypeError,
+		    "PyModule_AddObject() needs non-NULL value");
+    return SWIG_ERROR;
+  }
+  
+  dict = PyModule_GetDict(m);
+  if (dict == NULL) {
+    /* Internal error -- modules must have a dict! */
+    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
+		 PyModule_GetName(m));
+    return SWIG_ERROR;
+  }
+  if (PyDict_SetItemString(dict, name, o))
+    return SWIG_ERROR;
+  Py_DECREF(o);
+  return SWIG_OK;
+}
+#endif
+
+SWIGRUNTIME void
+SWIG_Python_DestroyModule(void *vptr)
+{
+  swig_module_info *swig_module = (swig_module_info *) vptr;
+  swig_type_info **types = swig_module->types;
+  size_t i;
+  for (i =0; i < swig_module->size; ++i) {
+    swig_type_info *ty = types[i];
+    if (ty->owndata) {
+      PySwigClientData *data = (PySwigClientData *) ty->clientdata;
+      if (data) PySwigClientData_Del(data);
+    }
+  }
+  Py_DECREF(SWIG_This());
+}
+
+SWIGRUNTIME void
+SWIG_Python_SetModule(swig_module_info *swig_module) {
+  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} };/* Sentinel */
+
+  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
+				   swig_empty_runtime_method_table);
+  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
+  if (pointer && module) {
+    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
+  } else {
+    Py_XDECREF(pointer);
+  }
+}
+
+/* The python cached type query */
+SWIGRUNTIME PyObject *
+SWIG_Python_TypeCache(void) {
+  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
+  return cache;
+}
+
+SWIGRUNTIME swig_type_info *
+SWIG_Python_TypeQuery(const char *type)
+{
+  PyObject *cache = SWIG_Python_TypeCache();
+  PyObject *key = PyString_FromString(type); 
+  PyObject *obj = PyDict_GetItem(cache, key);
+  swig_type_info *descriptor;
+  if (obj) {
+    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
+  } else {
+    swig_module_info *swig_module = SWIG_Python_GetModule();
+    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
+    if (descriptor) {
+      obj = PyCObject_FromVoidPtr(descriptor, NULL);
+      PyDict_SetItem(cache, key, obj);
+      Py_DECREF(obj);
+    }
+  }
+  Py_DECREF(key);
+  return descriptor;
+}
+
+/* 
+   For backward compatibility only
+*/
+#define SWIG_POINTER_EXCEPTION  0
+#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
+#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)
+
+SWIGRUNTIME int
+SWIG_Python_AddErrMesg(const char* mesg, int infront)
+{
+  if (PyErr_Occurred()) {
+    PyObject *type = 0;
+    PyObject *value = 0;
+    PyObject *traceback = 0;
+    PyErr_Fetch(&type, &value, &traceback);
+    if (value) {
+      PyObject *old_str = PyObject_Str(value);
+      Py_XINCREF(type);
+      PyErr_Clear();
+      if (infront) {
+	PyErr_Format(type, "%s %s", mesg, PyString_AsString(old_str));
+      } else {
+	PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
+      }
+      Py_DECREF(old_str);
+    }
+    return 1;
+  } else {
+    return 0;
+  }
+}
+  
+SWIGRUNTIME int
+SWIG_Python_ArgFail(int argnum)
+{
+  if (PyErr_Occurred()) {
+    /* add information about failing argument */
+    char mesg[256];
+    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
+    return SWIG_Python_AddErrMesg(mesg, 1);
+  } else {
+    return 0;
+  }
+}
+
+SWIGRUNTIMEINLINE const char *
+PySwigObject_GetDesc(PyObject *self)
+{
+  PySwigObject *v = (PySwigObject *)self;
+  swig_type_info *ty = v ? v->ty : 0;
+  return ty ? ty->str : (char*)"";
+}
+
+SWIGRUNTIME void
+SWIG_Python_TypeError(const char *type, PyObject *obj)
+{
+  if (type) {
+#if defined(SWIG_COBJECT_TYPES)
+    if (obj && PySwigObject_Check(obj)) {
+      const char *otype = (const char *) PySwigObject_GetDesc(obj);
+      if (otype) {
+	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'PySwigObject(%s)' is received",
+		     type, otype);
+	return;
+      }
+    } else 
+#endif      
+    {
+      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
+      if (otype) {
+	PyObject *str = PyObject_Str(obj);
+	const char *cstr = str ? PyString_AsString(str) : 0;
+	if (cstr) {
+	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
+		       type, otype, cstr);
+	} else {
+	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
+		       type, otype);
+	}
+	Py_XDECREF(str);
+	return;
+      }
+    }   
+    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
+  } else {
+    PyErr_Format(PyExc_TypeError, "unexpected type is received");
+  }
+}
+
+
+/* Convert a pointer value, signal an exception on a type mismatch */
+SWIGRUNTIME void *
+SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
+  void *result;
+  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
+    PyErr_Clear();
+    if (flags & SWIG_POINTER_EXCEPTION) {
+      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
+      SWIG_Python_ArgFail(argnum);
+    }
+  }
+  return result;
+}
+
+
+#ifdef __cplusplus
+#if 0
+{ /* cc-mode */
+#endif
+}
+#endif
+
+
+
+#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 
+
+#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 
+
+
+
+  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 
+
+
+/* -------- TYPES TABLE (BEGIN) -------- */
+
+#define SWIGTYPE_p_GUID swig_types[0]
+#define SWIGTYPE_p_Handle_Standard_AbortiveTransaction swig_types[1]
+#define SWIGTYPE_p_Handle_Standard_ConstructionError swig_types[2]
+#define SWIGTYPE_p_Handle_Standard_DimensionError swig_types[3]
+#define SWIGTYPE_p_Handle_Standard_DimensionMismatch swig_types[4]
+#define SWIGTYPE_p_Handle_Standard_DivideByZero swig_types[5]
+#define SWIGTYPE_p_Handle_Standard_DomainError swig_types[6]
+#define SWIGTYPE_p_Handle_Standard_Failure swig_types[7]
+#define SWIGTYPE_p_Handle_Standard_ImmutableObject swig_types[8]
+#define SWIGTYPE_p_Handle_Standard_LicenseError swig_types[9]
+#define SWIGTYPE_p_Handle_Standard_LicenseNotFound swig_types[10]
+#define SWIGTYPE_p_Handle_Standard_MultiplyDefined swig_types[11]
+#define SWIGTYPE_p_Handle_Standard_NegativeValue swig_types[12]
+#define SWIGTYPE_p_Handle_Standard_NoMoreObject swig_types[13]
+#define SWIGTYPE_p_Handle_Standard_NoSuchObject swig_types[14]
+#define SWIGTYPE_p_Handle_Standard_NotImplemented swig_types[15]
+#define SWIGTYPE_p_Handle_Standard_NullObject swig_types[16]
+#define SWIGTYPE_p_Handle_Standard_NullValue swig_types[17]
+#define SWIGTYPE_p_Handle_Standard_NumericError swig_types[18]
+#define SWIGTYPE_p_Handle_Standard_OutOfMemory swig_types[19]
+#define SWIGTYPE_p_Handle_Standard_OutOfRange swig_types[20]
+#define SWIGTYPE_p_Handle_Standard_Overflow swig_types[21]
+#define SWIGTYPE_p_Handle_Standard_Persistent swig_types[22]
+#define SWIGTYPE_p_Handle_Standard_ProgramError swig_types[23]
+#define SWIGTYPE_p_Handle_Standard_RangeError swig_types[24]
+#define SWIGTYPE_p_Handle_Standard_TooManyUsers swig_types[25]
+#define SWIGTYPE_p_Handle_Standard_Transient swig_types[26]
+#define SWIGTYPE_p_Handle_Standard_Type swig_types[27]
+#define SWIGTYPE_p_Handle_Standard_TypeMismatch swig_types[28]
+#define SWIGTYPE_p_Handle_Standard_Underflow swig_types[29]
+#define SWIGTYPE_p_Standard swig_types[30]
+#define SWIGTYPE_p_Standard_AbortiveTransaction swig_types[31]
+#define SWIGTYPE_p_Standard_AncestorIterator swig_types[32]
+#define SWIGTYPE_p_Standard_ConstructionError swig_types[33]
+#define SWIGTYPE_p_Standard_DimensionError swig_types[34]
+#define SWIGTYPE_p_Standard_DimensionMismatch swig_types[35]
+#define SWIGTYPE_p_Standard_DivideByZero swig_types[36]
+#define SWIGTYPE_p_Standard_DomainError swig_types[37]
+#define SWIGTYPE_p_Standard_ErrorHandler swig_types[38]
+#define SWIGTYPE_p_Standard_ErrorHandlerCallback swig_types[39]
+#define SWIGTYPE_p_Standard_Failure swig_types[40]
+#define SWIGTYPE_p_Standard_GUID swig_types[41]
+#define SWIGTYPE_p_Standard_ImmutableObject swig_types[42]
+#define SWIGTYPE_p_Standard_LicenseError swig_types[43]
+#define SWIGTYPE_p_Standard_LicenseNotFound swig_types[44]
+#define SWIGTYPE_p_Standard_MMgrOpt swig_types[45]
+#define SWIGTYPE_p_Standard_MMgrRaw swig_types[46]
+#define SWIGTYPE_p_Standard_MMgrRoot swig_types[47]
+#define SWIGTYPE_p_Standard_MultiplyDefined swig_types[48]
+#define SWIGTYPE_p_Standard_Mutex swig_types[49]
+#define SWIGTYPE_p_Standard_NegativeValue swig_types[50]
+#define SWIGTYPE_p_Standard_NoMoreObject swig_types[51]
+#define SWIGTYPE_p_Standard_NoSuchObject swig_types[52]
+#define SWIGTYPE_p_Standard_NotImplemented swig_types[53]
+#define SWIGTYPE_p_Standard_NullObject swig_types[54]
+#define SWIGTYPE_p_Standard_NullValue swig_types[55]
+#define SWIGTYPE_p_Standard_NumericError swig_types[56]
+#define SWIGTYPE_p_Standard_OutOfMemory swig_types[57]
+#define SWIGTYPE_p_Standard_OutOfRange swig_types[58]
+#define SWIGTYPE_p_Standard_Overflow swig_types[59]
+#define SWIGTYPE_p_Standard_Persistent swig_types[60]
+#define SWIGTYPE_p_Standard_ProgramError swig_types[61]
+#define SWIGTYPE_p_Standard_RangeError swig_types[62]
+#define SWIGTYPE_p_Standard_SStream swig_types[63]
+#define SWIGTYPE_p_Standard_Storable swig_types[64]
+#define SWIGTYPE_p_Standard_TooManyUsers swig_types[65]
+#define SWIGTYPE_p_Standard_Transient swig_types[66]
+#define SWIGTYPE_p_Standard_Type swig_types[67]
+#define SWIGTYPE_p_Standard_TypeMismatch swig_types[68]
+#define SWIGTYPE_p_Standard_Underflow swig_types[69]
+#define SWIGTYPE_p_char swig_types[70]
+#define SWIGTYPE_p_double swig_types[71]
+#define SWIGTYPE_p_float swig_types[72]
+#define SWIGTYPE_p_int swig_types[73]
+#define SWIGTYPE_p_jmp_buf swig_types[74]
+#define SWIGTYPE_p_p_void swig_types[75]
+#define SWIGTYPE_p_pthread_t swig_types[76]
+#define SWIGTYPE_p_short swig_types[77]
+#define SWIGTYPE_p_size_t swig_types[78]
+#define SWIGTYPE_p_std__invalid_argument swig_types[79]
+#define SWIGTYPE_p_swig__PySwigIterator swig_types[80]
+#define SWIGTYPE_p_unsigned_char swig_types[81]
+#define SWIGTYPE_p_unsigned_int swig_types[82]
+#define SWIGTYPE_p_void swig_types[83]
+static swig_type_info *swig_types[85];
+static swig_module_info swig_module = {swig_types, 84, 0, 0, 0, 0};
+#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
+#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)
+
+/* -------- TYPES TABLE (END) -------- */
+
+#if (PY_VERSION_HEX <= 0x02000000)
+# if !defined(SWIG_PYTHON_CLASSIC)
+#  error "This python version requires swig to be run with the '-classic' option"
+# endif
+#endif
+#if (PY_VERSION_HEX <= 0x02020000)
+# error "This python version requires swig to be run with the '-nomodern' option"
+#endif
+#if (PY_VERSION_HEX <= 0x02020000)
+# error "This python version requires swig to be run with the '-nomodernargs' option"
+#endif
+
+/*-----------------------------------------------
+              @(target):= _Standard.so
+  ------------------------------------------------*/
+#define SWIG_init    init_Standard
+
+#define SWIG_name    "_Standard"
+
+#define SWIGVERSION 0x010333 
+#define SWIG_VERSION SWIGVERSION
+
+
+#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
+#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 
+
+
+#include <stdexcept>
+
+
+namespace swig {
+  class PyObject_ptr {
+  protected:
+    PyObject *_obj;
+
+  public:
+    PyObject_ptr() :_obj(0)
+    {
+    }
+
+    PyObject_ptr(const PyObject_ptr& item) : _obj(item._obj)
+    {
+      Py_XINCREF(_obj);      
+    }
+    
+    PyObject_ptr(PyObject *obj, bool initial_ref = true) :_obj(obj)
+    {
+      if (initial_ref) Py_XINCREF(_obj);
+    }
+    
+    PyObject_ptr & operator=(const PyObject_ptr& item) 
+    {
+      Py_XINCREF(item._obj);
+      Py_XDECREF(_obj);
+      _obj = item._obj;
+      return *this;      
+    }
+    
+    ~PyObject_ptr() 
+    {
+      Py_XDECREF(_obj);
+    }
+    
+    operator PyObject *() const
+    {
+      return _obj;
+    }
+
+    PyObject *operator->() const
+    {
+      return _obj;
+    }
+  };
+}
+
+
+namespace swig {
+  struct PyObject_var : PyObject_ptr {
+    PyObject_var(PyObject* obj = 0) : PyObject_ptr(obj, false) { }
+    
+    PyObject_var & operator = (PyObject* obj)
+    {
+      Py_XDECREF(_obj);
+      _obj = obj;
+      return *this;      
+    }
+  };
+}
+
+
+#include <stdlib.h>
+
+
+#include <iostream>
+
+
+#include <stdexcept>
+
+
+  
+#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
+#  define SWIG_STD_NOASSIGN_STL
+#  define SWIG_STD_NOINSERT_TEMPLATE_STL
+#  define SWIG_STD_NOITERATOR_TRAITS_STL
+#endif
+
+#if defined(__GNUC__)
+#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
+#     define SWIG_STD_NOMODERN_STL
+#  endif
+#endif
+
+
+
+
+#include <string>
+#include <stdexcept>
+
+  
+namespace swig {
+  struct stop_iteration {
+  };
+
+  struct PySwigIterator {
+  private:
+    PyObject_ptr _seq;
+
+  protected:
+    PySwigIterator(PyObject *seq) : _seq(seq)
+    {
+    }
+      
+  public:
+    virtual ~PySwigIterator() {}
+
+    // Access iterator method, required by Python
+    virtual PyObject *value() const = 0;
+
+    // Forward iterator method, required by Python
+    virtual PySwigIterator *incr(size_t n = 1) = 0;
+    
+    // Backward iterator method, very common in C++, but not required in Python
+    virtual PySwigIterator *decr(size_t n = 1)
+    {
+      throw stop_iteration();
+    }
+
+    // Random access iterator methods, but not required in Python
+    virtual ptrdiff_t distance(const PySwigIterator &x) const
+    {
+      throw std::invalid_argument("operation not supported");
+    }
+
+    virtual bool equal (const PySwigIterator &x) const
+    {
+      throw std::invalid_argument("operation not supported");
+    }
+    
+    // C++ common/needed methods
+    virtual PySwigIterator *copy() const = 0;
+
+    PyObject *next()
+    {
+      PyObject *obj = value();
+      incr();
+      return obj;
+    }
+
+    PyObject *previous()
+    {
+      decr();
+      return value();
+    }
+
+    PySwigIterator *advance(ptrdiff_t n)
+    {
+      return  (n > 0) ?  incr(n) : decr(-n);
+    }
+      
+    bool operator == (const PySwigIterator& x)  const
+    {
+      return equal(x);
+    }
+      
+    bool operator != (const PySwigIterator& x) const
+    {
+      return ! operator==(x);
+    }
+      
+    PySwigIterator& operator += (ptrdiff_t n)
+    {
+      return *advance(n);
+    }
+
+    PySwigIterator& operator -= (ptrdiff_t n)
+    {
+      return *advance(-n);
+    }
+      
+    PySwigIterator* operator + (ptrdiff_t n) const
+    {
+      return copy()->advance(n);
+    }
+
+    PySwigIterator* operator - (ptrdiff_t n) const
+    {
+      return copy()->advance(-n);
+    }
+      
+    ptrdiff_t operator - (const PySwigIterator& x) const
+    {
+      return x.distance(*this);
+    }
+      
+    static swig_type_info* descriptor() {
+      static int init = 0;
+      static swig_type_info* desc = 0;
+      if (!init) {
+	desc = SWIG_TypeQuery("swig::PySwigIterator *");
+	init = 1;
+      }	
+      return desc;
+    }    
+  };
+}
+
+
+SWIGINTERN int
+SWIG_AsVal_double (PyObject *obj, double *val)
+{
+  int res = SWIG_TypeError;
+  if (PyFloat_Check(obj)) {
+    if (val) *val = PyFloat_AsDouble(obj);
+    return SWIG_OK;
+  } else if (PyInt_Check(obj)) {
+    if (val) *val = PyInt_AsLong(obj);
+    return SWIG_OK;
+  } else if (PyLong_Check(obj)) {
+    double v = PyLong_AsDouble(obj);
+    if (!PyErr_Occurred()) {
+      if (val) *val = v;
+      return SWIG_OK;
+    } else {
+      PyErr_Clear();
+    }
+  }
+#ifdef SWIG_PYTHON_CAST_MODE
+  {
+    int dispatch = 0;
+    double d = PyFloat_AsDouble(obj);
+    if (!PyErr_Occurred()) {
+      if (val) *val = d;
+      return SWIG_AddCast(SWIG_OK);
+    } else {
+      PyErr_Clear();
+    }
+    if (!dispatch) {
+      long v = PyLong_AsLong(obj);
+      if (!PyErr_Occurred()) {
+	if (val) *val = v;
+	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
+      } else {
+	PyErr_Clear();
+      }
+    }
+  }
+#endif
+  return res;
+}
+
+
+#include <float.h>
+
+
+#include <math.h>
+
+
+SWIGINTERNINLINE int
+SWIG_CanCastAsInteger(double *d, double min, double max) {
+  double x = *d;
+  if ((min <= x && x <= max)) {
+   double fx = floor(x);
+   double cx = ceil(x);
+   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
+   if ((errno == EDOM) || (errno == ERANGE)) {
+     errno = 0;
+   } else {
+     double summ, reps, diff;
+     if (rd < x) {
+       diff = x - rd;
+     } else if (rd > x) {
+       diff = rd - x;
+     } else {
+       return 1;
+     }
+     summ = rd + x;
+     reps = diff/summ;
+     if (reps < 8*DBL_EPSILON) {
+       *d = rd;
+       return 1;
+     }
+   }
+  }
+  return 0;
+}
+
+
+SWIGINTERN int
+SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
+{
+  if (PyInt_Check(obj)) {
+    long v = PyInt_AsLong(obj);
+    if (v >= 0) {
+      if (val) *val = v;
+      return SWIG_OK;
+    } else {
+      return SWIG_OverflowError;
+    }
+  } else if (PyLong_Check(obj)) {
+    unsigned long v = PyLong_AsUnsignedLong(obj);
+    if (!PyErr_Occurred()) {
+      if (val) *val = v;
+      return SWIG_OK;
+    } else {
+      PyErr_Clear();
+    }
+  }
+#ifdef SWIG_PYTHON_CAST_MODE
+  {
+    int dispatch = 0;
+    unsigned long v = PyLong_AsUnsignedLong(obj);
+    if (!PyErr_Occurred()) {
+      if (val) *val = v;
+      return SWIG_AddCast(SWIG_OK);
+    } else {
+      PyErr_Clear();
+    }
+    if (!dispatch) {
+      double d;
+      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
+      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
+	if (val) *val = (unsigned long)(d);
+	return res;
+      }
+    }
+  }
+#endif
+  return SWIG_TypeError;
+}
+
+
+SWIGINTERNINLINE int
+SWIG_AsVal_size_t (PyObject * obj, size_t *val)
+{
+  unsigned long v;
+  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
+  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
+  return res;
+}
+
+
+  #define SWIG_From_long   PyInt_FromLong 
+
+
+SWIGINTERNINLINE PyObject *
+SWIG_From_ptrdiff_t  (ptrdiff_t value)
+{    
+  return SWIG_From_long  (static_cast< long >(value));
+}
+
+
+SWIGINTERNINLINE PyObject*
+  SWIG_From_bool  (bool value)
+{
+  return PyBool_FromLong(value ? 1 : 0);
+}
+
+
+SWIGINTERN int
+SWIG_AsVal_long (PyObject *obj, long* val)
+{
+  if (PyInt_Check(obj)) {
+    if (val) *val = PyInt_AsLong(obj);
+    return SWIG_OK;
+  } else if (PyLong_Check(obj)) {
+    long v = PyLong_AsLong(obj);
+    if (!PyErr_Occurred()) {
+      if (val) *val = v;
+      return SWIG_OK;
+    } else {
+      PyErr_Clear();
+    }
+  }
+#ifdef SWIG_PYTHON_CAST_MODE
+  {
+    int dispatch = 0;
+    long v = PyInt_AsLong(obj);
+    if (!PyErr_Occurred()) {
+      if (val) *val = v;
+      return SWIG_AddCast(SWIG_OK);
+    } else {
+      PyErr_Clear();
+    }
+    if (!dispatch) {
+      double d;
+      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
+      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
+	if (val) *val = (long)(d);
+	return res;
+      }
+    }
+  }
+#endif
+  return SWIG_TypeError;
+}
+
+
+SWIGINTERNINLINE int
+SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
+{
+  long v;
+  int res = SWIG_AsVal_long (obj, val ? &v : 0);
+  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
+  return res;
+}
+
+
+#include <stdexcept>
+
+
+#include <algorithm>
+
+
+#include <list>
+
+
+#include <string>
+
+#include <Standard_Failure.hxx>
+#include <Standard_Failure.hxx>
+
+
+// Headers necessary to define wrapped classes.
+
+#include<Handle_Standard_AbortiveTransaction.hxx>
+#include<Handle_Standard_ConstructionError.hxx>
+#include<Handle_Standard_DimensionError.hxx>
+#include<Handle_Standard_DimensionMismatch.hxx>
+#include<Handle_Standard_DivideByZero.hxx>
+#include<Handle_Standard_DomainError.hxx>
+#include<Handle_Standard_Failure.hxx>
+#include<Handle_Standard_ImmutableObject.hxx>
+#include<Handle_Standard_LicenseError.hxx>
+#include<Handle_Standard_LicenseNotFound.hxx>
+#include<Handle_Standard_MultiplyDefined.hxx>
+#include<Handle_Standard_NegativeValue.hxx>
+#include<Handle_Standard_NoMoreObject.hxx>
+#include<Handle_Standard_NoSuchObject.hxx>
+#include<Handle_Standard_NotImplemented.hxx>
+#include<Handle_Standard_NullObject.hxx>
+#include<Handle_Standard_NullValue.hxx>
+#include<Handle_Standard_NumericError.hxx>
+#include<Handle_Standard_OutOfMemory.hxx>
+#include<Handle_Standard_OutOfRange.hxx>
+#include<Handle_Standard_Overflow.hxx>
+#include<Handle_Standard_Persistent.hxx>
+#include<Handle_Standard_ProgramError.hxx>
+#include<Handle_Standard_RangeError.hxx>
+#include<Handle_Standard_TooManyUsers.hxx>
+#include<Handle_Standard_Transient.hxx>
+#include<Handle_Standard_Type.hxx>
+#include<Handle_Standard_TypeMismatch.hxx>
+#include<Handle_Standard_Underflow.hxx>
+#include<Standard.hxx>
+#include<Standard_AbortiveTransaction.hxx>
+#include<Standard_Address.hxx>
+#include<Standard_AncestorIterator.hxx>
+#include<Standard_Boolean.hxx>
+#include<Standard_Byte.hxx>
+#include<Standard_CString.hxx>
+#include<Standard_Character.hxx>
+#include<Standard_ConstructionError.hxx>
+#include<Standard_DefineHandle.hxx>
+#include<Standard_DimensionError.hxx>
+#include<Standard_DimensionMismatch.hxx>
+#include<Standard_DivideByZero.hxx>
+#include<Standard_DomainError.hxx>
+#include<Standard_ErrorHandler.hxx>
+#include<Standard_ErrorHandlerCallback.hxx>
+#include<Standard_ExtCharacter.hxx>
+#include<Standard_ExtString.hxx>
+#include<Standard_Failure.hxx>
+#include<Standard_GUID.hxx>
+#include<Standard_HandlerStatus.hxx>
+#include<Standard_IStream.hxx>
+#include<Standard_ImmutableObject.hxx>
+#include<Standard_Integer.hxx>
+#include<Standard_InternalType.hxx>
+#include<Standard_JmpBuf.hxx>
+#include<Standard_KindOfType.hxx>
+#include<Standard_LicenseError.hxx>
+#include<Standard_LicenseNotFound.hxx>
+#include<Standard_MMgrOpt.hxx>
+#include<Standard_MMgrRaw.hxx>
+#include<Standard_MMgrRoot.hxx>
+#include<Standard_Macro.hxx>
+#include<Standard_MultiplyDefined.hxx>
+#include<Standard_Mutex.hxx>
+#include<Standard_NegativeValue.hxx>
+#include<Standard_NoMoreObject.hxx>
+#include<Standard_NoSuchObject.hxx>
+#include<Standard_NotImplemented.hxx>
+#include<Standard_NullObject.hxx>
+#include<Standard_NullValue.hxx>
+#include<Standard_NumericError.hxx>
+#include<Standard_OId.hxx>
+#include<Standard_OStream.hxx>
+#include<Standard_OutOfMemory.hxx>
+#include<Standard_OutOfRange.hxx>
+#include<Standard_Overflow.hxx>
+#include<Standard_PCharacter.hxx>
+#include<Standard_PErrorHandler.hxx>
+#include<Standard_PExtCharacter.hxx>
+#include<Standard_Persistent.hxx>
+#include<Standard_Persistent_proto.hxx>
+#include<Standard_PrimitiveTypes.hxx>
+#include<Standard_ProgramError.hxx>
+#include<Standard_RangeError.hxx>
+#include<Standard_Real.hxx>
+#include<Standard_SStream.hxx>
+#include<Standard_ShortReal.hxx>
+#include<Standard_Size.hxx>
+#include<Standard_Static.hxx>
+#include<Standard_Storable.hxx>
+#include<Standard_Stream.hxx>
+#include<Standard_String.hxx>
+#include<Standard_ThreadId.hxx>
+#include<Standard_TooManyUsers.hxx>
+#include<Standard_Transient.hxx>
+#include<Standard_Type.hxx>
+#include<Standard_TypeDef.hxx>
+#include<Standard_TypeMismatch.hxx>
+#include<Standard_UUID.hxx>
+#include<Standard_Underflow.hxx>
+#include<Standard_Version.hxx>
+#include<Standard_WayOfLife.hxx>
+#include<Standard_ctype.hxx>
+#include<Standard_math.hxx>
+
+// Additional headers necessary for compilation.
+
+
+// Needed headers necessary for compilation.
+
+#include<Standard.hxx>
+#include<Storage_stCONSTclCOM.hxx>
+
+
+SWIGINTERNINLINE PyObject *
+SWIG_From_int  (int value)
+{    
+  return SWIG_From_long  (value);
+}
+
+
+SWIGINTERNINLINE PyObject* 
+SWIG_From_unsigned_SS_long  (unsigned long value)
+{
+  return (value > LONG_MAX) ?
+    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value)); 
+}
+
+
+SWIGINTERNINLINE PyObject *
+SWIG_From_unsigned_SS_int  (unsigned int value)
+{    
+  return SWIG_From_unsigned_SS_long  (value);
+}
+
+SWIGINTERN std::string Handle_Standard_Transient_DumpToString(Handle_Standard_Transient *self){
+			std::stringstream s;
+			self->Dump(s);
+			return s.str();}
+
+SWIGINTERN swig_type_info*
+SWIG_pchar_descriptor(void)
+{
+  static int init = 0;
+  static swig_type_info* info = 0;
+  if (!init) {
+    info = SWIG_TypeQuery("_p_char");
+    init = 1;
+  }
+  return info;
+}
+
+
+SWIGINTERNINLINE PyObject *
+SWIG_FromCharPtrAndSize(const char* carray, size_t size)
+{
+  if (carray) {
+    if (size > INT_MAX) {
+      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
+      return pchar_descriptor ? 
+	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
+    } else {
+      return PyString_FromStringAndSize(carray, static_cast< int >(size));
+    }
+  } else {
+    return SWIG_Py_Void();
+  }
+}
+
+
+SWIGINTERNINLINE PyObject *
+SWIG_From_std_string  (const std::string& s)
+{
+  if (s.size()) {
+    return SWIG_FromCharPtrAndSize(s.data(), s.size());
+  } else {
+    return SWIG_FromCharPtrAndSize(s.c_str(), 0);
+  }
+}
+
+SWIGINTERN Standard_Transient *Handle_Standard_Transient_GetObject(Handle_Standard_Transient *self){
+	return (Standard_Transient*)self->Access();
+	}
+SWIGINTERN void delete_Handle_Standard_Transient(Handle_Standard_Transient *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Handle_Standard_Transient\n");}
+	}
+SWIGINTERN Standard_Failure *Handle_Standard_Failure_GetObject(Handle_Standard_Failure *self){
+	return (Standard_Failure*)self->Access();
+	}
+SWIGINTERN void delete_Handle_Standard_Failure(Handle_Standard_Failure *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Handle_Standard_Failure\n");}
+	}
+SWIGINTERN Standard_DomainError *Handle_Standard_DomainError_GetObject(Handle_Standard_DomainError *self){
+	return (Standard_DomainError*)self->Access();
+	}
+SWIGINTERN void delete_Handle_Standard_DomainError(Handle_Standard_DomainError *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Handle_Standard_DomainError\n");}
+	}
+SWIGINTERN Standard_RangeError *Handle_Standard_RangeError_GetObject(Handle_Standard_RangeError *self){
+	return (Standard_RangeError*)self->Access();
+	}
+SWIGINTERN void delete_Handle_Standard_RangeError(Handle_Standard_RangeError *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Handle_Standard_RangeError\n");}
+	}
+SWIGINTERN Standard_NullValue *Handle_Standard_NullValue_GetObject(Handle_Standard_NullValue *self){
+	return (Standard_NullValue*)self->Access();
+	}
+SWIGINTERN void delete_Handle_Standard_NullValue(Handle_Standard_NullValue *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Handle_Standard_NullValue\n");}
+	}
+SWIGINTERN Standard_TypeMismatch *Handle_Standard_TypeMismatch_GetObject(Handle_Standard_TypeMismatch *self){
+	return (Standard_TypeMismatch*)self->Access();
+	}
+SWIGINTERN void delete_Handle_Standard_TypeMismatch(Handle_Standard_TypeMismatch *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Handle_Standard_TypeMismatch\n");}
+	}
+SWIGINTERN std::string Handle_Standard_Persistent_DumpToString(Handle_Standard_Persistent *self){
+			std::stringstream s;
+			self->Dump(s);
+			return s.str();}
+SWIGINTERN Standard_Persistent *Handle_Standard_Persistent_GetObject(Handle_Standard_Persistent *self){
+	return (Standard_Persistent*)self->Access();
+	}
+SWIGINTERN void delete_Handle_Standard_Persistent(Handle_Standard_Persistent *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Handle_Standard_Persistent\n");}
+	}
+SWIGINTERN Standard_OutOfRange *Handle_Standard_OutOfRange_GetObject(Handle_Standard_OutOfRange *self){
+	return (Standard_OutOfRange*)self->Access();
+	}
+SWIGINTERN void delete_Handle_Standard_OutOfRange(Handle_Standard_OutOfRange *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Handle_Standard_OutOfRange\n");}
+	}
+SWIGINTERN Standard_NumericError *Handle_Standard_NumericError_GetObject(Handle_Standard_NumericError *self){
+	return (Standard_NumericError*)self->Access();
+	}
+SWIGINTERN void delete_Handle_Standard_NumericError(Handle_Standard_NumericError *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Handle_Standard_NumericError\n");}
+	}
+SWIGINTERN Standard_DivideByZero *Handle_Standard_DivideByZero_GetObject(Handle_Standard_DivideByZero *self){
+	return (Standard_DivideByZero*)self->Access();
+	}
+SWIGINTERN void delete_Handle_Standard_DivideByZero(Handle_Standard_DivideByZero *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Handle_Standard_DivideByZero\n");}
+	}
+SWIGINTERN Standard_NoMoreObject *Handle_Standard_NoMoreObject_GetObject(Handle_Standard_NoMoreObject *self){
+	return (Standard_NoMoreObject*)self->Access();
+	}
+SWIGINTERN void delete_Handle_Standard_NoMoreObject(Handle_Standard_NoMoreObject *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Handle_Standard_NoMoreObject\n");}
+	}
+SWIGINTERN Standard_ProgramError *Handle_Standard_ProgramError_GetObject(Handle_Standard_ProgramError *self){
+	return (Standard_ProgramError*)self->Access();
+	}
+SWIGINTERN void delete_Handle_Standard_ProgramError(Handle_Standard_ProgramError *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Handle_Standard_ProgramError\n");}
+	}
+SWIGINTERN Standard_NotImplemented *Handle_Standard_NotImplemented_GetObject(Handle_Standard_NotImplemented *self){
+	return (Standard_NotImplemented*)self->Access();
+	}
+SWIGINTERN void delete_Handle_Standard_NotImplemented(Handle_Standard_NotImplemented *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Handle_Standard_NotImplemented\n");}
+	}
+SWIGINTERN Standard_NullObject *Handle_Standard_NullObject_GetObject(Handle_Standard_NullObject *self){
+	return (Standard_NullObject*)self->Access();
+	}
+SWIGINTERN void delete_Handle_Standard_NullObject(Handle_Standard_NullObject *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Handle_Standard_NullObject\n");}
+	}
+SWIGINTERN Standard_AbortiveTransaction *Handle_Standard_AbortiveTransaction_GetObject(Handle_Standard_AbortiveTransaction *self){
+	return (Standard_AbortiveTransaction*)self->Access();
+	}
+SWIGINTERN void delete_Handle_Standard_AbortiveTransaction(Handle_Standard_AbortiveTransaction *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Handle_Standard_AbortiveTransaction\n");}
+	}
+SWIGINTERN Standard_DimensionError *Handle_Standard_DimensionError_GetObject(Handle_Standard_DimensionError *self){
+	return (Standard_DimensionError*)self->Access();
+	}
+SWIGINTERN void delete_Handle_Standard_DimensionError(Handle_Standard_DimensionError *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Handle_Standard_DimensionError\n");}
+	}
+SWIGINTERN Standard_LicenseError *Handle_Standard_LicenseError_GetObject(Handle_Standard_LicenseError *self){
+	return (Standard_LicenseError*)self->Access();
+	}
+SWIGINTERN void delete_Handle_Standard_LicenseError(Handle_Standard_LicenseError *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Handle_Standard_LicenseError\n");}
+	}
+SWIGINTERN Standard_NoSuchObject *Handle_Standard_NoSuchObject_GetObject(Handle_Standard_NoSuchObject *self){
+	return (Standard_NoSuchObject*)self->Access();
+	}
+SWIGINTERN void delete_Handle_Standard_NoSuchObject(Handle_Standard_NoSuchObject *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Handle_Standard_NoSuchObject\n");}
+	}
+SWIGINTERN Standard_DimensionMismatch *Handle_Standard_DimensionMismatch_GetObject(Handle_Standard_DimensionMismatch *self){
+	return (Standard_DimensionMismatch*)self->Access();
+	}
+SWIGINTERN void delete_Handle_Standard_DimensionMismatch(Handle_Standard_DimensionMismatch *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Handle_Standard_DimensionMismatch\n");}
+	}
+SWIGINTERN Standard_OutOfMemory *Handle_Standard_OutOfMemory_GetObject(Handle_Standard_OutOfMemory *self){
+	return (Standard_OutOfMemory*)self->Access();
+	}
+SWIGINTERN void delete_Handle_Standard_OutOfMemory(Handle_Standard_OutOfMemory *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Handle_Standard_OutOfMemory\n");}
+	}
+SWIGINTERN Standard_Type *Handle_Standard_Type_GetObject(Handle_Standard_Type *self){
+	return (Standard_Type*)self->Access();
+	}
+SWIGINTERN void delete_Handle_Standard_Type(Handle_Standard_Type *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Handle_Standard_Type\n");}
+	}
+SWIGINTERN Standard_Overflow *Handle_Standard_Overflow_GetObject(Handle_Standard_Overflow *self){
+	return (Standard_Overflow*)self->Access();
+	}
+SWIGINTERN void delete_Handle_Standard_Overflow(Handle_Standard_Overflow *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Handle_Standard_Overflow\n");}
+	}
+SWIGINTERN Standard_NegativeValue *Handle_Standard_NegativeValue_GetObject(Handle_Standard_NegativeValue *self){
+	return (Standard_NegativeValue*)self->Access();
+	}
+SWIGINTERN void delete_Handle_Standard_NegativeValue(Handle_Standard_NegativeValue *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Handle_Standard_NegativeValue\n");}
+	}
+SWIGINTERN Standard_ImmutableObject *Handle_Standard_ImmutableObject_GetObject(Handle_Standard_ImmutableObject *self){
+	return (Standard_ImmutableObject*)self->Access();
+	}
+SWIGINTERN void delete_Handle_Standard_ImmutableObject(Handle_Standard_ImmutableObject *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Handle_Standard_ImmutableObject\n");}
+	}
+SWIGINTERN Standard_Underflow *Handle_Standard_Underflow_GetObject(Handle_Standard_Underflow *self){
+	return (Standard_Underflow*)self->Access();
+	}
+SWIGINTERN void delete_Handle_Standard_Underflow(Handle_Standard_Underflow *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Handle_Standard_Underflow\n");}
+	}
+SWIGINTERN Standard_ConstructionError *Handle_Standard_ConstructionError_GetObject(Handle_Standard_ConstructionError *self){
+	return (Standard_ConstructionError*)self->Access();
+	}
+SWIGINTERN void delete_Handle_Standard_ConstructionError(Handle_Standard_ConstructionError *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Handle_Standard_ConstructionError\n");}
+	}
+SWIGINTERN Standard_LicenseNotFound *Handle_Standard_LicenseNotFound_GetObject(Handle_Standard_LicenseNotFound *self){
+	return (Standard_LicenseNotFound*)self->Access();
+	}
+SWIGINTERN void delete_Handle_Standard_LicenseNotFound(Handle_Standard_LicenseNotFound *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Handle_Standard_LicenseNotFound\n");}
+	}
+SWIGINTERN Standard_MultiplyDefined *Handle_Standard_MultiplyDefined_GetObject(Handle_Standard_MultiplyDefined *self){
+	return (Standard_MultiplyDefined*)self->Access();
+	}
+SWIGINTERN void delete_Handle_Standard_MultiplyDefined(Handle_Standard_MultiplyDefined *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Handle_Standard_MultiplyDefined\n");}
+	}
+SWIGINTERN Standard_TooManyUsers *Handle_Standard_TooManyUsers_GetObject(Handle_Standard_TooManyUsers *self){
+	return (Standard_TooManyUsers*)self->Access();
+	}
+SWIGINTERN void delete_Handle_Standard_TooManyUsers(Handle_Standard_TooManyUsers *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Handle_Standard_TooManyUsers\n");}
+	}
+
+#include <limits.h>
+#if !defined(SWIG_NO_LLONG_MAX)
+# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
+#   define LLONG_MAX __LONG_LONG_MAX__
+#   define LLONG_MIN (-LLONG_MAX - 1LL)
+#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
+# endif
+#endif
+
+
+SWIGINTERN int
+SWIG_AsVal_int (PyObject * obj, int *val)
+{
+  long v;
+  int res = SWIG_AsVal_long (obj, &v);
+  if (SWIG_IsOK(res)) {
+    if ((v < INT_MIN || v > INT_MAX)) {
+      return SWIG_OverflowError;
+    } else {
+      if (val) *val = static_cast< int >(v);
+    }
+  }  
+  return res;
+}
+
+SWIGINTERN std::string Standard_Transient_ShallowDumpToString(Standard_Transient *self){
+			std::stringstream s;
+			self->ShallowDump(s);
+			return s.str();}
+
+SWIGINTERN int
+SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
+{
+  if (PyString_Check(obj)) {
+    char *cstr; Py_ssize_t len;
+    PyString_AsStringAndSize(obj, &cstr, &len);
+    if (cptr)  {
+      if (alloc) {
+	/* 
+	   In python the user should not be able to modify the inner
+	   string representation. To warranty that, if you define
+	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
+	   buffer is always returned.
+
+	   The default behavior is just to return the pointer value,
+	   so, be careful.
+	*/ 
+#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
+	if (*alloc != SWIG_OLDOBJ) 
+#else
+	if (*alloc == SWIG_NEWOBJ) 
+#endif
+	  {
+	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
+	    *alloc = SWIG_NEWOBJ;
+	  }
+	else {
+	  *cptr = cstr;
+	  *alloc = SWIG_OLDOBJ;
+	}
+      } else {
+	*cptr = PyString_AsString(obj);
+      }
+    }
+    if (psize) *psize = len + 1;
+    return SWIG_OK;
+  } else {
+    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
+    if (pchar_descriptor) {
+      void* vptr = 0;
+      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
+	if (cptr) *cptr = (char *) vptr;
+	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
+	if (alloc) *alloc = SWIG_OLDOBJ;
+	return SWIG_OK;
+      }
+    }
+  }
+  return SWIG_TypeError;
+}
+
+
+
+
+SWIGINTERN Handle_Standard_Transient Standard_Transient_GetHandle(Standard_Transient *self){
+	return *(Handle_Standard_Transient*) &self;
+	}
+SWIGINTERN Standard_Integer Standard_Transient___hash__(Standard_Transient *self){
+	return self->HashCode(__PYTHONOCC_MAXINT__);
+	}
+SWIGINTERN void delete_Standard_Transient(Standard_Transient *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_Transient\n");}
+	}
+SWIGINTERN std::string Standard_Failure_PrintToString(Standard_Failure *self){
+			std::stringstream s;
+			self->Print(s);
+			return s.str();}
+
+SWIGINTERNINLINE PyObject * 
+SWIG_FromCharPtr(const char *cptr)
+{ 
+  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
+}
+
+SWIGINTERN Handle_Standard_Failure Standard_Failure_GetHandle(Standard_Failure *self){
+	return *(Handle_Standard_Failure*) &self;
+	}
+SWIGINTERN Standard_Integer Standard_Failure___hash__(Standard_Failure *self){
+	return self->HashCode(__PYTHONOCC_MAXINT__);
+	}
+SWIGINTERN void delete_Standard_Failure(Standard_Failure *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_Failure\n");}
+	}
+SWIGINTERN Handle_Standard_LicenseError Standard_LicenseError_GetHandle(Standard_LicenseError *self){
+	return *(Handle_Standard_LicenseError*) &self;
+	}
+SWIGINTERN Standard_Integer Standard_LicenseError___hash__(Standard_LicenseError *self){
+	return self->HashCode(__PYTHONOCC_MAXINT__);
+	}
+SWIGINTERN void delete_Standard_LicenseError(Standard_LicenseError *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_LicenseError\n");}
+	}
+SWIGINTERN Handle_Standard_DomainError Standard_DomainError_GetHandle(Standard_DomainError *self){
+	return *(Handle_Standard_DomainError*) &self;
+	}
+SWIGINTERN Standard_Integer Standard_DomainError___hash__(Standard_DomainError *self){
+	return self->HashCode(__PYTHONOCC_MAXINT__);
+	}
+SWIGINTERN void delete_Standard_DomainError(Standard_DomainError *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_DomainError\n");}
+	}
+SWIGINTERN Handle_Standard_NoSuchObject Standard_NoSuchObject_GetHandle(Standard_NoSuchObject *self){
+	return *(Handle_Standard_NoSuchObject*) &self;
+	}
+SWIGINTERN Standard_Integer Standard_NoSuchObject___hash__(Standard_NoSuchObject *self){
+	return self->HashCode(__PYTHONOCC_MAXINT__);
+	}
+SWIGINTERN void delete_Standard_NoSuchObject(Standard_NoSuchObject *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_NoSuchObject\n");}
+	}
+SWIGINTERN Handle_Standard_RangeError Standard_RangeError_GetHandle(Standard_RangeError *self){
+	return *(Handle_Standard_RangeError*) &self;
+	}
+SWIGINTERN Standard_Integer Standard_RangeError___hash__(Standard_RangeError *self){
+	return self->HashCode(__PYTHONOCC_MAXINT__);
+	}
+SWIGINTERN void delete_Standard_RangeError(Standard_RangeError *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_RangeError\n");}
+	}
+SWIGINTERN Handle_Standard_NullValue Standard_NullValue_GetHandle(Standard_NullValue *self){
+	return *(Handle_Standard_NullValue*) &self;
+	}
+SWIGINTERN Standard_Integer Standard_NullValue___hash__(Standard_NullValue *self){
+	return self->HashCode(__PYTHONOCC_MAXINT__);
+	}
+SWIGINTERN void delete_Standard_NullValue(Standard_NullValue *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_NullValue\n");}
+	}
+SWIGINTERN Handle_Standard_ConstructionError Standard_ConstructionError_GetHandle(Standard_ConstructionError *self){
+	return *(Handle_Standard_ConstructionError*) &self;
+	}
+SWIGINTERN Standard_Integer Standard_ConstructionError___hash__(Standard_ConstructionError *self){
+	return self->HashCode(__PYTHONOCC_MAXINT__);
+	}
+SWIGINTERN void delete_Standard_ConstructionError(Standard_ConstructionError *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_ConstructionError\n");}
+	}
+SWIGINTERN Handle_Standard_NumericError Standard_NumericError_GetHandle(Standard_NumericError *self){
+	return *(Handle_Standard_NumericError*) &self;
+	}
+SWIGINTERN Standard_Integer Standard_NumericError___hash__(Standard_NumericError *self){
+	return self->HashCode(__PYTHONOCC_MAXINT__);
+	}
+SWIGINTERN void delete_Standard_NumericError(Standard_NumericError *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_NumericError\n");}
+	}
+
+SWIGINTERN int
+SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
+{
+  unsigned long v;
+  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
+  if (SWIG_IsOK(res)) {
+    if ((v > UINT_MAX)) {
+      return SWIG_OverflowError;
+    } else {
+      if (val) *val = static_cast< unsigned int >(v);
+    }
+  }  
+  return res;
+}
+
+SWIGINTERN void delete_Standard_MMgrRoot(Standard_MMgrRoot *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_MMgrRoot\n");}
+	}
+SWIGINTERN void delete_Standard_MMgrRaw(Standard_MMgrRaw *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_MMgrRaw\n");}
+	}
+SWIGINTERN Handle_Standard_NoMoreObject Standard_NoMoreObject_GetHandle(Standard_NoMoreObject *self){
+	return *(Handle_Standard_NoMoreObject*) &self;
+	}
+SWIGINTERN Standard_Integer Standard_NoMoreObject___hash__(Standard_NoMoreObject *self){
+	return self->HashCode(__PYTHONOCC_MAXINT__);
+	}
+SWIGINTERN void delete_Standard_NoMoreObject(Standard_NoMoreObject *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_NoMoreObject\n");}
+	}
+SWIGINTERN Handle_Standard_ProgramError Standard_ProgramError_GetHandle(Standard_ProgramError *self){
+	return *(Handle_Standard_ProgramError*) &self;
+	}
+SWIGINTERN Standard_Integer Standard_ProgramError___hash__(Standard_ProgramError *self){
+	return self->HashCode(__PYTHONOCC_MAXINT__);
+	}
+SWIGINTERN void delete_Standard_ProgramError(Standard_ProgramError *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_ProgramError\n");}
+	}
+SWIGINTERN Handle_Standard_NotImplemented Standard_NotImplemented_GetHandle(Standard_NotImplemented *self){
+	return *(Handle_Standard_NotImplemented*) &self;
+	}
+SWIGINTERN Standard_Integer Standard_NotImplemented___hash__(Standard_NotImplemented *self){
+	return self->HashCode(__PYTHONOCC_MAXINT__);
+	}
+SWIGINTERN void delete_Standard_NotImplemented(Standard_NotImplemented *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_NotImplemented\n");}
+	}
+SWIGINTERN Handle_Standard_DimensionError Standard_DimensionError_GetHandle(Standard_DimensionError *self){
+	return *(Handle_Standard_DimensionError*) &self;
+	}
+SWIGINTERN Standard_Integer Standard_DimensionError___hash__(Standard_DimensionError *self){
+	return self->HashCode(__PYTHONOCC_MAXINT__);
+	}
+SWIGINTERN void delete_Standard_DimensionError(Standard_DimensionError *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_DimensionError\n");}
+	}
+SWIGINTERN void delete_Standard_MMgrOpt(Standard_MMgrOpt *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_MMgrOpt\n");}
+	}
+SWIGINTERN Handle_Standard_TypeMismatch Standard_TypeMismatch_GetHandle(Standard_TypeMismatch *self){
+	return *(Handle_Standard_TypeMismatch*) &self;
+	}
+SWIGINTERN Standard_Integer Standard_TypeMismatch___hash__(Standard_TypeMismatch *self){
+	return self->HashCode(__PYTHONOCC_MAXINT__);
+	}
+SWIGINTERN void delete_Standard_TypeMismatch(Standard_TypeMismatch *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_TypeMismatch\n");}
+	}
+SWIGINTERN std::string Standard_Storable_ShallowDumpToString(Standard_Storable *self){
+			std::stringstream s;
+			self->ShallowDump(s);
+			return s.str();}
+SWIGINTERN Standard_Integer Standard_Storable___hash__(Standard_Storable *self){
+	return self->HashCode(__PYTHONOCC_MAXINT__);
+	}
+SWIGINTERN void delete_Standard_Storable(Standard_Storable *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_Storable\n");}
+	}
+SWIGINTERN Handle_Standard_DimensionMismatch Standard_DimensionMismatch_GetHandle(Standard_DimensionMismatch *self){
+	return *(Handle_Standard_DimensionMismatch*) &self;
+	}
+SWIGINTERN Standard_Integer Standard_DimensionMismatch___hash__(Standard_DimensionMismatch *self){
+	return self->HashCode(__PYTHONOCC_MAXINT__);
+	}
+SWIGINTERN void delete_Standard_DimensionMismatch(Standard_DimensionMismatch *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_DimensionMismatch\n");}
+	}
+SWIGINTERN std::string Standard_Type_ShallowDumpToString(Standard_Type *self){
+			std::stringstream s;
+			self->ShallowDump(s);
+			return s.str();}
+SWIGINTERN std::string Standard_Type_PrintToString(Standard_Type *self){
+			std::stringstream s;
+			self->Print(s);
+			return s.str();}
+SWIGINTERN Handle_Standard_Type Standard_Type_GetHandle(Standard_Type *self){
+	return *(Handle_Standard_Type*) &self;
+	}
+SWIGINTERN Standard_Integer Standard_Type___hash__(Standard_Type *self){
+	return self->HashCode(__PYTHONOCC_MAXINT__);
+	}
+SWIGINTERN void delete_Standard_Type(Standard_Type *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_Type\n");}
+	}
+SWIGINTERN void delete_Standard_ErrorHandlerCallback(Standard_ErrorHandlerCallback *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_ErrorHandlerCallback\n");}
+	}
+SWIGINTERN Handle_Standard_NegativeValue Standard_NegativeValue_GetHandle(Standard_NegativeValue *self){
+	return *(Handle_Standard_NegativeValue*) &self;
+	}
+SWIGINTERN Standard_Integer Standard_NegativeValue___hash__(Standard_NegativeValue *self){
+	return self->HashCode(__PYTHONOCC_MAXINT__);
+	}
+SWIGINTERN void delete_Standard_NegativeValue(Standard_NegativeValue *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_NegativeValue\n");}
+	}
+SWIGINTERN Handle_Standard_DivideByZero Standard_DivideByZero_GetHandle(Standard_DivideByZero *self){
+	return *(Handle_Standard_DivideByZero*) &self;
+	}
+SWIGINTERN Standard_Integer Standard_DivideByZero___hash__(Standard_DivideByZero *self){
+	return self->HashCode(__PYTHONOCC_MAXINT__);
+	}
+SWIGINTERN void delete_Standard_DivideByZero(Standard_DivideByZero *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_DivideByZero\n");}
+	}
+SWIGINTERN Handle_Standard_ImmutableObject Standard_ImmutableObject_GetHandle(Standard_ImmutableObject *self){
+	return *(Handle_Standard_ImmutableObject*) &self;
+	}
+SWIGINTERN Standard_Integer Standard_ImmutableObject___hash__(Standard_ImmutableObject *self){
+	return self->HashCode(__PYTHONOCC_MAXINT__);
+	}
+SWIGINTERN void delete_Standard_ImmutableObject(Standard_ImmutableObject *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_ImmutableObject\n");}
+	}
+SWIGINTERN Handle_Standard_AbortiveTransaction Standard_AbortiveTransaction_GetHandle(Standard_AbortiveTransaction *self){
+	return *(Handle_Standard_AbortiveTransaction*) &self;
+	}
+SWIGINTERN Standard_Integer Standard_AbortiveTransaction___hash__(Standard_AbortiveTransaction *self){
+	return self->HashCode(__PYTHONOCC_MAXINT__);
+	}
+SWIGINTERN void delete_Standard_AbortiveTransaction(Standard_AbortiveTransaction *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_AbortiveTransaction\n");}
+	}
+SWIGINTERN void delete_Standard_AncestorIterator(Standard_AncestorIterator *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_AncestorIterator\n");}
+	}
+SWIGINTERN Handle_Standard_OutOfMemory Standard_OutOfMemory_GetHandle(Standard_OutOfMemory *self){
+	return *(Handle_Standard_OutOfMemory*) &self;
+	}
+SWIGINTERN Standard_Integer Standard_OutOfMemory___hash__(Standard_OutOfMemory *self){
+	return self->HashCode(__PYTHONOCC_MAXINT__);
+	}
+SWIGINTERN void delete_Standard_OutOfMemory(Standard_OutOfMemory *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_OutOfMemory\n");}
+	}
+SWIGINTERN Handle_Standard_MultiplyDefined Standard_MultiplyDefined_GetHandle(Standard_MultiplyDefined *self){
+	return *(Handle_Standard_MultiplyDefined*) &self;
+	}
+SWIGINTERN Standard_Integer Standard_MultiplyDefined___hash__(Standard_MultiplyDefined *self){
+	return self->HashCode(__PYTHONOCC_MAXINT__);
+	}
+SWIGINTERN void delete_Standard_MultiplyDefined(Standard_MultiplyDefined *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_MultiplyDefined\n");}
+	}
+SWIGINTERN Handle_Standard_LicenseNotFound Standard_LicenseNotFound_GetHandle(Standard_LicenseNotFound *self){
+	return *(Handle_Standard_LicenseNotFound*) &self;
+	}
+SWIGINTERN Standard_Integer Standard_LicenseNotFound___hash__(Standard_LicenseNotFound *self){
+	return self->HashCode(__PYTHONOCC_MAXINT__);
+	}
+SWIGINTERN void delete_Standard_LicenseNotFound(Standard_LicenseNotFound *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_LicenseNotFound\n");}
+	}
+SWIGINTERN void delete_Standard(Standard *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard\n");}
+	}
+SWIGINTERN Handle_Standard_Underflow Standard_Underflow_GetHandle(Standard_Underflow *self){
+	return *(Handle_Standard_Underflow*) &self;
+	}
+SWIGINTERN Standard_Integer Standard_Underflow___hash__(Standard_Underflow *self){
+	return self->HashCode(__PYTHONOCC_MAXINT__);
+	}
+SWIGINTERN void delete_Standard_Underflow(Standard_Underflow *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_Underflow\n");}
+	}
+SWIGINTERN Handle_Standard_Overflow Standard_Overflow_GetHandle(Standard_Overflow *self){
+	return *(Handle_Standard_Overflow*) &self;
+	}
+SWIGINTERN Standard_Integer Standard_Overflow___hash__(Standard_Overflow *self){
+	return self->HashCode(__PYTHONOCC_MAXINT__);
+	}
+SWIGINTERN void delete_Standard_Overflow(Standard_Overflow *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_Overflow\n");}
+	}
+SWIGINTERN Handle_Standard_TooManyUsers Standard_TooManyUsers_GetHandle(Standard_TooManyUsers *self){
+	return *(Handle_Standard_TooManyUsers*) &self;
+	}
+SWIGINTERN Standard_Integer Standard_TooManyUsers___hash__(Standard_TooManyUsers *self){
+	return self->HashCode(__PYTHONOCC_MAXINT__);
+	}
+SWIGINTERN void delete_Standard_TooManyUsers(Standard_TooManyUsers *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_TooManyUsers\n");}
+	}
+SWIGINTERN Handle_Standard_NullObject Standard_NullObject_GetHandle(Standard_NullObject *self){
+	return *(Handle_Standard_NullObject*) &self;
+	}
+SWIGINTERN Standard_Integer Standard_NullObject___hash__(Standard_NullObject *self){
+	return self->HashCode(__PYTHONOCC_MAXINT__);
+	}
+SWIGINTERN void delete_Standard_NullObject(Standard_NullObject *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_NullObject\n");}
+	}
+
+SWIGINTERN int
+SWIG_AsVal_short (PyObject * obj, short *val)
+{
+  long v;
+  int res = SWIG_AsVal_long (obj, &v);
+  if (SWIG_IsOK(res)) {
+    if ((v < SHRT_MIN || v > SHRT_MAX)) {
+      return SWIG_OverflowError;
+    } else {
+      if (val) *val = static_cast< short >(v);
+    }
+  }  
+  return res;
+}
+
+
+SWIGINTERN int
+SWIG_AsVal_unsigned_SS_char (PyObject * obj, unsigned char *val)
+{
+  unsigned long v;
+  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
+  if (SWIG_IsOK(res)) {
+    if ((v > UCHAR_MAX)) {
+      return SWIG_OverflowError;
+    } else {
+      if (val) *val = static_cast< unsigned char >(v);
+    }
+  }  
+  return res;
+}
+
+SWIGINTERN std::string Standard_GUID_ShallowDumpToString(Standard_GUID *self){
+			std::stringstream s;
+			self->ShallowDump(s);
+			return s.str();}
+
+SWIGINTERNINLINE PyObject *
+SWIG_From_short  (short value)
+{    
+  return SWIG_From_long  (value);
+}
+
+
+SWIGINTERNINLINE PyObject *
+SWIG_From_unsigned_SS_char  (unsigned char value)
+{    
+  return SWIG_From_unsigned_SS_long  (value);
+}
+
+SWIGINTERN void delete_Standard_GUID(Standard_GUID *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_GUID\n");}
+	}
+SWIGINTERN Standard_PCharacter Standard_GUID_ToString(Standard_GUID *self){
+	Standard_PCharacter tmpstr=NULL;
+	tmpstr = new char[37];
+	strcpy(tmpstr,"00000000-0000-0000-0000-000000000000");
+	self->ToCString(tmpstr);
+	return tmpstr;
+	}
+SWIGINTERN void delete_Standard_ErrorHandler(Standard_ErrorHandler *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_ErrorHandler\n");}
+	}
+SWIGINTERN void delete_Standard_Mutex(Standard_Mutex *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_Mutex\n");}
+	}
+SWIGINTERN std::string Standard_Persistent_ShallowDumpToString(Standard_Persistent *self){
+			std::stringstream s;
+			self->ShallowDump(s);
+			return s.str();}
+SWIGINTERN Handle_Standard_Persistent Standard_Persistent_GetHandle(Standard_Persistent *self){
+	return *(Handle_Standard_Persistent*) &self;
+	}
+SWIGINTERN Standard_Integer Standard_Persistent___hash__(Standard_Persistent *self){
+	return self->HashCode(__PYTHONOCC_MAXINT__);
+	}
+SWIGINTERN void delete_Standard_Persistent(Standard_Persistent *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_Persistent\n");}
+	}
+SWIGINTERN Handle_Standard_OutOfRange Standard_OutOfRange_GetHandle(Standard_OutOfRange *self){
+	return *(Handle_Standard_OutOfRange*) &self;
+	}
+SWIGINTERN Standard_Integer Standard_OutOfRange___hash__(Standard_OutOfRange *self){
+	return self->HashCode(__PYTHONOCC_MAXINT__);
+	}
+SWIGINTERN void delete_Standard_OutOfRange(Standard_OutOfRange *self){
+	char *__env=getenv("PYTHONOCC_VERBOSE");
+	if (__env){printf("## Call custom destructor for instance of Standard_OutOfRange\n");}
+	}
+#ifdef __cplusplus
+extern "C" {
+#endif
+SWIGINTERN PyObject *_wrap_delete_PySwigIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_PySwigIterator",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PySwigIterator" "', argument " "1"" of type '" "swig::PySwigIterator *""'");  }
+   arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_PySwigIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ; PyObject *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator_value",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_value" "', argument " "1"" of type '" "swig::PySwigIterator const *""'");  }
+   arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1); try {
+    result = (PyObject *)((swig::PySwigIterator const *)arg1)->value();}  catch(swig::stop_iteration &_e) { { (void)_e;
+      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void()); SWIG_fail; }  }  resultobj = result; return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_PySwigIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ; size_t arg2 ;
+  swig::PySwigIterator *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; size_t val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ;
+  PyObject * obj1 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator_incr",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_incr" "', argument " "1"" of type '" "swig::PySwigIterator *""'");  }
+   arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1); ecode2 = SWIG_AsVal_size_t(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator_incr" "', argument " "2"" of type '" "size_t""'"); }
+    arg2 = static_cast< size_t >(val2); try { result = (swig::PySwigIterator *)(arg1)->incr(arg2);} 
+  catch(swig::stop_iteration &_e) { { (void)_e; SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void()); SWIG_fail; }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_PySwigIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ; swig::PySwigIterator *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator_incr",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_incr" "', argument " "1"" of type '" "swig::PySwigIterator *""'");  }
+   arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1); try { result = (swig::PySwigIterator *)(arg1)->incr();} 
+  catch(swig::stop_iteration &_e) { { (void)_e; SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void()); SWIG_fail; }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_PySwigIterator_incr(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_PySwigIterator_incr__SWIG_1(self, args);}  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0); _v = SWIG_CheckState(res); if (_v) { {
+        int res = SWIG_AsVal_size_t(argv[1], NULL); _v = SWIG_CheckState(res); }  if (_v) {
+        return _wrap_PySwigIterator_incr__SWIG_0(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PySwigIterator_incr'.\n  Possible C/C++ prototypes are:\n""    incr(swig::PySwigIterator *,size_t)\n""    incr(swig::PySwigIterator *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_PySwigIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ; size_t arg2 ;
+  swig::PySwigIterator *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; size_t val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ;
+  PyObject * obj1 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator_decr",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_decr" "', argument " "1"" of type '" "swig::PySwigIterator *""'");  }
+   arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1); ecode2 = SWIG_AsVal_size_t(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator_decr" "', argument " "2"" of type '" "size_t""'"); }
+    arg2 = static_cast< size_t >(val2); try { result = (swig::PySwigIterator *)(arg1)->decr(arg2);} 
+  catch(swig::stop_iteration &_e) { { (void)_e; SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void()); SWIG_fail; }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_PySwigIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ; swig::PySwigIterator *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator_decr",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_decr" "', argument " "1"" of type '" "swig::PySwigIterator *""'");  }
+   arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1); try { result = (swig::PySwigIterator *)(arg1)->decr();} 
+  catch(swig::stop_iteration &_e) { { (void)_e; SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void()); SWIG_fail; }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_PySwigIterator_decr(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_PySwigIterator_decr__SWIG_1(self, args);}  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0); _v = SWIG_CheckState(res); if (_v) { {
+        int res = SWIG_AsVal_size_t(argv[1], NULL); _v = SWIG_CheckState(res); }  if (_v) {
+        return _wrap_PySwigIterator_decr__SWIG_0(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PySwigIterator_decr'.\n  Possible C/C++ prototypes are:\n""    decr(swig::PySwigIterator *,size_t)\n""    decr(swig::PySwigIterator *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_PySwigIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ; swig::PySwigIterator *arg2 = 0 ; ptrdiff_t result; void *argp1 = 0 ;
+  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator_distance",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_distance" "', argument " "1"" of type '" "swig::PySwigIterator const *""'");  }
+   arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__PySwigIterator,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySwigIterator_distance" "', argument " "2"" of type '" "swig::PySwigIterator const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySwigIterator_distance" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); }
+   arg2 = reinterpret_cast< swig::PySwigIterator * >(argp2); try {
+    result = ((swig::PySwigIterator const *)arg1)->distance((swig::PySwigIterator const &)*arg2);} 
+  catch(std::invalid_argument &_e) {
+    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail; }
+   resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_PySwigIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ; swig::PySwigIterator *arg2 = 0 ; bool result; void *argp1 = 0 ;
+  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator_equal",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_equal" "', argument " "1"" of type '" "swig::PySwigIterator const *""'");  }
+   arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__PySwigIterator,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySwigIterator_equal" "', argument " "2"" of type '" "swig::PySwigIterator const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySwigIterator_equal" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); }
+   arg2 = reinterpret_cast< swig::PySwigIterator * >(argp2); try {
+    result = (bool)((swig::PySwigIterator const *)arg1)->equal((swig::PySwigIterator const &)*arg2);} 
+  catch(std::invalid_argument &_e) {
+    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail; }
+   resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_PySwigIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ; swig::PySwigIterator *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator_copy",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_copy" "', argument " "1"" of type '" "swig::PySwigIterator const *""'");  }
+   arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
+  result = (swig::PySwigIterator *)((swig::PySwigIterator const *)arg1)->copy();
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_PySwigIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ; PyObject *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator_next",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_next" "', argument " "1"" of type '" "swig::PySwigIterator *""'");  }
+   arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1); try { result = (PyObject *)(arg1)->next();} 
+  catch(swig::stop_iteration &_e) { { (void)_e; SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void()); SWIG_fail; }  } 
+  resultobj = result; return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_PySwigIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ; PyObject *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator_previous",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_previous" "', argument " "1"" of type '" "swig::PySwigIterator *""'");  }
+   arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1); try { result = (PyObject *)(arg1)->previous();} 
+  catch(swig::stop_iteration &_e) { { (void)_e; SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void()); SWIG_fail; }  } 
+  resultobj = result; return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_PySwigIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ; ptrdiff_t arg2 ; swig::PySwigIterator *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; ptrdiff_t val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator_advance",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_advance" "', argument " "1"" of type '" "swig::PySwigIterator *""'");  }
+   arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1); ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
+  if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'"); }
+    arg2 = static_cast< ptrdiff_t >(val2); try { result = (swig::PySwigIterator *)(arg1)->advance(arg2);} 
+  catch(swig::stop_iteration &_e) { { (void)_e; SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void()); SWIG_fail; }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_PySwigIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ; swig::PySwigIterator *arg2 = 0 ; bool result; void *argp1 = 0 ;
+  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator___eq__",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___eq__" "', argument " "1"" of type '" "swig::PySwigIterator const *""'");  }
+   arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__PySwigIterator,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySwigIterator___eq__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySwigIterator___eq__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); }
+   arg2 = reinterpret_cast< swig::PySwigIterator * >(argp2);
+  result = (bool)((swig::PySwigIterator const *)arg1)->operator ==((swig::PySwigIterator const &)*arg2);
+  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_PySwigIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ; swig::PySwigIterator *arg2 = 0 ; bool result; void *argp1 = 0 ;
+  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator___ne__",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___ne__" "', argument " "1"" of type '" "swig::PySwigIterator const *""'");  }
+   arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__PySwigIterator,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySwigIterator___ne__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySwigIterator___ne__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); }
+   arg2 = reinterpret_cast< swig::PySwigIterator * >(argp2);
+  result = (bool)((swig::PySwigIterator const *)arg1)->operator !=((swig::PySwigIterator const &)*arg2);
+  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_PySwigIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ; ptrdiff_t arg2 ; swig::PySwigIterator *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; ptrdiff_t val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator___iadd__",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___iadd__" "', argument " "1"" of type '" "swig::PySwigIterator *""'");  }
+   arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1); ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
+  if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'"); }
+    arg2 = static_cast< ptrdiff_t >(val2); try { { swig::PySwigIterator &_result_ref = (arg1)->operator +=(arg2);
+      result = (swig::PySwigIterator *) &_result_ref; } }  catch(swig::stop_iteration &_e) { { (void)_e;
+      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void()); SWIG_fail; }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_PySwigIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ; ptrdiff_t arg2 ; swig::PySwigIterator *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; ptrdiff_t val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator___isub__",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___isub__" "', argument " "1"" of type '" "swig::PySwigIterator *""'");  }
+   arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1); ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
+  if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'"); }
+    arg2 = static_cast< ptrdiff_t >(val2); try { { swig::PySwigIterator &_result_ref = (arg1)->operator -=(arg2);
+      result = (swig::PySwigIterator *) &_result_ref; } }  catch(swig::stop_iteration &_e) { { (void)_e;
+      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void()); SWIG_fail; }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_PySwigIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ; ptrdiff_t arg2 ; swig::PySwigIterator *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; ptrdiff_t val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator___add__",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___add__" "', argument " "1"" of type '" "swig::PySwigIterator const *""'");  }
+   arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1); ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
+  if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'"); }
+    arg2 = static_cast< ptrdiff_t >(val2); try {
+    result = (swig::PySwigIterator *)((swig::PySwigIterator const *)arg1)->operator +(arg2);}  catch(swig::stop_iteration &_e) {
+    { (void)_e; SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void()); SWIG_fail; }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_PySwigIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ; ptrdiff_t arg2 ;
+  swig::PySwigIterator *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; ptrdiff_t val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ;
+  PyObject * obj1 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator___sub__",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___sub__" "', argument " "1"" of type '" "swig::PySwigIterator const *""'");  }
+   arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1); ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
+  if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'"); }
+    arg2 = static_cast< ptrdiff_t >(val2); try {
+    result = (swig::PySwigIterator *)((swig::PySwigIterator const *)arg1)->operator -(arg2);}  catch(swig::stop_iteration &_e) {
+    { (void)_e; SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void()); SWIG_fail; }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_PySwigIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ; swig::PySwigIterator *arg2 = 0 ;
+  ptrdiff_t result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ;
+  PyObject * obj1 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator___sub__",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___sub__" "', argument " "1"" of type '" "swig::PySwigIterator const *""'");  }
+   arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__PySwigIterator,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySwigIterator___sub__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySwigIterator___sub__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); }
+   arg2 = reinterpret_cast< swig::PySwigIterator * >(argp2);
+  result = ((swig::PySwigIterator const *)arg1)->operator -((swig::PySwigIterator const &)*arg2);
+  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_PySwigIterator___sub__(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__PySwigIterator, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_PySwigIterator___sub____SWIG_1(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0); _v = SWIG_CheckState(res); if (_v) { {
+        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL); _v = SWIG_CheckState(res); }  if (_v) {
+        return _wrap_PySwigIterator___sub____SWIG_0(self, args);}  }  }  fail: Py_INCREF(Py_NotImplemented);
+  return Py_NotImplemented; }
+SWIGINTERN PyObject *PySwigIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_swig__PySwigIterator, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_Transient__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Transient *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_Transient",0,0)) SWIG_fail; { try {
+      result = (Handle_Standard_Transient *)new Handle_Standard_Transient(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Transient, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_Transient__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Transient *arg1 = (Standard_Transient *) 0 ; Handle_Standard_Transient *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_Transient",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Transient, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_Transient" "', argument " "1"" of type '" "Standard_Transient const *""'");  }
+   arg1 = reinterpret_cast< Standard_Transient * >(argp1); { try {
+      result = (Handle_Standard_Transient *)new Handle_Standard_Transient((Standard_Transient const *)arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Transient, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_Transient__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Transient *arg1 = 0 ; Handle_Standard_Transient *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_Transient",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Handle_Standard_Transient,  0  | 0); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_Transient" "', argument " "1"" of type '" "Handle_Standard_Transient const &""'");  }
+   if (!argp1) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Handle_Standard_Transient" "', argument " "1"" of type '" "Handle_Standard_Transient const &""'"); }
+   arg1 = reinterpret_cast< Handle_Standard_Transient * >(argp1); { try {
+      result = (Handle_Standard_Transient *)new Handle_Standard_Transient((Handle_Standard_Transient const &)*arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Transient, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_Transient(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Handle_Standard_Transient__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_Transient, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_Transient__SWIG_1(self, args);}  }  if (argc == 1) {
+    int _v; int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Handle_Standard_Transient, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Handle_Standard_Transient__SWIG_2(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Handle_Standard_Transient'.\n  Possible C/C++ prototypes are:\n""    Handle_Standard_Transient()\n""    Handle_Standard_Transient(Standard_Transient const *)\n""    Handle_Standard_Transient(Handle_Standard_Transient const &)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Transient_Set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Transient *arg1 = (Handle_Standard_Transient *) 0 ;
+  Handle_Standard_Transient *arg2 = 0 ; Handle_Standard_Transient *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Transient_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Transient, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Transient_Set" "', argument " "1"" of type '" "Handle_Standard_Transient *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Transient * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Transient,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_Transient_Set" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_Transient_Set" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Transient * >(argp2); { try { {
+        Handle_Standard_Transient &_result_ref = (arg1)->operator =((Handle_Standard_Transient const &)*arg2);
+        result = (Handle_Standard_Transient *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Transient, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Transient_Set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Transient *arg1 = (Handle_Standard_Transient *) 0 ;
+  Standard_Transient *arg2 = (Standard_Transient *) 0 ; Handle_Standard_Transient *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Transient_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Transient, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Transient_Set" "', argument " "1"" of type '" "Handle_Standard_Transient *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Transient * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Standard_Transient, 0 |  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_Transient_Set" "', argument " "2"" of type '" "Standard_Transient const *""'");  }
+   arg2 = reinterpret_cast< Standard_Transient * >(argp2); { try { {
+        Handle_Standard_Transient &_result_ref = (arg1)->operator =((Standard_Transient const *)arg2);
+        result = (Handle_Standard_Transient *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Transient, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Transient_Set(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_Transient, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_Transient, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Handle_Standard_Transient_Set__SWIG_0(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_Transient, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_Transient, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Handle_Standard_Transient_Set__SWIG_1(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Handle_Standard_Transient_Set'.\n  Possible C/C++ prototypes are:\n""    operator =(Handle_Standard_Transient *,Handle_Standard_Transient const &)\n""    operator =(Handle_Standard_Transient *,Standard_Transient const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Transient_Nullify(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Transient *arg1 = (Handle_Standard_Transient *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Transient_Nullify",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Transient, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Transient_Nullify" "', argument " "1"" of type '" "Handle_Standard_Transient *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Transient * >(argp1); { try { (arg1)->Nullify(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Transient_IsNull(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Transient *arg1 = (Handle_Standard_Transient *) 0 ; Standard_Boolean result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Transient_IsNull",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Transient, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Transient_IsNull" "', argument " "1"" of type '" "Handle_Standard_Transient const *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Transient * >(argp1); { try {
+      result = (Standard_Boolean)((Handle_Standard_Transient const *)arg1)->IsNull(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Transient_Access__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Transient *arg1 = (Handle_Standard_Transient *) 0 ; Standard_Transient *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Transient_Access",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Transient, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Transient_Access" "', argument " "1"" of type '" "Handle_Standard_Transient *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Transient * >(argp1); { try { result = (Standard_Transient *)(arg1)->Access(); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_Transient, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Transient_Access__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Transient *arg1 = (Handle_Standard_Transient *) 0 ; Standard_Transient *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Transient_Access",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Transient, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Transient_Access" "', argument " "1"" of type '" "Handle_Standard_Transient const *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Transient * >(argp1); { try {
+      result = (Standard_Transient *)((Handle_Standard_Transient const *)arg1)->Access(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_Transient, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Transient_Access(PyObject *self, PyObject *args) { int argc; PyObject *argv[2];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_Transient, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_Handle_Standard_Transient_Access__SWIG_0(self, args);}  }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_Transient, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_Handle_Standard_Transient_Access__SWIG_1(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Handle_Standard_Transient_Access'.\n  Possible C/C++ prototypes are:\n""    Access(Handle_Standard_Transient *)\n""    Access(Handle_Standard_Transient const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Transient___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Transient *arg1 = (Handle_Standard_Transient *) 0 ;
+  Handle_Standard_Transient *arg2 = 0 ; int result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
+  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Transient___eq__",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Transient, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Transient___eq__" "', argument " "1"" of type '" "Handle_Standard_Transient const *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Transient * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Transient,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_Transient___eq__" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_Transient___eq__" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Transient * >(argp2); { try {
+      result = (int)((Handle_Standard_Transient const *)arg1)->operator ==((Handle_Standard_Transient const &)*arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Transient___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Transient *arg1 = (Handle_Standard_Transient *) 0 ;
+  Standard_Transient *arg2 = (Standard_Transient *) 0 ; int result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
+  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Transient___eq__",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Transient, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Transient___eq__" "', argument " "1"" of type '" "Handle_Standard_Transient const *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Transient * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Standard_Transient, 0 |  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_Transient___eq__" "', argument " "2"" of type '" "Standard_Transient const *""'");  }
+   arg2 = reinterpret_cast< Standard_Transient * >(argp2); { try {
+      result = (int)((Handle_Standard_Transient const *)arg1)->operator ==((Standard_Transient const *)arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Transient___eq__(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_Transient, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_Transient, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Handle_Standard_Transient___eq____SWIG_0(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_Transient, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_Transient, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Handle_Standard_Transient___eq____SWIG_1(self, args);}  }  }  fail: Py_INCREF(Py_NotImplemented);
+  return Py_NotImplemented; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Transient___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Transient *arg1 = (Handle_Standard_Transient *) 0 ;
+  Handle_Standard_Transient *arg2 = 0 ; int result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
+  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Transient___ne__",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Transient, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Transient___ne__" "', argument " "1"" of type '" "Handle_Standard_Transient const *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Transient * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Transient,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_Transient___ne__" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_Transient___ne__" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Transient * >(argp2); { try {
+      result = (int)((Handle_Standard_Transient const *)arg1)->operator !=((Handle_Standard_Transient const &)*arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Transient___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Transient *arg1 = (Handle_Standard_Transient *) 0 ;
+  Standard_Transient *arg2 = (Standard_Transient *) 0 ; int result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
+  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Transient___ne__",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Transient, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Transient___ne__" "', argument " "1"" of type '" "Handle_Standard_Transient const *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Transient * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Standard_Transient, 0 |  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_Transient___ne__" "', argument " "2"" of type '" "Standard_Transient const *""'");  }
+   arg2 = reinterpret_cast< Standard_Transient * >(argp2); { try {
+      result = (int)((Handle_Standard_Transient const *)arg1)->operator !=((Standard_Transient const *)arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Transient___ne__(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_Transient, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_Transient, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Handle_Standard_Transient___ne____SWIG_0(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_Transient, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_Transient, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Handle_Standard_Transient___ne____SWIG_1(self, args);}  }  }  fail: Py_INCREF(Py_NotImplemented);
+  return Py_NotImplemented; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Transient_DownCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Transient *arg1 = (Handle_Standard_Transient *) 0 ;
+  Handle_Standard_Transient *arg2 = 0 ; Handle_Standard_Transient result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
+  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Transient_DownCast",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Transient, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Transient_DownCast" "', argument " "1"" of type '" "Handle_Standard_Transient *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Transient * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Transient,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_Transient_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_Transient_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Transient * >(argp2); { try {
+      result = (arg1)->DownCast((Handle_Standard_Transient const &)*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_Transient(static_cast< const Handle_Standard_Transient& >(result))), SWIGTYPE_p_Handle_Standard_Transient, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Transient_DumpToString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Transient *arg1 = (Handle_Standard_Transient *) 0 ; std::string result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Transient_DumpToString",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Transient, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Transient_DumpToString" "', argument " "1"" of type '" "Handle_Standard_Transient *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Transient * >(argp1); { try {
+      result = Handle_Standard_Transient_DumpToString(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_std_string(static_cast< std::string >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Transient_GetObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Transient *arg1 = (Handle_Standard_Transient *) 0 ; Standard_Transient *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Transient_GetObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Transient, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Transient_GetObject" "', argument " "1"" of type '" "Handle_Standard_Transient *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Transient * >(argp1); { try {
+      result = (Standard_Transient *)Handle_Standard_Transient_GetObject(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_Transient, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Handle_Standard_Transient(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Transient *arg1 = (Handle_Standard_Transient *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"delete_Handle_Standard_Transient",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Transient, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Handle_Standard_Transient" "', argument " "1"" of type '" "Handle_Standard_Transient *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Transient * >(argp1); { try { delete_Handle_Standard_Transient(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Handle_Standard_Transient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Handle_Standard_Transient, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_Failure__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Failure *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_Failure",0,0)) SWIG_fail; { try {
+      result = (Handle_Standard_Failure *)new Handle_Standard_Failure(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Failure, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_Failure__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Failure *arg1 = 0 ; Handle_Standard_Failure *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_Failure",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Handle_Standard_Failure,  0  | 0); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_Failure" "', argument " "1"" of type '" "Handle_Standard_Failure const &""'");  }
+   if (!argp1) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Handle_Standard_Failure" "', argument " "1"" of type '" "Handle_Standard_Failure const &""'"); }
+   arg1 = reinterpret_cast< Handle_Standard_Failure * >(argp1); { try {
+      result = (Handle_Standard_Failure *)new Handle_Standard_Failure((Handle_Standard_Failure const &)*arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Failure, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_Failure__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Failure *arg1 = (Standard_Failure *) 0 ; Handle_Standard_Failure *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_Failure",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Failure, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_Failure" "', argument " "1"" of type '" "Standard_Failure const *""'");  }
+   arg1 = reinterpret_cast< Standard_Failure * >(argp1); { try {
+      result = (Handle_Standard_Failure *)new Handle_Standard_Failure((Standard_Failure const *)arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Failure, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_Failure(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Handle_Standard_Failure__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Handle_Standard_Failure, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_Failure__SWIG_1(self, args);}  }  if (argc == 1) {
+    int _v; void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_Failure, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_Failure__SWIG_2(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Handle_Standard_Failure'.\n  Possible C/C++ prototypes are:\n""    Handle_Standard_Failure()\n""    Handle_Standard_Failure(Handle_Standard_Failure const &)\n""    Handle_Standard_Failure(Standard_Failure const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Failure_Set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Failure *arg1 = (Handle_Standard_Failure *) 0 ; Handle_Standard_Failure *arg2 = 0 ;
+  Handle_Standard_Failure *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ;
+  PyObject * obj1 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Failure_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Failure, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Failure_Set" "', argument " "1"" of type '" "Handle_Standard_Failure *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Failure * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Failure,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_Failure_Set" "', argument " "2"" of type '" "Handle_Standard_Failure const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_Failure_Set" "', argument " "2"" of type '" "Handle_Standard_Failure const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Failure * >(argp2); { try { {
+        Handle_Standard_Failure &_result_ref = (arg1)->operator =((Handle_Standard_Failure const &)*arg2);
+        result = (Handle_Standard_Failure *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Failure, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Failure_Set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Failure *arg1 = (Handle_Standard_Failure *) 0 ;
+  Standard_Failure *arg2 = (Standard_Failure *) 0 ; Handle_Standard_Failure *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Failure_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Failure, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Failure_Set" "', argument " "1"" of type '" "Handle_Standard_Failure *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Failure * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Standard_Failure, 0 |  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_Failure_Set" "', argument " "2"" of type '" "Standard_Failure const *""'");  }
+   arg2 = reinterpret_cast< Standard_Failure * >(argp2); { try { {
+        Handle_Standard_Failure &_result_ref = (arg1)->operator =((Standard_Failure const *)arg2);
+        result = (Handle_Standard_Failure *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Failure, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Failure_Set(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_Failure, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_Failure, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Handle_Standard_Failure_Set__SWIG_0(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_Failure, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_Failure, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Handle_Standard_Failure_Set__SWIG_1(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Handle_Standard_Failure_Set'.\n  Possible C/C++ prototypes are:\n""    operator =(Handle_Standard_Failure *,Handle_Standard_Failure const &)\n""    operator =(Handle_Standard_Failure *,Standard_Failure const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Failure_DownCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Failure *arg1 = (Handle_Standard_Failure *) 0 ; Handle_Standard_Transient *arg2 = 0 ;
+  Handle_Standard_Failure result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ;
+  PyObject * obj1 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Failure_DownCast",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Failure, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Failure_DownCast" "', argument " "1"" of type '" "Handle_Standard_Failure *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Failure * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Transient,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_Failure_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_Failure_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Transient * >(argp2); { try {
+      result = (arg1)->DownCast((Handle_Standard_Transient const &)*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_Failure(static_cast< const Handle_Standard_Failure& >(result))), SWIGTYPE_p_Handle_Standard_Failure, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Failure_GetObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Failure *arg1 = (Handle_Standard_Failure *) 0 ; Standard_Failure *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Failure_GetObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Failure, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Failure_GetObject" "', argument " "1"" of type '" "Handle_Standard_Failure *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Failure * >(argp1); { try {
+      result = (Standard_Failure *)Handle_Standard_Failure_GetObject(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_Failure, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Handle_Standard_Failure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Failure *arg1 = (Handle_Standard_Failure *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"delete_Handle_Standard_Failure",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Failure, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Handle_Standard_Failure" "', argument " "1"" of type '" "Handle_Standard_Failure *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Failure * >(argp1); { try { delete_Handle_Standard_Failure(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Handle_Standard_Failure_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Handle_Standard_Failure, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_DomainError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_DomainError *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_DomainError",0,0)) SWIG_fail; { try {
+      result = (Handle_Standard_DomainError *)new Handle_Standard_DomainError(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_DomainError, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_DomainError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_DomainError *arg1 = 0 ; Handle_Standard_DomainError *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_DomainError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Handle_Standard_DomainError,  0  | 0); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_DomainError" "', argument " "1"" of type '" "Handle_Standard_DomainError const &""'");  }
+   if (!argp1) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Handle_Standard_DomainError" "', argument " "1"" of type '" "Handle_Standard_DomainError const &""'"); }
+   arg1 = reinterpret_cast< Handle_Standard_DomainError * >(argp1); { try {
+      result = (Handle_Standard_DomainError *)new Handle_Standard_DomainError((Handle_Standard_DomainError const &)*arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_DomainError, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_DomainError__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DomainError *arg1 = (Standard_DomainError *) 0 ; Handle_Standard_DomainError *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_DomainError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DomainError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_DomainError" "', argument " "1"" of type '" "Standard_DomainError const *""'");  }
+   arg1 = reinterpret_cast< Standard_DomainError * >(argp1); { try {
+      result = (Handle_Standard_DomainError *)new Handle_Standard_DomainError((Standard_DomainError const *)arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_DomainError, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_DomainError(PyObject *self, PyObject *args) { int argc; PyObject *argv[2];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Handle_Standard_DomainError__SWIG_0(self, args);}
+   if (argc == 1) { int _v; int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Handle_Standard_DomainError, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_DomainError__SWIG_1(self, args);}  }  if (argc == 1) {
+    int _v; void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_DomainError, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_DomainError__SWIG_2(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Handle_Standard_DomainError'.\n  Possible C/C++ prototypes are:\n""    Handle_Standard_DomainError()\n""    Handle_Standard_DomainError(Handle_Standard_DomainError const &)\n""    Handle_Standard_DomainError(Standard_DomainError const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_DomainError_Set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_DomainError *arg1 = (Handle_Standard_DomainError *) 0 ;
+  Handle_Standard_DomainError *arg2 = 0 ; Handle_Standard_DomainError *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_DomainError_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_DomainError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_DomainError_Set" "', argument " "1"" of type '" "Handle_Standard_DomainError *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_DomainError * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_DomainError,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_DomainError_Set" "', argument " "2"" of type '" "Handle_Standard_DomainError const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_DomainError_Set" "', argument " "2"" of type '" "Handle_Standard_DomainError const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_DomainError * >(argp2); { try { {
+        Handle_Standard_DomainError &_result_ref = (arg1)->operator =((Handle_Standard_DomainError const &)*arg2);
+        result = (Handle_Standard_DomainError *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_DomainError, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_DomainError_Set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_DomainError *arg1 = (Handle_Standard_DomainError *) 0 ;
+  Standard_DomainError *arg2 = (Standard_DomainError *) 0 ; Handle_Standard_DomainError *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_DomainError_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_DomainError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_DomainError_Set" "', argument " "1"" of type '" "Handle_Standard_DomainError *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_DomainError * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Standard_DomainError, 0 |  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_DomainError_Set" "', argument " "2"" of type '" "Standard_DomainError const *""'");  }
+   arg2 = reinterpret_cast< Standard_DomainError * >(argp2); { try { {
+        Handle_Standard_DomainError &_result_ref = (arg1)->operator =((Standard_DomainError const *)arg2);
+        result = (Handle_Standard_DomainError *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_DomainError, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_DomainError_Set(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_DomainError, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_DomainError, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Handle_Standard_DomainError_Set__SWIG_0(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_DomainError, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_DomainError, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Handle_Standard_DomainError_Set__SWIG_1(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Handle_Standard_DomainError_Set'.\n  Possible C/C++ prototypes are:\n""    operator =(Handle_Standard_DomainError *,Handle_Standard_DomainError const &)\n""    operator =(Handle_Standard_DomainError *,Standard_DomainError const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_DomainError_DownCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_DomainError *arg1 = (Handle_Standard_DomainError *) 0 ;
+  Handle_Standard_Transient *arg2 = 0 ; Handle_Standard_DomainError result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
+  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_DomainError_DownCast",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_DomainError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_DomainError_DownCast" "', argument " "1"" of type '" "Handle_Standard_DomainError *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_DomainError * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Transient,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_DomainError_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_DomainError_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Transient * >(argp2); { try {
+      result = (arg1)->DownCast((Handle_Standard_Transient const &)*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_DomainError(static_cast< const Handle_Standard_DomainError& >(result))), SWIGTYPE_p_Handle_Standard_DomainError, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_DomainError_GetObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_DomainError *arg1 = (Handle_Standard_DomainError *) 0 ;
+  Standard_DomainError *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_DomainError_GetObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_DomainError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_DomainError_GetObject" "', argument " "1"" of type '" "Handle_Standard_DomainError *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_DomainError * >(argp1); { try {
+      result = (Standard_DomainError *)Handle_Standard_DomainError_GetObject(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_DomainError, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Handle_Standard_DomainError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_DomainError *arg1 = (Handle_Standard_DomainError *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Handle_Standard_DomainError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_DomainError, SWIG_POINTER_DISOWN |  0 );
+  if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Handle_Standard_DomainError" "', argument " "1"" of type '" "Handle_Standard_DomainError *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_DomainError * >(argp1); { try { delete_Handle_Standard_DomainError(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Handle_Standard_DomainError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Handle_Standard_DomainError, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_RangeError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_RangeError *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_RangeError",0,0)) SWIG_fail; { try {
+      result = (Handle_Standard_RangeError *)new Handle_Standard_RangeError(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_RangeError, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_RangeError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_RangeError *arg1 = 0 ; Handle_Standard_RangeError *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_RangeError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Handle_Standard_RangeError,  0  | 0); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_RangeError" "', argument " "1"" of type '" "Handle_Standard_RangeError const &""'");  }
+   if (!argp1) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Handle_Standard_RangeError" "', argument " "1"" of type '" "Handle_Standard_RangeError const &""'"); }
+   arg1 = reinterpret_cast< Handle_Standard_RangeError * >(argp1); { try {
+      result = (Handle_Standard_RangeError *)new Handle_Standard_RangeError((Handle_Standard_RangeError const &)*arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_RangeError, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_RangeError__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_RangeError *arg1 = (Standard_RangeError *) 0 ; Handle_Standard_RangeError *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_RangeError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_RangeError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_RangeError" "', argument " "1"" of type '" "Standard_RangeError const *""'");  }
+   arg1 = reinterpret_cast< Standard_RangeError * >(argp1); { try {
+      result = (Handle_Standard_RangeError *)new Handle_Standard_RangeError((Standard_RangeError const *)arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_RangeError, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_RangeError(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Handle_Standard_RangeError__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Handle_Standard_RangeError, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_RangeError__SWIG_1(self, args);}  }  if (argc == 1) {
+    int _v; void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_RangeError, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_RangeError__SWIG_2(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Handle_Standard_RangeError'.\n  Possible C/C++ prototypes are:\n""    Handle_Standard_RangeError()\n""    Handle_Standard_RangeError(Handle_Standard_RangeError const &)\n""    Handle_Standard_RangeError(Standard_RangeError const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_RangeError_Set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_RangeError *arg1 = (Handle_Standard_RangeError *) 0 ;
+  Handle_Standard_RangeError *arg2 = 0 ; Handle_Standard_RangeError *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_RangeError_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_RangeError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_RangeError_Set" "', argument " "1"" of type '" "Handle_Standard_RangeError *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_RangeError * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_RangeError,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_RangeError_Set" "', argument " "2"" of type '" "Handle_Standard_RangeError const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_RangeError_Set" "', argument " "2"" of type '" "Handle_Standard_RangeError const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_RangeError * >(argp2); { try { {
+        Handle_Standard_RangeError &_result_ref = (arg1)->operator =((Handle_Standard_RangeError const &)*arg2);
+        result = (Handle_Standard_RangeError *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_RangeError, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_RangeError_Set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_RangeError *arg1 = (Handle_Standard_RangeError *) 0 ;
+  Standard_RangeError *arg2 = (Standard_RangeError *) 0 ; Handle_Standard_RangeError *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_RangeError_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_RangeError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_RangeError_Set" "', argument " "1"" of type '" "Handle_Standard_RangeError *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_RangeError * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Standard_RangeError, 0 |  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_RangeError_Set" "', argument " "2"" of type '" "Standard_RangeError const *""'");  }
+   arg2 = reinterpret_cast< Standard_RangeError * >(argp2); { try { {
+        Handle_Standard_RangeError &_result_ref = (arg1)->operator =((Standard_RangeError const *)arg2);
+        result = (Handle_Standard_RangeError *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_RangeError, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_RangeError_Set(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_RangeError, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_RangeError, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Handle_Standard_RangeError_Set__SWIG_0(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_RangeError, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_RangeError, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Handle_Standard_RangeError_Set__SWIG_1(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Handle_Standard_RangeError_Set'.\n  Possible C/C++ prototypes are:\n""    operator =(Handle_Standard_RangeError *,Handle_Standard_RangeError const &)\n""    operator =(Handle_Standard_RangeError *,Standard_RangeError const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_RangeError_DownCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_RangeError *arg1 = (Handle_Standard_RangeError *) 0 ;
+  Handle_Standard_Transient *arg2 = 0 ; Handle_Standard_RangeError result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
+  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_RangeError_DownCast",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_RangeError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_RangeError_DownCast" "', argument " "1"" of type '" "Handle_Standard_RangeError *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_RangeError * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Transient,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_RangeError_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_RangeError_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Transient * >(argp2); { try {
+      result = (arg1)->DownCast((Handle_Standard_Transient const &)*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_RangeError(static_cast< const Handle_Standard_RangeError& >(result))), SWIGTYPE_p_Handle_Standard_RangeError, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_RangeError_GetObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_RangeError *arg1 = (Handle_Standard_RangeError *) 0 ;
+  Standard_RangeError *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_RangeError_GetObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_RangeError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_RangeError_GetObject" "', argument " "1"" of type '" "Handle_Standard_RangeError *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_RangeError * >(argp1); { try {
+      result = (Standard_RangeError *)Handle_Standard_RangeError_GetObject(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_RangeError, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Handle_Standard_RangeError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_RangeError *arg1 = (Handle_Standard_RangeError *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Handle_Standard_RangeError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_RangeError, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Handle_Standard_RangeError" "', argument " "1"" of type '" "Handle_Standard_RangeError *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_RangeError * >(argp1); { try { delete_Handle_Standard_RangeError(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Handle_Standard_RangeError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Handle_Standard_RangeError, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_NullValue__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NullValue *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_NullValue",0,0)) SWIG_fail; { try {
+      result = (Handle_Standard_NullValue *)new Handle_Standard_NullValue(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_NullValue, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_NullValue__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NullValue *arg1 = 0 ; Handle_Standard_NullValue *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_NullValue",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Handle_Standard_NullValue,  0  | 0); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_NullValue" "', argument " "1"" of type '" "Handle_Standard_NullValue const &""'");  }
+   if (!argp1) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Handle_Standard_NullValue" "', argument " "1"" of type '" "Handle_Standard_NullValue const &""'"); }
+   arg1 = reinterpret_cast< Handle_Standard_NullValue * >(argp1); { try {
+      result = (Handle_Standard_NullValue *)new Handle_Standard_NullValue((Handle_Standard_NullValue const &)*arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_NullValue, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_NullValue__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NullValue *arg1 = (Standard_NullValue *) 0 ; Handle_Standard_NullValue *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_NullValue",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NullValue, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_NullValue" "', argument " "1"" of type '" "Standard_NullValue const *""'");  }
+   arg1 = reinterpret_cast< Standard_NullValue * >(argp1); { try {
+      result = (Handle_Standard_NullValue *)new Handle_Standard_NullValue((Standard_NullValue const *)arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_NullValue, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_NullValue(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Handle_Standard_NullValue__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Handle_Standard_NullValue, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_NullValue__SWIG_1(self, args);}  }  if (argc == 1) {
+    int _v; void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_NullValue, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_NullValue__SWIG_2(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Handle_Standard_NullValue'.\n  Possible C/C++ prototypes are:\n""    Handle_Standard_NullValue()\n""    Handle_Standard_NullValue(Handle_Standard_NullValue const &)\n""    Handle_Standard_NullValue(Standard_NullValue const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_NullValue_Set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NullValue *arg1 = (Handle_Standard_NullValue *) 0 ;
+  Handle_Standard_NullValue *arg2 = 0 ; Handle_Standard_NullValue *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_NullValue_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_NullValue, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_NullValue_Set" "', argument " "1"" of type '" "Handle_Standard_NullValue *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_NullValue * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_NullValue,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_NullValue_Set" "', argument " "2"" of type '" "Handle_Standard_NullValue const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_NullValue_Set" "', argument " "2"" of type '" "Handle_Standard_NullValue const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_NullValue * >(argp2); { try { {
+        Handle_Standard_NullValue &_result_ref = (arg1)->operator =((Handle_Standard_NullValue const &)*arg2);
+        result = (Handle_Standard_NullValue *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_NullValue, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_NullValue_Set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NullValue *arg1 = (Handle_Standard_NullValue *) 0 ;
+  Standard_NullValue *arg2 = (Standard_NullValue *) 0 ; Handle_Standard_NullValue *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_NullValue_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_NullValue, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_NullValue_Set" "', argument " "1"" of type '" "Handle_Standard_NullValue *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_NullValue * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Standard_NullValue, 0 |  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_NullValue_Set" "', argument " "2"" of type '" "Standard_NullValue const *""'");  }
+   arg2 = reinterpret_cast< Standard_NullValue * >(argp2); { try { {
+        Handle_Standard_NullValue &_result_ref = (arg1)->operator =((Standard_NullValue const *)arg2);
+        result = (Handle_Standard_NullValue *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_NullValue, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_NullValue_Set(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_NullValue, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_NullValue, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Handle_Standard_NullValue_Set__SWIG_0(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_NullValue, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_NullValue, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Handle_Standard_NullValue_Set__SWIG_1(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Handle_Standard_NullValue_Set'.\n  Possible C/C++ prototypes are:\n""    operator =(Handle_Standard_NullValue *,Handle_Standard_NullValue const &)\n""    operator =(Handle_Standard_NullValue *,Standard_NullValue const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_NullValue_DownCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NullValue *arg1 = (Handle_Standard_NullValue *) 0 ;
+  Handle_Standard_Transient *arg2 = 0 ; Handle_Standard_NullValue result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
+  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_NullValue_DownCast",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_NullValue, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_NullValue_DownCast" "', argument " "1"" of type '" "Handle_Standard_NullValue *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_NullValue * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Transient,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_NullValue_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_NullValue_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Transient * >(argp2); { try {
+      result = (arg1)->DownCast((Handle_Standard_Transient const &)*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_NullValue(static_cast< const Handle_Standard_NullValue& >(result))), SWIGTYPE_p_Handle_Standard_NullValue, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_NullValue_GetObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NullValue *arg1 = (Handle_Standard_NullValue *) 0 ; Standard_NullValue *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_NullValue_GetObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_NullValue, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_NullValue_GetObject" "', argument " "1"" of type '" "Handle_Standard_NullValue *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_NullValue * >(argp1); { try {
+      result = (Standard_NullValue *)Handle_Standard_NullValue_GetObject(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_NullValue, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Handle_Standard_NullValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NullValue *arg1 = (Handle_Standard_NullValue *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"delete_Handle_Standard_NullValue",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_NullValue, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Handle_Standard_NullValue" "', argument " "1"" of type '" "Handle_Standard_NullValue *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_NullValue * >(argp1); { try { delete_Handle_Standard_NullValue(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Handle_Standard_NullValue_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Handle_Standard_NullValue, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_TypeMismatch__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_TypeMismatch *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_TypeMismatch",0,0)) SWIG_fail; { try {
+      result = (Handle_Standard_TypeMismatch *)new Handle_Standard_TypeMismatch(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_TypeMismatch, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_TypeMismatch__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_TypeMismatch *arg1 = 0 ; Handle_Standard_TypeMismatch *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_TypeMismatch",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Handle_Standard_TypeMismatch,  0  | 0); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_TypeMismatch" "', argument " "1"" of type '" "Handle_Standard_TypeMismatch const &""'");  }
+   if (!argp1) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Handle_Standard_TypeMismatch" "', argument " "1"" of type '" "Handle_Standard_TypeMismatch const &""'"); }
+   arg1 = reinterpret_cast< Handle_Standard_TypeMismatch * >(argp1); { try {
+      result = (Handle_Standard_TypeMismatch *)new Handle_Standard_TypeMismatch((Handle_Standard_TypeMismatch const &)*arg1); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_TypeMismatch, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_TypeMismatch__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_TypeMismatch *arg1 = (Standard_TypeMismatch *) 0 ;
+  Handle_Standard_TypeMismatch *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_TypeMismatch",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_TypeMismatch, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_TypeMismatch" "', argument " "1"" of type '" "Standard_TypeMismatch const *""'");  }
+   arg1 = reinterpret_cast< Standard_TypeMismatch * >(argp1); { try {
+      result = (Handle_Standard_TypeMismatch *)new Handle_Standard_TypeMismatch((Standard_TypeMismatch const *)arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_TypeMismatch, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_TypeMismatch(PyObject *self, PyObject *args) { int argc; PyObject *argv[2];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Handle_Standard_TypeMismatch__SWIG_0(self, args);}
+   if (argc == 1) { int _v; int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Handle_Standard_TypeMismatch, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_TypeMismatch__SWIG_1(self, args);}  } 
+  if (argc == 1) { int _v; void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_TypeMismatch, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_TypeMismatch__SWIG_2(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Handle_Standard_TypeMismatch'.\n  Possible C/C++ prototypes are:\n""    Handle_Standard_TypeMismatch()\n""    Handle_Standard_TypeMismatch(Handle_Standard_TypeMismatch const &)\n""    Handle_Standard_TypeMismatch(Standard_TypeMismatch const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_TypeMismatch_Set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_TypeMismatch *arg1 = (Handle_Standard_TypeMismatch *) 0 ;
+  Handle_Standard_TypeMismatch *arg2 = 0 ; Handle_Standard_TypeMismatch *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_TypeMismatch_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_TypeMismatch, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_TypeMismatch_Set" "', argument " "1"" of type '" "Handle_Standard_TypeMismatch *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_TypeMismatch * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_TypeMismatch,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_TypeMismatch_Set" "', argument " "2"" of type '" "Handle_Standard_TypeMismatch const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_TypeMismatch_Set" "', argument " "2"" of type '" "Handle_Standard_TypeMismatch const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_TypeMismatch * >(argp2); { try { {
+        Handle_Standard_TypeMismatch &_result_ref = (arg1)->operator =((Handle_Standard_TypeMismatch const &)*arg2);
+        result = (Handle_Standard_TypeMismatch *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_TypeMismatch, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_TypeMismatch_Set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_TypeMismatch *arg1 = (Handle_Standard_TypeMismatch *) 0 ;
+  Standard_TypeMismatch *arg2 = (Standard_TypeMismatch *) 0 ; Handle_Standard_TypeMismatch *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_TypeMismatch_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_TypeMismatch, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_TypeMismatch_Set" "', argument " "1"" of type '" "Handle_Standard_TypeMismatch *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_TypeMismatch * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Standard_TypeMismatch, 0 |  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_TypeMismatch_Set" "', argument " "2"" of type '" "Standard_TypeMismatch const *""'");  }
+   arg2 = reinterpret_cast< Standard_TypeMismatch * >(argp2); { try { {
+        Handle_Standard_TypeMismatch &_result_ref = (arg1)->operator =((Standard_TypeMismatch const *)arg2);
+        result = (Handle_Standard_TypeMismatch *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_TypeMismatch, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_TypeMismatch_Set(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_TypeMismatch, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_TypeMismatch, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Handle_Standard_TypeMismatch_Set__SWIG_0(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_TypeMismatch, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_TypeMismatch, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Handle_Standard_TypeMismatch_Set__SWIG_1(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Handle_Standard_TypeMismatch_Set'.\n  Possible C/C++ prototypes are:\n""    operator =(Handle_Standard_TypeMismatch *,Handle_Standard_TypeMismatch const &)\n""    operator =(Handle_Standard_TypeMismatch *,Standard_TypeMismatch const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_TypeMismatch_DownCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_TypeMismatch *arg1 = (Handle_Standard_TypeMismatch *) 0 ;
+  Handle_Standard_Transient *arg2 = 0 ; Handle_Standard_TypeMismatch result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
+  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_TypeMismatch_DownCast",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_TypeMismatch, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_TypeMismatch_DownCast" "', argument " "1"" of type '" "Handle_Standard_TypeMismatch *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_TypeMismatch * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Transient,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_TypeMismatch_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_TypeMismatch_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Transient * >(argp2); { try {
+      result = (arg1)->DownCast((Handle_Standard_Transient const &)*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_TypeMismatch(static_cast< const Handle_Standard_TypeMismatch& >(result))), SWIGTYPE_p_Handle_Standard_TypeMismatch, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_TypeMismatch_GetObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_TypeMismatch *arg1 = (Handle_Standard_TypeMismatch *) 0 ;
+  Standard_TypeMismatch *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_TypeMismatch_GetObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_TypeMismatch, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_TypeMismatch_GetObject" "', argument " "1"" of type '" "Handle_Standard_TypeMismatch *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_TypeMismatch * >(argp1); { try {
+      result = (Standard_TypeMismatch *)Handle_Standard_TypeMismatch_GetObject(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_TypeMismatch, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Handle_Standard_TypeMismatch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_TypeMismatch *arg1 = (Handle_Standard_TypeMismatch *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Handle_Standard_TypeMismatch",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_TypeMismatch, SWIG_POINTER_DISOWN |  0 );
+  if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Handle_Standard_TypeMismatch" "', argument " "1"" of type '" "Handle_Standard_TypeMismatch *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_TypeMismatch * >(argp1); { try { delete_Handle_Standard_TypeMismatch(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Handle_Standard_TypeMismatch_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Handle_Standard_TypeMismatch, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_Persistent__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Persistent *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_Persistent",0,0)) SWIG_fail; { try {
+      result = (Handle_Standard_Persistent *)new Handle_Standard_Persistent(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Persistent, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_Persistent__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Persistent *arg1 = 0 ; Handle_Standard_Persistent *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_Persistent",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Handle_Standard_Persistent,  0  | 0); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_Persistent" "', argument " "1"" of type '" "Handle_Standard_Persistent const &""'");  }
+   if (!argp1) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Handle_Standard_Persistent" "', argument " "1"" of type '" "Handle_Standard_Persistent const &""'"); }
+   arg1 = reinterpret_cast< Handle_Standard_Persistent * >(argp1); { try {
+      result = (Handle_Standard_Persistent *)new Handle_Standard_Persistent((Handle_Standard_Persistent const &)*arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Persistent, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_Persistent__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Persistent *arg1 = (Standard_Persistent *) 0 ; Handle_Standard_Persistent *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_Persistent",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Persistent, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_Persistent" "', argument " "1"" of type '" "Standard_Persistent const *""'");  }
+   arg1 = reinterpret_cast< Standard_Persistent * >(argp1); { try {
+      result = (Handle_Standard_Persistent *)new Handle_Standard_Persistent((Standard_Persistent const *)arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Persistent, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_Persistent(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Handle_Standard_Persistent__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Handle_Standard_Persistent, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_Persistent__SWIG_1(self, args);}  }  if (argc == 1) {
+    int _v; void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_Persistent, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_Persistent__SWIG_2(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Handle_Standard_Persistent'.\n  Possible C/C++ prototypes are:\n""    Handle_Standard_Persistent()\n""    Handle_Standard_Persistent(Handle_Standard_Persistent const &)\n""    Handle_Standard_Persistent(Standard_Persistent const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Persistent_DumpToString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Persistent *arg1 = (Handle_Standard_Persistent *) 0 ; std::string result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Persistent_DumpToString",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Persistent, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Persistent_DumpToString" "', argument " "1"" of type '" "Handle_Standard_Persistent *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Persistent * >(argp1); { try {
+      result = Handle_Standard_Persistent_DumpToString(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_std_string(static_cast< std::string >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Persistent___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Persistent *arg1 = (Handle_Standard_Persistent *) 0 ;
+  Handle_Standard_Persistent *arg2 = 0 ; int result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
+  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Persistent___eq__",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Persistent, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Persistent___eq__" "', argument " "1"" of type '" "Handle_Standard_Persistent const *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Persistent * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Persistent,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_Persistent___eq__" "', argument " "2"" of type '" "Handle_Standard_Persistent const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_Persistent___eq__" "', argument " "2"" of type '" "Handle_Standard_Persistent const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Persistent * >(argp2); { try {
+      result = (int)((Handle_Standard_Persistent const *)arg1)->operator ==((Handle_Standard_Persistent const &)*arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Persistent___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Persistent *arg1 = (Handle_Standard_Persistent *) 0 ;
+  Standard_Persistent *arg2 = (Standard_Persistent *) 0 ; int result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
+  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Persistent___eq__",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Persistent, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Persistent___eq__" "', argument " "1"" of type '" "Handle_Standard_Persistent const *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Persistent * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Standard_Persistent, 0 |  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_Persistent___eq__" "', argument " "2"" of type '" "Standard_Persistent const *""'");  }
+   arg2 = reinterpret_cast< Standard_Persistent * >(argp2); { try {
+      result = (int)((Handle_Standard_Persistent const *)arg1)->operator ==((Standard_Persistent const *)arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Persistent___eq__(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_Persistent, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_Persistent, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Handle_Standard_Persistent___eq____SWIG_0(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_Persistent, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_Persistent, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Handle_Standard_Persistent___eq____SWIG_1(self, args);}  }  }  fail: Py_INCREF(Py_NotImplemented);
+  return Py_NotImplemented; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Persistent___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Persistent *arg1 = (Handle_Standard_Persistent *) 0 ;
+  Handle_Standard_Persistent *arg2 = 0 ; int result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
+  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Persistent___ne__",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Persistent, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Persistent___ne__" "', argument " "1"" of type '" "Handle_Standard_Persistent const *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Persistent * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Persistent,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_Persistent___ne__" "', argument " "2"" of type '" "Handle_Standard_Persistent const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_Persistent___ne__" "', argument " "2"" of type '" "Handle_Standard_Persistent const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Persistent * >(argp2); { try {
+      result = (int)((Handle_Standard_Persistent const *)arg1)->operator !=((Handle_Standard_Persistent const &)*arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Persistent___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Persistent *arg1 = (Handle_Standard_Persistent *) 0 ;
+  Standard_Persistent *arg2 = (Standard_Persistent *) 0 ; int result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
+  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Persistent___ne__",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Persistent, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Persistent___ne__" "', argument " "1"" of type '" "Handle_Standard_Persistent const *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Persistent * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Standard_Persistent, 0 |  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_Persistent___ne__" "', argument " "2"" of type '" "Standard_Persistent const *""'");  }
+   arg2 = reinterpret_cast< Standard_Persistent * >(argp2); { try {
+      result = (int)((Handle_Standard_Persistent const *)arg1)->operator !=((Standard_Persistent const *)arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Persistent___ne__(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_Persistent, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_Persistent, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Handle_Standard_Persistent___ne____SWIG_0(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_Persistent, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_Persistent, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Handle_Standard_Persistent___ne____SWIG_1(self, args);}  }  }  fail: Py_INCREF(Py_NotImplemented);
+  return Py_NotImplemented; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Persistent_Nullify(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Persistent *arg1 = (Handle_Standard_Persistent *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Persistent_Nullify",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Persistent, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Persistent_Nullify" "', argument " "1"" of type '" "Handle_Standard_Persistent *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Persistent * >(argp1); { try { (arg1)->Nullify(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Persistent_IsNull(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Persistent *arg1 = (Handle_Standard_Persistent *) 0 ; Standard_Boolean result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Persistent_IsNull",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Persistent, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Persistent_IsNull" "', argument " "1"" of type '" "Handle_Standard_Persistent const *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Persistent * >(argp1); { try {
+      result = (Standard_Boolean)((Handle_Standard_Persistent const *)arg1)->IsNull(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Persistent_Access(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Persistent *arg1 = (Handle_Standard_Persistent *) 0 ;
+  Standard_Persistent *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Persistent_Access",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Persistent, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Persistent_Access" "', argument " "1"" of type '" "Handle_Standard_Persistent const *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Persistent * >(argp1); { try {
+      result = (Standard_Persistent *)((Handle_Standard_Persistent const *)arg1)->Access(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_Persistent, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Persistent_Set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Persistent *arg1 = (Handle_Standard_Persistent *) 0 ;
+  Handle_Standard_Persistent *arg2 = 0 ; Handle_Standard_Persistent *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Persistent_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Persistent, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Persistent_Set" "', argument " "1"" of type '" "Handle_Standard_Persistent *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Persistent * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Persistent,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_Persistent_Set" "', argument " "2"" of type '" "Handle_Standard_Persistent const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_Persistent_Set" "', argument " "2"" of type '" "Handle_Standard_Persistent const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Persistent * >(argp2); { try { {
+        Handle_Standard_Persistent &_result_ref = (arg1)->operator =((Handle_Standard_Persistent const &)*arg2);
+        result = (Handle_Standard_Persistent *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Persistent, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Persistent_Set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Persistent *arg1 = (Handle_Standard_Persistent *) 0 ;
+  Standard_Persistent *arg2 = (Standard_Persistent *) 0 ; Handle_Standard_Persistent *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Persistent_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Persistent, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Persistent_Set" "', argument " "1"" of type '" "Handle_Standard_Persistent *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Persistent * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Standard_Persistent, 0 |  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_Persistent_Set" "', argument " "2"" of type '" "Standard_Persistent const *""'");  }
+   arg2 = reinterpret_cast< Standard_Persistent * >(argp2); { try { {
+        Handle_Standard_Persistent &_result_ref = (arg1)->operator =((Standard_Persistent const *)arg2);
+        result = (Handle_Standard_Persistent *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Persistent, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Persistent_Set(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_Persistent, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_Persistent, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Handle_Standard_Persistent_Set__SWIG_0(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_Persistent, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_Persistent, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Handle_Standard_Persistent_Set__SWIG_1(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Handle_Standard_Persistent_Set'.\n  Possible C/C++ prototypes are:\n""    operator =(Handle_Standard_Persistent *,Handle_Standard_Persistent const &)\n""    operator =(Handle_Standard_Persistent *,Standard_Persistent const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Persistent_DownCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Persistent *arg1 = (Handle_Standard_Persistent *) 0 ;
+  Handle_Standard_Persistent *arg2 = 0 ; Handle_Standard_Persistent result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
+  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Persistent_DownCast",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Persistent, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Persistent_DownCast" "', argument " "1"" of type '" "Handle_Standard_Persistent *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Persistent * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Persistent,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_Persistent_DownCast" "', argument " "2"" of type '" "Handle_Standard_Persistent const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_Persistent_DownCast" "', argument " "2"" of type '" "Handle_Standard_Persistent const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Persistent * >(argp2); { try {
+      result = (arg1)->DownCast((Handle_Standard_Persistent const &)*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_Persistent(static_cast< const Handle_Standard_Persistent& >(result))), SWIGTYPE_p_Handle_Standard_Persistent, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Persistent_GetObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Persistent *arg1 = (Handle_Standard_Persistent *) 0 ;
+  Standard_Persistent *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Persistent_GetObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Persistent, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Persistent_GetObject" "', argument " "1"" of type '" "Handle_Standard_Persistent *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Persistent * >(argp1); { try {
+      result = (Standard_Persistent *)Handle_Standard_Persistent_GetObject(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_Persistent, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Handle_Standard_Persistent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Persistent *arg1 = (Handle_Standard_Persistent *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Handle_Standard_Persistent",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Persistent, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Handle_Standard_Persistent" "', argument " "1"" of type '" "Handle_Standard_Persistent *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Persistent * >(argp1); { try { delete_Handle_Standard_Persistent(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Handle_Standard_Persistent_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Handle_Standard_Persistent, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_OutOfRange__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_OutOfRange *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_OutOfRange",0,0)) SWIG_fail; { try {
+      result = (Handle_Standard_OutOfRange *)new Handle_Standard_OutOfRange(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_OutOfRange, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_OutOfRange__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_OutOfRange *arg1 = 0 ; Handle_Standard_OutOfRange *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_OutOfRange",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Handle_Standard_OutOfRange,  0  | 0); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_OutOfRange" "', argument " "1"" of type '" "Handle_Standard_OutOfRange const &""'");  }
+   if (!argp1) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Handle_Standard_OutOfRange" "', argument " "1"" of type '" "Handle_Standard_OutOfRange const &""'"); }
+   arg1 = reinterpret_cast< Handle_Standard_OutOfRange * >(argp1); { try {
+      result = (Handle_Standard_OutOfRange *)new Handle_Standard_OutOfRange((Handle_Standard_OutOfRange const &)*arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_OutOfRange, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_OutOfRange__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_OutOfRange *arg1 = (Standard_OutOfRange *) 0 ; Handle_Standard_OutOfRange *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_OutOfRange",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_OutOfRange, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_OutOfRange" "', argument " "1"" of type '" "Standard_OutOfRange const *""'");  }
+   arg1 = reinterpret_cast< Standard_OutOfRange * >(argp1); { try {
+      result = (Handle_Standard_OutOfRange *)new Handle_Standard_OutOfRange((Standard_OutOfRange const *)arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_OutOfRange, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_OutOfRange(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Handle_Standard_OutOfRange__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Handle_Standard_OutOfRange, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_OutOfRange__SWIG_1(self, args);}  }  if (argc == 1) {
+    int _v; void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_OutOfRange, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_OutOfRange__SWIG_2(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Handle_Standard_OutOfRange'.\n  Possible C/C++ prototypes are:\n""    Handle_Standard_OutOfRange()\n""    Handle_Standard_OutOfRange(Handle_Standard_OutOfRange const &)\n""    Handle_Standard_OutOfRange(Standard_OutOfRange const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_OutOfRange_Set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_OutOfRange *arg1 = (Handle_Standard_OutOfRange *) 0 ;
+  Handle_Standard_OutOfRange *arg2 = 0 ; Handle_Standard_OutOfRange *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_OutOfRange_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_OutOfRange, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_OutOfRange_Set" "', argument " "1"" of type '" "Handle_Standard_OutOfRange *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_OutOfRange * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_OutOfRange,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_OutOfRange_Set" "', argument " "2"" of type '" "Handle_Standard_OutOfRange const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_OutOfRange_Set" "', argument " "2"" of type '" "Handle_Standard_OutOfRange const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_OutOfRange * >(argp2); { try { {
+        Handle_Standard_OutOfRange &_result_ref = (arg1)->operator =((Handle_Standard_OutOfRange const &)*arg2);
+        result = (Handle_Standard_OutOfRange *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_OutOfRange, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_OutOfRange_Set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_OutOfRange *arg1 = (Handle_Standard_OutOfRange *) 0 ;
+  Standard_OutOfRange *arg2 = (Standard_OutOfRange *) 0 ; Handle_Standard_OutOfRange *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_OutOfRange_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_OutOfRange, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_OutOfRange_Set" "', argument " "1"" of type '" "Handle_Standard_OutOfRange *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_OutOfRange * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Standard_OutOfRange, 0 |  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_OutOfRange_Set" "', argument " "2"" of type '" "Standard_OutOfRange const *""'");  }
+   arg2 = reinterpret_cast< Standard_OutOfRange * >(argp2); { try { {
+        Handle_Standard_OutOfRange &_result_ref = (arg1)->operator =((Standard_OutOfRange const *)arg2);
+        result = (Handle_Standard_OutOfRange *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_OutOfRange, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_OutOfRange_Set(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_OutOfRange, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_OutOfRange, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Handle_Standard_OutOfRange_Set__SWIG_0(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_OutOfRange, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_OutOfRange, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Handle_Standard_OutOfRange_Set__SWIG_1(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Handle_Standard_OutOfRange_Set'.\n  Possible C/C++ prototypes are:\n""    operator =(Handle_Standard_OutOfRange *,Handle_Standard_OutOfRange const &)\n""    operator =(Handle_Standard_OutOfRange *,Standard_OutOfRange const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_OutOfRange_DownCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_OutOfRange *arg1 = (Handle_Standard_OutOfRange *) 0 ;
+  Handle_Standard_Transient *arg2 = 0 ; Handle_Standard_OutOfRange result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
+  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_OutOfRange_DownCast",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_OutOfRange, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_OutOfRange_DownCast" "', argument " "1"" of type '" "Handle_Standard_OutOfRange *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_OutOfRange * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Transient,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_OutOfRange_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_OutOfRange_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Transient * >(argp2); { try {
+      result = (arg1)->DownCast((Handle_Standard_Transient const &)*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_OutOfRange(static_cast< const Handle_Standard_OutOfRange& >(result))), SWIGTYPE_p_Handle_Standard_OutOfRange, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_OutOfRange_GetObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_OutOfRange *arg1 = (Handle_Standard_OutOfRange *) 0 ;
+  Standard_OutOfRange *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_OutOfRange_GetObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_OutOfRange, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_OutOfRange_GetObject" "', argument " "1"" of type '" "Handle_Standard_OutOfRange *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_OutOfRange * >(argp1); { try {
+      result = (Standard_OutOfRange *)Handle_Standard_OutOfRange_GetObject(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_OutOfRange, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Handle_Standard_OutOfRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_OutOfRange *arg1 = (Handle_Standard_OutOfRange *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Handle_Standard_OutOfRange",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_OutOfRange, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Handle_Standard_OutOfRange" "', argument " "1"" of type '" "Handle_Standard_OutOfRange *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_OutOfRange * >(argp1); { try { delete_Handle_Standard_OutOfRange(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Handle_Standard_OutOfRange_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Handle_Standard_OutOfRange, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_NumericError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NumericError *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_NumericError",0,0)) SWIG_fail; { try {
+      result = (Handle_Standard_NumericError *)new Handle_Standard_NumericError(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_NumericError, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_NumericError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NumericError *arg1 = 0 ; Handle_Standard_NumericError *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_NumericError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Handle_Standard_NumericError,  0  | 0); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_NumericError" "', argument " "1"" of type '" "Handle_Standard_NumericError const &""'");  }
+   if (!argp1) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Handle_Standard_NumericError" "', argument " "1"" of type '" "Handle_Standard_NumericError const &""'"); }
+   arg1 = reinterpret_cast< Handle_Standard_NumericError * >(argp1); { try {
+      result = (Handle_Standard_NumericError *)new Handle_Standard_NumericError((Handle_Standard_NumericError const &)*arg1); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_NumericError, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_NumericError__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NumericError *arg1 = (Standard_NumericError *) 0 ;
+  Handle_Standard_NumericError *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_NumericError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NumericError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_NumericError" "', argument " "1"" of type '" "Standard_NumericError const *""'");  }
+   arg1 = reinterpret_cast< Standard_NumericError * >(argp1); { try {
+      result = (Handle_Standard_NumericError *)new Handle_Standard_NumericError((Standard_NumericError const *)arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_NumericError, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_NumericError(PyObject *self, PyObject *args) { int argc; PyObject *argv[2];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Handle_Standard_NumericError__SWIG_0(self, args);}
+   if (argc == 1) { int _v; int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Handle_Standard_NumericError, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_NumericError__SWIG_1(self, args);}  } 
+  if (argc == 1) { int _v; void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_NumericError, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_NumericError__SWIG_2(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Handle_Standard_NumericError'.\n  Possible C/C++ prototypes are:\n""    Handle_Standard_NumericError()\n""    Handle_Standard_NumericError(Handle_Standard_NumericError const &)\n""    Handle_Standard_NumericError(Standard_NumericError const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_NumericError_Set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NumericError *arg1 = (Handle_Standard_NumericError *) 0 ;
+  Handle_Standard_NumericError *arg2 = 0 ; Handle_Standard_NumericError *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_NumericError_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_NumericError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_NumericError_Set" "', argument " "1"" of type '" "Handle_Standard_NumericError *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_NumericError * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_NumericError,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_NumericError_Set" "', argument " "2"" of type '" "Handle_Standard_NumericError const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_NumericError_Set" "', argument " "2"" of type '" "Handle_Standard_NumericError const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_NumericError * >(argp2); { try { {
+        Handle_Standard_NumericError &_result_ref = (arg1)->operator =((Handle_Standard_NumericError const &)*arg2);
+        result = (Handle_Standard_NumericError *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_NumericError, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_NumericError_Set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NumericError *arg1 = (Handle_Standard_NumericError *) 0 ;
+  Standard_NumericError *arg2 = (Standard_NumericError *) 0 ; Handle_Standard_NumericError *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_NumericError_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_NumericError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_NumericError_Set" "', argument " "1"" of type '" "Handle_Standard_NumericError *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_NumericError * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Standard_NumericError, 0 |  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_NumericError_Set" "', argument " "2"" of type '" "Standard_NumericError const *""'");  }
+   arg2 = reinterpret_cast< Standard_NumericError * >(argp2); { try { {
+        Handle_Standard_NumericError &_result_ref = (arg1)->operator =((Standard_NumericError const *)arg2);
+        result = (Handle_Standard_NumericError *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_NumericError, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_NumericError_Set(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_NumericError, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_NumericError, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Handle_Standard_NumericError_Set__SWIG_0(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_NumericError, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_NumericError, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Handle_Standard_NumericError_Set__SWIG_1(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Handle_Standard_NumericError_Set'.\n  Possible C/C++ prototypes are:\n""    operator =(Handle_Standard_NumericError *,Handle_Standard_NumericError const &)\n""    operator =(Handle_Standard_NumericError *,Standard_NumericError const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_NumericError_DownCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NumericError *arg1 = (Handle_Standard_NumericError *) 0 ;
+  Handle_Standard_Transient *arg2 = 0 ; Handle_Standard_NumericError result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
+  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_NumericError_DownCast",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_NumericError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_NumericError_DownCast" "', argument " "1"" of type '" "Handle_Standard_NumericError *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_NumericError * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Transient,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_NumericError_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_NumericError_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Transient * >(argp2); { try {
+      result = (arg1)->DownCast((Handle_Standard_Transient const &)*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_NumericError(static_cast< const Handle_Standard_NumericError& >(result))), SWIGTYPE_p_Handle_Standard_NumericError, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_NumericError_GetObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NumericError *arg1 = (Handle_Standard_NumericError *) 0 ;
+  Standard_NumericError *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_NumericError_GetObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_NumericError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_NumericError_GetObject" "', argument " "1"" of type '" "Handle_Standard_NumericError *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_NumericError * >(argp1); { try {
+      result = (Standard_NumericError *)Handle_Standard_NumericError_GetObject(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_NumericError, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Handle_Standard_NumericError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NumericError *arg1 = (Handle_Standard_NumericError *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Handle_Standard_NumericError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_NumericError, SWIG_POINTER_DISOWN |  0 );
+  if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Handle_Standard_NumericError" "', argument " "1"" of type '" "Handle_Standard_NumericError *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_NumericError * >(argp1); { try { delete_Handle_Standard_NumericError(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Handle_Standard_NumericError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Handle_Standard_NumericError, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_DivideByZero__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_DivideByZero *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_DivideByZero",0,0)) SWIG_fail; { try {
+      result = (Handle_Standard_DivideByZero *)new Handle_Standard_DivideByZero(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_DivideByZero, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_DivideByZero__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_DivideByZero *arg1 = 0 ; Handle_Standard_DivideByZero *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_DivideByZero",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Handle_Standard_DivideByZero,  0  | 0); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_DivideByZero" "', argument " "1"" of type '" "Handle_Standard_DivideByZero const &""'");  }
+   if (!argp1) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Handle_Standard_DivideByZero" "', argument " "1"" of type '" "Handle_Standard_DivideByZero const &""'"); }
+   arg1 = reinterpret_cast< Handle_Standard_DivideByZero * >(argp1); { try {
+      result = (Handle_Standard_DivideByZero *)new Handle_Standard_DivideByZero((Handle_Standard_DivideByZero const &)*arg1); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_DivideByZero, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_DivideByZero__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DivideByZero *arg1 = (Standard_DivideByZero *) 0 ;
+  Handle_Standard_DivideByZero *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_DivideByZero",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DivideByZero, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_DivideByZero" "', argument " "1"" of type '" "Standard_DivideByZero const *""'");  }
+   arg1 = reinterpret_cast< Standard_DivideByZero * >(argp1); { try {
+      result = (Handle_Standard_DivideByZero *)new Handle_Standard_DivideByZero((Standard_DivideByZero const *)arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_DivideByZero, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_DivideByZero(PyObject *self, PyObject *args) { int argc; PyObject *argv[2];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Handle_Standard_DivideByZero__SWIG_0(self, args);}
+   if (argc == 1) { int _v; int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Handle_Standard_DivideByZero, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_DivideByZero__SWIG_1(self, args);}  } 
+  if (argc == 1) { int _v; void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_DivideByZero, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_DivideByZero__SWIG_2(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Handle_Standard_DivideByZero'.\n  Possible C/C++ prototypes are:\n""    Handle_Standard_DivideByZero()\n""    Handle_Standard_DivideByZero(Handle_Standard_DivideByZero const &)\n""    Handle_Standard_DivideByZero(Standard_DivideByZero const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_DivideByZero_Set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_DivideByZero *arg1 = (Handle_Standard_DivideByZero *) 0 ;
+  Handle_Standard_DivideByZero *arg2 = 0 ; Handle_Standard_DivideByZero *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_DivideByZero_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_DivideByZero, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_DivideByZero_Set" "', argument " "1"" of type '" "Handle_Standard_DivideByZero *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_DivideByZero * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_DivideByZero,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_DivideByZero_Set" "', argument " "2"" of type '" "Handle_Standard_DivideByZero const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_DivideByZero_Set" "', argument " "2"" of type '" "Handle_Standard_DivideByZero const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_DivideByZero * >(argp2); { try { {
+        Handle_Standard_DivideByZero &_result_ref = (arg1)->operator =((Handle_Standard_DivideByZero const &)*arg2);
+        result = (Handle_Standard_DivideByZero *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_DivideByZero, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_DivideByZero_Set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_DivideByZero *arg1 = (Handle_Standard_DivideByZero *) 0 ;
+  Standard_DivideByZero *arg2 = (Standard_DivideByZero *) 0 ; Handle_Standard_DivideByZero *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_DivideByZero_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_DivideByZero, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_DivideByZero_Set" "', argument " "1"" of type '" "Handle_Standard_DivideByZero *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_DivideByZero * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Standard_DivideByZero, 0 |  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_DivideByZero_Set" "', argument " "2"" of type '" "Standard_DivideByZero const *""'");  }
+   arg2 = reinterpret_cast< Standard_DivideByZero * >(argp2); { try { {
+        Handle_Standard_DivideByZero &_result_ref = (arg1)->operator =((Standard_DivideByZero const *)arg2);
+        result = (Handle_Standard_DivideByZero *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_DivideByZero, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_DivideByZero_Set(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_DivideByZero, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_DivideByZero, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Handle_Standard_DivideByZero_Set__SWIG_0(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_DivideByZero, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_DivideByZero, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Handle_Standard_DivideByZero_Set__SWIG_1(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Handle_Standard_DivideByZero_Set'.\n  Possible C/C++ prototypes are:\n""    operator =(Handle_Standard_DivideByZero *,Handle_Standard_DivideByZero const &)\n""    operator =(Handle_Standard_DivideByZero *,Standard_DivideByZero const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_DivideByZero_DownCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_DivideByZero *arg1 = (Handle_Standard_DivideByZero *) 0 ;
+  Handle_Standard_Transient *arg2 = 0 ; Handle_Standard_DivideByZero result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
+  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_DivideByZero_DownCast",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_DivideByZero, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_DivideByZero_DownCast" "', argument " "1"" of type '" "Handle_Standard_DivideByZero *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_DivideByZero * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Transient,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_DivideByZero_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_DivideByZero_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Transient * >(argp2); { try {
+      result = (arg1)->DownCast((Handle_Standard_Transient const &)*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_DivideByZero(static_cast< const Handle_Standard_DivideByZero& >(result))), SWIGTYPE_p_Handle_Standard_DivideByZero, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_DivideByZero_GetObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_DivideByZero *arg1 = (Handle_Standard_DivideByZero *) 0 ;
+  Standard_DivideByZero *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_DivideByZero_GetObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_DivideByZero, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_DivideByZero_GetObject" "', argument " "1"" of type '" "Handle_Standard_DivideByZero *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_DivideByZero * >(argp1); { try {
+      result = (Standard_DivideByZero *)Handle_Standard_DivideByZero_GetObject(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_DivideByZero, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Handle_Standard_DivideByZero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_DivideByZero *arg1 = (Handle_Standard_DivideByZero *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Handle_Standard_DivideByZero",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_DivideByZero, SWIG_POINTER_DISOWN |  0 );
+  if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Handle_Standard_DivideByZero" "', argument " "1"" of type '" "Handle_Standard_DivideByZero *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_DivideByZero * >(argp1); { try { delete_Handle_Standard_DivideByZero(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Handle_Standard_DivideByZero_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Handle_Standard_DivideByZero, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_NoMoreObject__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NoMoreObject *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_NoMoreObject",0,0)) SWIG_fail; { try {
+      result = (Handle_Standard_NoMoreObject *)new Handle_Standard_NoMoreObject(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_NoMoreObject, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_NoMoreObject__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NoMoreObject *arg1 = 0 ; Handle_Standard_NoMoreObject *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_NoMoreObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Handle_Standard_NoMoreObject,  0  | 0); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_NoMoreObject" "', argument " "1"" of type '" "Handle_Standard_NoMoreObject const &""'");  }
+   if (!argp1) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Handle_Standard_NoMoreObject" "', argument " "1"" of type '" "Handle_Standard_NoMoreObject const &""'"); }
+   arg1 = reinterpret_cast< Handle_Standard_NoMoreObject * >(argp1); { try {
+      result = (Handle_Standard_NoMoreObject *)new Handle_Standard_NoMoreObject((Handle_Standard_NoMoreObject const &)*arg1); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_NoMoreObject, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_NoMoreObject__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NoMoreObject *arg1 = (Standard_NoMoreObject *) 0 ;
+  Handle_Standard_NoMoreObject *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_NoMoreObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NoMoreObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_NoMoreObject" "', argument " "1"" of type '" "Standard_NoMoreObject const *""'");  }
+   arg1 = reinterpret_cast< Standard_NoMoreObject * >(argp1); { try {
+      result = (Handle_Standard_NoMoreObject *)new Handle_Standard_NoMoreObject((Standard_NoMoreObject const *)arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_NoMoreObject, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_NoMoreObject(PyObject *self, PyObject *args) { int argc; PyObject *argv[2];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Handle_Standard_NoMoreObject__SWIG_0(self, args);}
+   if (argc == 1) { int _v; int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Handle_Standard_NoMoreObject, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_NoMoreObject__SWIG_1(self, args);}  } 
+  if (argc == 1) { int _v; void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_NoMoreObject, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_NoMoreObject__SWIG_2(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Handle_Standard_NoMoreObject'.\n  Possible C/C++ prototypes are:\n""    Handle_Standard_NoMoreObject()\n""    Handle_Standard_NoMoreObject(Handle_Standard_NoMoreObject const &)\n""    Handle_Standard_NoMoreObject(Standard_NoMoreObject const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_NoMoreObject_Set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NoMoreObject *arg1 = (Handle_Standard_NoMoreObject *) 0 ;
+  Handle_Standard_NoMoreObject *arg2 = 0 ; Handle_Standard_NoMoreObject *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_NoMoreObject_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_NoMoreObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_NoMoreObject_Set" "', argument " "1"" of type '" "Handle_Standard_NoMoreObject *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_NoMoreObject * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_NoMoreObject,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_NoMoreObject_Set" "', argument " "2"" of type '" "Handle_Standard_NoMoreObject const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_NoMoreObject_Set" "', argument " "2"" of type '" "Handle_Standard_NoMoreObject const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_NoMoreObject * >(argp2); { try { {
+        Handle_Standard_NoMoreObject &_result_ref = (arg1)->operator =((Handle_Standard_NoMoreObject const &)*arg2);
+        result = (Handle_Standard_NoMoreObject *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_NoMoreObject, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_NoMoreObject_Set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NoMoreObject *arg1 = (Handle_Standard_NoMoreObject *) 0 ;
+  Standard_NoMoreObject *arg2 = (Standard_NoMoreObject *) 0 ; Handle_Standard_NoMoreObject *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_NoMoreObject_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_NoMoreObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_NoMoreObject_Set" "', argument " "1"" of type '" "Handle_Standard_NoMoreObject *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_NoMoreObject * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Standard_NoMoreObject, 0 |  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_NoMoreObject_Set" "', argument " "2"" of type '" "Standard_NoMoreObject const *""'");  }
+   arg2 = reinterpret_cast< Standard_NoMoreObject * >(argp2); { try { {
+        Handle_Standard_NoMoreObject &_result_ref = (arg1)->operator =((Standard_NoMoreObject const *)arg2);
+        result = (Handle_Standard_NoMoreObject *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_NoMoreObject, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_NoMoreObject_Set(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_NoMoreObject, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_NoMoreObject, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Handle_Standard_NoMoreObject_Set__SWIG_0(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_NoMoreObject, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_NoMoreObject, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Handle_Standard_NoMoreObject_Set__SWIG_1(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Handle_Standard_NoMoreObject_Set'.\n  Possible C/C++ prototypes are:\n""    operator =(Handle_Standard_NoMoreObject *,Handle_Standard_NoMoreObject const &)\n""    operator =(Handle_Standard_NoMoreObject *,Standard_NoMoreObject const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_NoMoreObject_DownCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NoMoreObject *arg1 = (Handle_Standard_NoMoreObject *) 0 ;
+  Handle_Standard_Transient *arg2 = 0 ; Handle_Standard_NoMoreObject result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
+  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_NoMoreObject_DownCast",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_NoMoreObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_NoMoreObject_DownCast" "', argument " "1"" of type '" "Handle_Standard_NoMoreObject *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_NoMoreObject * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Transient,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_NoMoreObject_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_NoMoreObject_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Transient * >(argp2); { try {
+      result = (arg1)->DownCast((Handle_Standard_Transient const &)*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_NoMoreObject(static_cast< const Handle_Standard_NoMoreObject& >(result))), SWIGTYPE_p_Handle_Standard_NoMoreObject, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_NoMoreObject_GetObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NoMoreObject *arg1 = (Handle_Standard_NoMoreObject *) 0 ;
+  Standard_NoMoreObject *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_NoMoreObject_GetObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_NoMoreObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_NoMoreObject_GetObject" "', argument " "1"" of type '" "Handle_Standard_NoMoreObject *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_NoMoreObject * >(argp1); { try {
+      result = (Standard_NoMoreObject *)Handle_Standard_NoMoreObject_GetObject(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_NoMoreObject, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Handle_Standard_NoMoreObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NoMoreObject *arg1 = (Handle_Standard_NoMoreObject *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Handle_Standard_NoMoreObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_NoMoreObject, SWIG_POINTER_DISOWN |  0 );
+  if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Handle_Standard_NoMoreObject" "', argument " "1"" of type '" "Handle_Standard_NoMoreObject *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_NoMoreObject * >(argp1); { try { delete_Handle_Standard_NoMoreObject(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Handle_Standard_NoMoreObject_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Handle_Standard_NoMoreObject, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_ProgramError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_ProgramError *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_ProgramError",0,0)) SWIG_fail; { try {
+      result = (Handle_Standard_ProgramError *)new Handle_Standard_ProgramError(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_ProgramError, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_ProgramError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_ProgramError *arg1 = 0 ; Handle_Standard_ProgramError *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_ProgramError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Handle_Standard_ProgramError,  0  | 0); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_ProgramError" "', argument " "1"" of type '" "Handle_Standard_ProgramError const &""'");  }
+   if (!argp1) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Handle_Standard_ProgramError" "', argument " "1"" of type '" "Handle_Standard_ProgramError const &""'"); }
+   arg1 = reinterpret_cast< Handle_Standard_ProgramError * >(argp1); { try {
+      result = (Handle_Standard_ProgramError *)new Handle_Standard_ProgramError((Handle_Standard_ProgramError const &)*arg1); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_ProgramError, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_ProgramError__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ProgramError *arg1 = (Standard_ProgramError *) 0 ;
+  Handle_Standard_ProgramError *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_ProgramError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ProgramError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_ProgramError" "', argument " "1"" of type '" "Standard_ProgramError const *""'");  }
+   arg1 = reinterpret_cast< Standard_ProgramError * >(argp1); { try {
+      result = (Handle_Standard_ProgramError *)new Handle_Standard_ProgramError((Standard_ProgramError const *)arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_ProgramError, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_ProgramError(PyObject *self, PyObject *args) { int argc; PyObject *argv[2];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Handle_Standard_ProgramError__SWIG_0(self, args);}
+   if (argc == 1) { int _v; int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Handle_Standard_ProgramError, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_ProgramError__SWIG_1(self, args);}  } 
+  if (argc == 1) { int _v; void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_ProgramError, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_ProgramError__SWIG_2(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Handle_Standard_ProgramError'.\n  Possible C/C++ prototypes are:\n""    Handle_Standard_ProgramError()\n""    Handle_Standard_ProgramError(Handle_Standard_ProgramError const &)\n""    Handle_Standard_ProgramError(Standard_ProgramError const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_ProgramError_Set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_ProgramError *arg1 = (Handle_Standard_ProgramError *) 0 ;
+  Handle_Standard_ProgramError *arg2 = 0 ; Handle_Standard_ProgramError *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_ProgramError_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_ProgramError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_ProgramError_Set" "', argument " "1"" of type '" "Handle_Standard_ProgramError *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_ProgramError * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_ProgramError,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_ProgramError_Set" "', argument " "2"" of type '" "Handle_Standard_ProgramError const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_ProgramError_Set" "', argument " "2"" of type '" "Handle_Standard_ProgramError const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_ProgramError * >(argp2); { try { {
+        Handle_Standard_ProgramError &_result_ref = (arg1)->operator =((Handle_Standard_ProgramError const &)*arg2);
+        result = (Handle_Standard_ProgramError *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_ProgramError, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_ProgramError_Set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_ProgramError *arg1 = (Handle_Standard_ProgramError *) 0 ;
+  Standard_ProgramError *arg2 = (Standard_ProgramError *) 0 ; Handle_Standard_ProgramError *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_ProgramError_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_ProgramError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_ProgramError_Set" "', argument " "1"" of type '" "Handle_Standard_ProgramError *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_ProgramError * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Standard_ProgramError, 0 |  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_ProgramError_Set" "', argument " "2"" of type '" "Standard_ProgramError const *""'");  }
+   arg2 = reinterpret_cast< Standard_ProgramError * >(argp2); { try { {
+        Handle_Standard_ProgramError &_result_ref = (arg1)->operator =((Standard_ProgramError const *)arg2);
+        result = (Handle_Standard_ProgramError *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_ProgramError, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_ProgramError_Set(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_ProgramError, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_ProgramError, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Handle_Standard_ProgramError_Set__SWIG_0(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_ProgramError, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_ProgramError, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Handle_Standard_ProgramError_Set__SWIG_1(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Handle_Standard_ProgramError_Set'.\n  Possible C/C++ prototypes are:\n""    operator =(Handle_Standard_ProgramError *,Handle_Standard_ProgramError const &)\n""    operator =(Handle_Standard_ProgramError *,Standard_ProgramError const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_ProgramError_DownCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_ProgramError *arg1 = (Handle_Standard_ProgramError *) 0 ;
+  Handle_Standard_Transient *arg2 = 0 ; Handle_Standard_ProgramError result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
+  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_ProgramError_DownCast",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_ProgramError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_ProgramError_DownCast" "', argument " "1"" of type '" "Handle_Standard_ProgramError *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_ProgramError * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Transient,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_ProgramError_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_ProgramError_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Transient * >(argp2); { try {
+      result = (arg1)->DownCast((Handle_Standard_Transient const &)*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_ProgramError(static_cast< const Handle_Standard_ProgramError& >(result))), SWIGTYPE_p_Handle_Standard_ProgramError, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_ProgramError_GetObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_ProgramError *arg1 = (Handle_Standard_ProgramError *) 0 ;
+  Standard_ProgramError *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_ProgramError_GetObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_ProgramError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_ProgramError_GetObject" "', argument " "1"" of type '" "Handle_Standard_ProgramError *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_ProgramError * >(argp1); { try {
+      result = (Standard_ProgramError *)Handle_Standard_ProgramError_GetObject(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_ProgramError, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Handle_Standard_ProgramError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_ProgramError *arg1 = (Handle_Standard_ProgramError *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Handle_Standard_ProgramError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_ProgramError, SWIG_POINTER_DISOWN |  0 );
+  if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Handle_Standard_ProgramError" "', argument " "1"" of type '" "Handle_Standard_ProgramError *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_ProgramError * >(argp1); { try { delete_Handle_Standard_ProgramError(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Handle_Standard_ProgramError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Handle_Standard_ProgramError, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_NotImplemented__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NotImplemented *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_NotImplemented",0,0)) SWIG_fail; { try {
+      result = (Handle_Standard_NotImplemented *)new Handle_Standard_NotImplemented(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_NotImplemented, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_NotImplemented__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NotImplemented *arg1 = 0 ; Handle_Standard_NotImplemented *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_NotImplemented",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Handle_Standard_NotImplemented,  0  | 0); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_NotImplemented" "', argument " "1"" of type '" "Handle_Standard_NotImplemented const &""'");  }
+   if (!argp1) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Handle_Standard_NotImplemented" "', argument " "1"" of type '" "Handle_Standard_NotImplemented const &""'"); }
+   arg1 = reinterpret_cast< Handle_Standard_NotImplemented * >(argp1); { try {
+      result = (Handle_Standard_NotImplemented *)new Handle_Standard_NotImplemented((Handle_Standard_NotImplemented const &)*arg1); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_NotImplemented, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_NotImplemented__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NotImplemented *arg1 = (Standard_NotImplemented *) 0 ;
+  Handle_Standard_NotImplemented *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_NotImplemented",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NotImplemented, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_NotImplemented" "', argument " "1"" of type '" "Standard_NotImplemented const *""'");  }
+   arg1 = reinterpret_cast< Standard_NotImplemented * >(argp1); { try {
+      result = (Handle_Standard_NotImplemented *)new Handle_Standard_NotImplemented((Standard_NotImplemented const *)arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_NotImplemented, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_NotImplemented(PyObject *self, PyObject *args) { int argc; PyObject *argv[2];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) {
+    return _wrap_new_Handle_Standard_NotImplemented__SWIG_0(self, args);}  if (argc == 1) { int _v;
+    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Handle_Standard_NotImplemented, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Handle_Standard_NotImplemented__SWIG_1(self, args);}  }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_NotImplemented, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Handle_Standard_NotImplemented__SWIG_2(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Handle_Standard_NotImplemented'.\n  Possible C/C++ prototypes are:\n""    Handle_Standard_NotImplemented()\n""    Handle_Standard_NotImplemented(Handle_Standard_NotImplemented const &)\n""    Handle_Standard_NotImplemented(Standard_NotImplemented const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_NotImplemented_Set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NotImplemented *arg1 = (Handle_Standard_NotImplemented *) 0 ;
+  Handle_Standard_NotImplemented *arg2 = 0 ; Handle_Standard_NotImplemented *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_NotImplemented_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_NotImplemented, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_NotImplemented_Set" "', argument " "1"" of type '" "Handle_Standard_NotImplemented *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_NotImplemented * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_NotImplemented,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_NotImplemented_Set" "', argument " "2"" of type '" "Handle_Standard_NotImplemented const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_NotImplemented_Set" "', argument " "2"" of type '" "Handle_Standard_NotImplemented const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_NotImplemented * >(argp2); { try { {
+        Handle_Standard_NotImplemented &_result_ref = (arg1)->operator =((Handle_Standard_NotImplemented const &)*arg2);
+        result = (Handle_Standard_NotImplemented *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_NotImplemented, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_NotImplemented_Set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NotImplemented *arg1 = (Handle_Standard_NotImplemented *) 0 ;
+  Standard_NotImplemented *arg2 = (Standard_NotImplemented *) 0 ; Handle_Standard_NotImplemented *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_NotImplemented_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_NotImplemented, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_NotImplemented_Set" "', argument " "1"" of type '" "Handle_Standard_NotImplemented *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_NotImplemented * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Standard_NotImplemented, 0 |  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_NotImplemented_Set" "', argument " "2"" of type '" "Standard_NotImplemented const *""'");  }
+   arg2 = reinterpret_cast< Standard_NotImplemented * >(argp2); { try { {
+        Handle_Standard_NotImplemented &_result_ref = (arg1)->operator =((Standard_NotImplemented const *)arg2);
+        result = (Handle_Standard_NotImplemented *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_NotImplemented, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_NotImplemented_Set(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_NotImplemented, 0); _v = SWIG_CheckState(res);
+    if (_v) { int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_NotImplemented, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Handle_Standard_NotImplemented_Set__SWIG_0(self, args);}  }  }  if (argc == 2) { int _v;
+    void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_NotImplemented, 0);
+    _v = SWIG_CheckState(res); if (_v) { void *vptr = 0;
+      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_NotImplemented, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Handle_Standard_NotImplemented_Set__SWIG_1(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Handle_Standard_NotImplemented_Set'.\n  Possible C/C++ prototypes are:\n""    operator =(Handle_Standard_NotImplemented *,Handle_Standard_NotImplemented const &)\n""    operator =(Handle_Standard_NotImplemented *,Standard_NotImplemented const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_NotImplemented_DownCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NotImplemented *arg1 = (Handle_Standard_NotImplemented *) 0 ;
+  Handle_Standard_Transient *arg2 = 0 ; Handle_Standard_NotImplemented result; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_NotImplemented_DownCast",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_NotImplemented, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_NotImplemented_DownCast" "', argument " "1"" of type '" "Handle_Standard_NotImplemented *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_NotImplemented * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Transient,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_NotImplemented_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_NotImplemented_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Transient * >(argp2); { try {
+      result = (arg1)->DownCast((Handle_Standard_Transient const &)*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_NotImplemented(static_cast< const Handle_Standard_NotImplemented& >(result))), SWIGTYPE_p_Handle_Standard_NotImplemented, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_NotImplemented_GetObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NotImplemented *arg1 = (Handle_Standard_NotImplemented *) 0 ;
+  Standard_NotImplemented *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_NotImplemented_GetObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_NotImplemented, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_NotImplemented_GetObject" "', argument " "1"" of type '" "Handle_Standard_NotImplemented *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_NotImplemented * >(argp1); { try {
+      result = (Standard_NotImplemented *)Handle_Standard_NotImplemented_GetObject(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_NotImplemented, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Handle_Standard_NotImplemented(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NotImplemented *arg1 = (Handle_Standard_NotImplemented *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Handle_Standard_NotImplemented",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_NotImplemented, SWIG_POINTER_DISOWN |  0 );
+  if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Handle_Standard_NotImplemented" "', argument " "1"" of type '" "Handle_Standard_NotImplemented *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_NotImplemented * >(argp1); { try { delete_Handle_Standard_NotImplemented(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Handle_Standard_NotImplemented_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Handle_Standard_NotImplemented, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_NullObject__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NullObject *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_NullObject",0,0)) SWIG_fail; { try {
+      result = (Handle_Standard_NullObject *)new Handle_Standard_NullObject(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_NullObject, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_NullObject__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NullObject *arg1 = 0 ; Handle_Standard_NullObject *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_NullObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Handle_Standard_NullObject,  0  | 0); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_NullObject" "', argument " "1"" of type '" "Handle_Standard_NullObject const &""'");  }
+   if (!argp1) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Handle_Standard_NullObject" "', argument " "1"" of type '" "Handle_Standard_NullObject const &""'"); }
+   arg1 = reinterpret_cast< Handle_Standard_NullObject * >(argp1); { try {
+      result = (Handle_Standard_NullObject *)new Handle_Standard_NullObject((Handle_Standard_NullObject const &)*arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_NullObject, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_NullObject__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NullObject *arg1 = (Standard_NullObject *) 0 ; Handle_Standard_NullObject *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_NullObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NullObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_NullObject" "', argument " "1"" of type '" "Standard_NullObject const *""'");  }
+   arg1 = reinterpret_cast< Standard_NullObject * >(argp1); { try {
+      result = (Handle_Standard_NullObject *)new Handle_Standard_NullObject((Standard_NullObject const *)arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_NullObject, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_NullObject(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Handle_Standard_NullObject__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Handle_Standard_NullObject, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_NullObject__SWIG_1(self, args);}  }  if (argc == 1) {
+    int _v; void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_NullObject, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_NullObject__SWIG_2(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Handle_Standard_NullObject'.\n  Possible C/C++ prototypes are:\n""    Handle_Standard_NullObject()\n""    Handle_Standard_NullObject(Handle_Standard_NullObject const &)\n""    Handle_Standard_NullObject(Standard_NullObject const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_NullObject_Set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NullObject *arg1 = (Handle_Standard_NullObject *) 0 ;
+  Handle_Standard_NullObject *arg2 = 0 ; Handle_Standard_NullObject *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_NullObject_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_NullObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_NullObject_Set" "', argument " "1"" of type '" "Handle_Standard_NullObject *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_NullObject * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_NullObject,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_NullObject_Set" "', argument " "2"" of type '" "Handle_Standard_NullObject const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_NullObject_Set" "', argument " "2"" of type '" "Handle_Standard_NullObject const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_NullObject * >(argp2); { try { {
+        Handle_Standard_NullObject &_result_ref = (arg1)->operator =((Handle_Standard_NullObject const &)*arg2);
+        result = (Handle_Standard_NullObject *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_NullObject, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_NullObject_Set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NullObject *arg1 = (Handle_Standard_NullObject *) 0 ;
+  Standard_NullObject *arg2 = (Standard_NullObject *) 0 ; Handle_Standard_NullObject *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_NullObject_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_NullObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_NullObject_Set" "', argument " "1"" of type '" "Handle_Standard_NullObject *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_NullObject * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Standard_NullObject, 0 |  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_NullObject_Set" "', argument " "2"" of type '" "Standard_NullObject const *""'");  }
+   arg2 = reinterpret_cast< Standard_NullObject * >(argp2); { try { {
+        Handle_Standard_NullObject &_result_ref = (arg1)->operator =((Standard_NullObject const *)arg2);
+        result = (Handle_Standard_NullObject *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_NullObject, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_NullObject_Set(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_NullObject, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_NullObject, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Handle_Standard_NullObject_Set__SWIG_0(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_NullObject, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_NullObject, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Handle_Standard_NullObject_Set__SWIG_1(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Handle_Standard_NullObject_Set'.\n  Possible C/C++ prototypes are:\n""    operator =(Handle_Standard_NullObject *,Handle_Standard_NullObject const &)\n""    operator =(Handle_Standard_NullObject *,Standard_NullObject const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_NullObject_DownCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NullObject *arg1 = (Handle_Standard_NullObject *) 0 ;
+  Handle_Standard_Transient *arg2 = 0 ; Handle_Standard_NullObject result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
+  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_NullObject_DownCast",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_NullObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_NullObject_DownCast" "', argument " "1"" of type '" "Handle_Standard_NullObject *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_NullObject * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Transient,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_NullObject_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_NullObject_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Transient * >(argp2); { try {
+      result = (arg1)->DownCast((Handle_Standard_Transient const &)*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_NullObject(static_cast< const Handle_Standard_NullObject& >(result))), SWIGTYPE_p_Handle_Standard_NullObject, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_NullObject_GetObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NullObject *arg1 = (Handle_Standard_NullObject *) 0 ;
+  Standard_NullObject *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_NullObject_GetObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_NullObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_NullObject_GetObject" "', argument " "1"" of type '" "Handle_Standard_NullObject *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_NullObject * >(argp1); { try {
+      result = (Standard_NullObject *)Handle_Standard_NullObject_GetObject(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_NullObject, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Handle_Standard_NullObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NullObject *arg1 = (Handle_Standard_NullObject *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Handle_Standard_NullObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_NullObject, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Handle_Standard_NullObject" "', argument " "1"" of type '" "Handle_Standard_NullObject *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_NullObject * >(argp1); { try { delete_Handle_Standard_NullObject(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Handle_Standard_NullObject_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Handle_Standard_NullObject, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_AbortiveTransaction__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_AbortiveTransaction *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_AbortiveTransaction",0,0)) SWIG_fail; { try {
+      result = (Handle_Standard_AbortiveTransaction *)new Handle_Standard_AbortiveTransaction(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_AbortiveTransaction, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_AbortiveTransaction__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_AbortiveTransaction *arg1 = 0 ; Handle_Standard_AbortiveTransaction *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_AbortiveTransaction",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Handle_Standard_AbortiveTransaction,  0  | 0); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_AbortiveTransaction" "', argument " "1"" of type '" "Handle_Standard_AbortiveTransaction const &""'");  }
+   if (!argp1) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Handle_Standard_AbortiveTransaction" "', argument " "1"" of type '" "Handle_Standard_AbortiveTransaction const &""'"); }
+   arg1 = reinterpret_cast< Handle_Standard_AbortiveTransaction * >(argp1); { try {
+      result = (Handle_Standard_AbortiveTransaction *)new Handle_Standard_AbortiveTransaction((Handle_Standard_AbortiveTransaction const &)*arg1); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_AbortiveTransaction, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_AbortiveTransaction__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_AbortiveTransaction *arg1 = (Standard_AbortiveTransaction *) 0 ;
+  Handle_Standard_AbortiveTransaction *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_AbortiveTransaction",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_AbortiveTransaction, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_AbortiveTransaction" "', argument " "1"" of type '" "Standard_AbortiveTransaction const *""'");  }
+   arg1 = reinterpret_cast< Standard_AbortiveTransaction * >(argp1); { try {
+      result = (Handle_Standard_AbortiveTransaction *)new Handle_Standard_AbortiveTransaction((Standard_AbortiveTransaction const *)arg1); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_AbortiveTransaction, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_AbortiveTransaction(PyObject *self, PyObject *args) { int argc;
+  PyObject *argv[2]; int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args);
+  for (ii = 0; (ii < argc) && (ii < 1); ii++) { argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) {
+    return _wrap_new_Handle_Standard_AbortiveTransaction__SWIG_0(self, args);}  if (argc == 1) { int _v;
+    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Handle_Standard_AbortiveTransaction, 0); _v = SWIG_CheckState(res);
+    if (_v) { return _wrap_new_Handle_Standard_AbortiveTransaction__SWIG_1(self, args);}  }  if (argc == 1) { int _v;
+    void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_AbortiveTransaction, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_AbortiveTransaction__SWIG_2(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Handle_Standard_AbortiveTransaction'.\n  Possible C/C++ prototypes are:\n""    Handle_Standard_AbortiveTransaction()\n""    Handle_Standard_AbortiveTransaction(Handle_Standard_AbortiveTransaction const &)\n""    Handle_Standard_AbortiveTransaction(Standard_AbortiveTransaction const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_AbortiveTransaction_Set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_AbortiveTransaction *arg1 = (Handle_Standard_AbortiveTransaction *) 0 ;
+  Handle_Standard_AbortiveTransaction *arg2 = 0 ; Handle_Standard_AbortiveTransaction *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_AbortiveTransaction_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_AbortiveTransaction, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_AbortiveTransaction_Set" "', argument " "1"" of type '" "Handle_Standard_AbortiveTransaction *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_AbortiveTransaction * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_AbortiveTransaction,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_AbortiveTransaction_Set" "', argument " "2"" of type '" "Handle_Standard_AbortiveTransaction const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_AbortiveTransaction_Set" "', argument " "2"" of type '" "Handle_Standard_AbortiveTransaction const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_AbortiveTransaction * >(argp2); { try { {
+        Handle_Standard_AbortiveTransaction &_result_ref = (arg1)->operator =((Handle_Standard_AbortiveTransaction const &)*arg2);
+        result = (Handle_Standard_AbortiveTransaction *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_AbortiveTransaction, 0 |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_AbortiveTransaction_Set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_AbortiveTransaction *arg1 = (Handle_Standard_AbortiveTransaction *) 0 ;
+  Standard_AbortiveTransaction *arg2 = (Standard_AbortiveTransaction *) 0 ; Handle_Standard_AbortiveTransaction *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_AbortiveTransaction_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_AbortiveTransaction, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_AbortiveTransaction_Set" "', argument " "1"" of type '" "Handle_Standard_AbortiveTransaction *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_AbortiveTransaction * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Standard_AbortiveTransaction, 0 |  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_AbortiveTransaction_Set" "', argument " "2"" of type '" "Standard_AbortiveTransaction const *""'");  }
+   arg2 = reinterpret_cast< Standard_AbortiveTransaction * >(argp2); { try { {
+        Handle_Standard_AbortiveTransaction &_result_ref = (arg1)->operator =((Standard_AbortiveTransaction const *)arg2);
+        result = (Handle_Standard_AbortiveTransaction *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_AbortiveTransaction, 0 |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_AbortiveTransaction_Set(PyObject *self, PyObject *args) { int argc;
+  PyObject *argv[3]; int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args);
+  for (ii = 0; (ii < argc) && (ii < 2); ii++) { argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v;
+    void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_AbortiveTransaction, 0);
+    _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_AbortiveTransaction, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Handle_Standard_AbortiveTransaction_Set__SWIG_0(self, args);}  }  }  if (argc == 2) { int _v;
+    void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_AbortiveTransaction, 0);
+    _v = SWIG_CheckState(res); if (_v) { void *vptr = 0;
+      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_AbortiveTransaction, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Handle_Standard_AbortiveTransaction_Set__SWIG_1(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Handle_Standard_AbortiveTransaction_Set'.\n  Possible C/C++ prototypes are:\n""    operator =(Handle_Standard_AbortiveTransaction *,Handle_Standard_AbortiveTransaction const &)\n""    operator =(Handle_Standard_AbortiveTransaction *,Standard_AbortiveTransaction const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_AbortiveTransaction_DownCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_AbortiveTransaction *arg1 = (Handle_Standard_AbortiveTransaction *) 0 ;
+  Handle_Standard_Transient *arg2 = 0 ; Handle_Standard_AbortiveTransaction result; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_AbortiveTransaction_DownCast",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_AbortiveTransaction, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_AbortiveTransaction_DownCast" "', argument " "1"" of type '" "Handle_Standard_AbortiveTransaction *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_AbortiveTransaction * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Transient,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_AbortiveTransaction_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_AbortiveTransaction_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Transient * >(argp2); { try {
+      result = (arg1)->DownCast((Handle_Standard_Transient const &)*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_AbortiveTransaction(static_cast< const Handle_Standard_AbortiveTransaction& >(result))), SWIGTYPE_p_Handle_Standard_AbortiveTransaction, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_AbortiveTransaction_GetObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_AbortiveTransaction *arg1 = (Handle_Standard_AbortiveTransaction *) 0 ;
+  Standard_AbortiveTransaction *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_AbortiveTransaction_GetObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_AbortiveTransaction, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_AbortiveTransaction_GetObject" "', argument " "1"" of type '" "Handle_Standard_AbortiveTransaction *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_AbortiveTransaction * >(argp1); { try {
+      result = (Standard_AbortiveTransaction *)Handle_Standard_AbortiveTransaction_GetObject(arg1); }   catch(Standard_Failure)
+    { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_AbortiveTransaction, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Handle_Standard_AbortiveTransaction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_AbortiveTransaction *arg1 = (Handle_Standard_AbortiveTransaction *) 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Handle_Standard_AbortiveTransaction",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_AbortiveTransaction, SWIG_POINTER_DISOWN |  0 );
+  if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Handle_Standard_AbortiveTransaction" "', argument " "1"" of type '" "Handle_Standard_AbortiveTransaction *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_AbortiveTransaction * >(argp1); { try {
+      delete_Handle_Standard_AbortiveTransaction(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Handle_Standard_AbortiveTransaction_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Handle_Standard_AbortiveTransaction, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_DimensionError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_DimensionError *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_DimensionError",0,0)) SWIG_fail; { try {
+      result = (Handle_Standard_DimensionError *)new Handle_Standard_DimensionError(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_DimensionError, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_DimensionError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_DimensionError *arg1 = 0 ; Handle_Standard_DimensionError *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_DimensionError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Handle_Standard_DimensionError,  0  | 0); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_DimensionError" "', argument " "1"" of type '" "Handle_Standard_DimensionError const &""'");  }
+   if (!argp1) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Handle_Standard_DimensionError" "', argument " "1"" of type '" "Handle_Standard_DimensionError const &""'"); }
+   arg1 = reinterpret_cast< Handle_Standard_DimensionError * >(argp1); { try {
+      result = (Handle_Standard_DimensionError *)new Handle_Standard_DimensionError((Handle_Standard_DimensionError const &)*arg1); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_DimensionError, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_DimensionError__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DimensionError *arg1 = (Standard_DimensionError *) 0 ;
+  Handle_Standard_DimensionError *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_DimensionError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DimensionError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_DimensionError" "', argument " "1"" of type '" "Standard_DimensionError const *""'");  }
+   arg1 = reinterpret_cast< Standard_DimensionError * >(argp1); { try {
+      result = (Handle_Standard_DimensionError *)new Handle_Standard_DimensionError((Standard_DimensionError const *)arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_DimensionError, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_DimensionError(PyObject *self, PyObject *args) { int argc; PyObject *argv[2];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) {
+    return _wrap_new_Handle_Standard_DimensionError__SWIG_0(self, args);}  if (argc == 1) { int _v;
+    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Handle_Standard_DimensionError, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Handle_Standard_DimensionError__SWIG_1(self, args);}  }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_DimensionError, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Handle_Standard_DimensionError__SWIG_2(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Handle_Standard_DimensionError'.\n  Possible C/C++ prototypes are:\n""    Handle_Standard_DimensionError()\n""    Handle_Standard_DimensionError(Handle_Standard_DimensionError const &)\n""    Handle_Standard_DimensionError(Standard_DimensionError const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_DimensionError_Set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_DimensionError *arg1 = (Handle_Standard_DimensionError *) 0 ;
+  Handle_Standard_DimensionError *arg2 = 0 ; Handle_Standard_DimensionError *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_DimensionError_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_DimensionError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_DimensionError_Set" "', argument " "1"" of type '" "Handle_Standard_DimensionError *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_DimensionError * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_DimensionError,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_DimensionError_Set" "', argument " "2"" of type '" "Handle_Standard_DimensionError const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_DimensionError_Set" "', argument " "2"" of type '" "Handle_Standard_DimensionError const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_DimensionError * >(argp2); { try { {
+        Handle_Standard_DimensionError &_result_ref = (arg1)->operator =((Handle_Standard_DimensionError const &)*arg2);
+        result = (Handle_Standard_DimensionError *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_DimensionError, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_DimensionError_Set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_DimensionError *arg1 = (Handle_Standard_DimensionError *) 0 ;
+  Standard_DimensionError *arg2 = (Standard_DimensionError *) 0 ; Handle_Standard_DimensionError *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_DimensionError_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_DimensionError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_DimensionError_Set" "', argument " "1"" of type '" "Handle_Standard_DimensionError *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_DimensionError * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Standard_DimensionError, 0 |  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_DimensionError_Set" "', argument " "2"" of type '" "Standard_DimensionError const *""'");  }
+   arg2 = reinterpret_cast< Standard_DimensionError * >(argp2); { try { {
+        Handle_Standard_DimensionError &_result_ref = (arg1)->operator =((Standard_DimensionError const *)arg2);
+        result = (Handle_Standard_DimensionError *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_DimensionError, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_DimensionError_Set(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_DimensionError, 0); _v = SWIG_CheckState(res);
+    if (_v) { int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_DimensionError, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Handle_Standard_DimensionError_Set__SWIG_0(self, args);}  }  }  if (argc == 2) { int _v;
+    void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_DimensionError, 0);
+    _v = SWIG_CheckState(res); if (_v) { void *vptr = 0;
+      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_DimensionError, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Handle_Standard_DimensionError_Set__SWIG_1(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Handle_Standard_DimensionError_Set'.\n  Possible C/C++ prototypes are:\n""    operator =(Handle_Standard_DimensionError *,Handle_Standard_DimensionError const &)\n""    operator =(Handle_Standard_DimensionError *,Standard_DimensionError const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_DimensionError_DownCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_DimensionError *arg1 = (Handle_Standard_DimensionError *) 0 ;
+  Handle_Standard_Transient *arg2 = 0 ; Handle_Standard_DimensionError result; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_DimensionError_DownCast",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_DimensionError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_DimensionError_DownCast" "', argument " "1"" of type '" "Handle_Standard_DimensionError *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_DimensionError * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Transient,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_DimensionError_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_DimensionError_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Transient * >(argp2); { try {
+      result = (arg1)->DownCast((Handle_Standard_Transient const &)*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_DimensionError(static_cast< const Handle_Standard_DimensionError& >(result))), SWIGTYPE_p_Handle_Standard_DimensionError, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_DimensionError_GetObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_DimensionError *arg1 = (Handle_Standard_DimensionError *) 0 ;
+  Standard_DimensionError *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_DimensionError_GetObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_DimensionError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_DimensionError_GetObject" "', argument " "1"" of type '" "Handle_Standard_DimensionError *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_DimensionError * >(argp1); { try {
+      result = (Standard_DimensionError *)Handle_Standard_DimensionError_GetObject(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_DimensionError, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Handle_Standard_DimensionError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_DimensionError *arg1 = (Handle_Standard_DimensionError *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Handle_Standard_DimensionError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_DimensionError, SWIG_POINTER_DISOWN |  0 );
+  if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Handle_Standard_DimensionError" "', argument " "1"" of type '" "Handle_Standard_DimensionError *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_DimensionError * >(argp1); { try { delete_Handle_Standard_DimensionError(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Handle_Standard_DimensionError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Handle_Standard_DimensionError, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_LicenseError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_LicenseError *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_LicenseError",0,0)) SWIG_fail; { try {
+      result = (Handle_Standard_LicenseError *)new Handle_Standard_LicenseError(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_LicenseError, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_LicenseError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_LicenseError *arg1 = 0 ; Handle_Standard_LicenseError *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_LicenseError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Handle_Standard_LicenseError,  0  | 0); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_LicenseError" "', argument " "1"" of type '" "Handle_Standard_LicenseError const &""'");  }
+   if (!argp1) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Handle_Standard_LicenseError" "', argument " "1"" of type '" "Handle_Standard_LicenseError const &""'"); }
+   arg1 = reinterpret_cast< Handle_Standard_LicenseError * >(argp1); { try {
+      result = (Handle_Standard_LicenseError *)new Handle_Standard_LicenseError((Handle_Standard_LicenseError const &)*arg1); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_LicenseError, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_LicenseError__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_LicenseError *arg1 = (Standard_LicenseError *) 0 ;
+  Handle_Standard_LicenseError *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_LicenseError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_LicenseError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_LicenseError" "', argument " "1"" of type '" "Standard_LicenseError const *""'");  }
+   arg1 = reinterpret_cast< Standard_LicenseError * >(argp1); { try {
+      result = (Handle_Standard_LicenseError *)new Handle_Standard_LicenseError((Standard_LicenseError const *)arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_LicenseError, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_LicenseError(PyObject *self, PyObject *args) { int argc; PyObject *argv[2];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Handle_Standard_LicenseError__SWIG_0(self, args);}
+   if (argc == 1) { int _v; int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Handle_Standard_LicenseError, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_LicenseError__SWIG_1(self, args);}  } 
+  if (argc == 1) { int _v; void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_LicenseError, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_LicenseError__SWIG_2(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Handle_Standard_LicenseError'.\n  Possible C/C++ prototypes are:\n""    Handle_Standard_LicenseError()\n""    Handle_Standard_LicenseError(Handle_Standard_LicenseError const &)\n""    Handle_Standard_LicenseError(Standard_LicenseError const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_LicenseError_Set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_LicenseError *arg1 = (Handle_Standard_LicenseError *) 0 ;
+  Handle_Standard_LicenseError *arg2 = 0 ; Handle_Standard_LicenseError *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_LicenseError_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_LicenseError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_LicenseError_Set" "', argument " "1"" of type '" "Handle_Standard_LicenseError *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_LicenseError * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_LicenseError,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_LicenseError_Set" "', argument " "2"" of type '" "Handle_Standard_LicenseError const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_LicenseError_Set" "', argument " "2"" of type '" "Handle_Standard_LicenseError const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_LicenseError * >(argp2); { try { {
+        Handle_Standard_LicenseError &_result_ref = (arg1)->operator =((Handle_Standard_LicenseError const &)*arg2);
+        result = (Handle_Standard_LicenseError *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_LicenseError, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_LicenseError_Set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_LicenseError *arg1 = (Handle_Standard_LicenseError *) 0 ;
+  Standard_LicenseError *arg2 = (Standard_LicenseError *) 0 ; Handle_Standard_LicenseError *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_LicenseError_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_LicenseError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_LicenseError_Set" "', argument " "1"" of type '" "Handle_Standard_LicenseError *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_LicenseError * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Standard_LicenseError, 0 |  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_LicenseError_Set" "', argument " "2"" of type '" "Standard_LicenseError const *""'");  }
+   arg2 = reinterpret_cast< Standard_LicenseError * >(argp2); { try { {
+        Handle_Standard_LicenseError &_result_ref = (arg1)->operator =((Standard_LicenseError const *)arg2);
+        result = (Handle_Standard_LicenseError *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_LicenseError, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_LicenseError_Set(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_LicenseError, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_LicenseError, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Handle_Standard_LicenseError_Set__SWIG_0(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_LicenseError, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_LicenseError, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Handle_Standard_LicenseError_Set__SWIG_1(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Handle_Standard_LicenseError_Set'.\n  Possible C/C++ prototypes are:\n""    operator =(Handle_Standard_LicenseError *,Handle_Standard_LicenseError const &)\n""    operator =(Handle_Standard_LicenseError *,Standard_LicenseError const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_LicenseError_DownCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_LicenseError *arg1 = (Handle_Standard_LicenseError *) 0 ;
+  Handle_Standard_Transient *arg2 = 0 ; Handle_Standard_LicenseError result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
+  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_LicenseError_DownCast",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_LicenseError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_LicenseError_DownCast" "', argument " "1"" of type '" "Handle_Standard_LicenseError *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_LicenseError * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Transient,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_LicenseError_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_LicenseError_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Transient * >(argp2); { try {
+      result = (arg1)->DownCast((Handle_Standard_Transient const &)*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_LicenseError(static_cast< const Handle_Standard_LicenseError& >(result))), SWIGTYPE_p_Handle_Standard_LicenseError, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_LicenseError_GetObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_LicenseError *arg1 = (Handle_Standard_LicenseError *) 0 ;
+  Standard_LicenseError *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_LicenseError_GetObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_LicenseError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_LicenseError_GetObject" "', argument " "1"" of type '" "Handle_Standard_LicenseError *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_LicenseError * >(argp1); { try {
+      result = (Standard_LicenseError *)Handle_Standard_LicenseError_GetObject(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_LicenseError, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Handle_Standard_LicenseError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_LicenseError *arg1 = (Handle_Standard_LicenseError *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Handle_Standard_LicenseError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_LicenseError, SWIG_POINTER_DISOWN |  0 );
+  if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Handle_Standard_LicenseError" "', argument " "1"" of type '" "Handle_Standard_LicenseError *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_LicenseError * >(argp1); { try { delete_Handle_Standard_LicenseError(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Handle_Standard_LicenseError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Handle_Standard_LicenseError, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_NoSuchObject__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NoSuchObject *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_NoSuchObject",0,0)) SWIG_fail; { try {
+      result = (Handle_Standard_NoSuchObject *)new Handle_Standard_NoSuchObject(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_NoSuchObject, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_NoSuchObject__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NoSuchObject *arg1 = 0 ; Handle_Standard_NoSuchObject *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_NoSuchObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Handle_Standard_NoSuchObject,  0  | 0); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_NoSuchObject" "', argument " "1"" of type '" "Handle_Standard_NoSuchObject const &""'");  }
+   if (!argp1) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Handle_Standard_NoSuchObject" "', argument " "1"" of type '" "Handle_Standard_NoSuchObject const &""'"); }
+   arg1 = reinterpret_cast< Handle_Standard_NoSuchObject * >(argp1); { try {
+      result = (Handle_Standard_NoSuchObject *)new Handle_Standard_NoSuchObject((Handle_Standard_NoSuchObject const &)*arg1); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_NoSuchObject, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_NoSuchObject__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NoSuchObject *arg1 = (Standard_NoSuchObject *) 0 ;
+  Handle_Standard_NoSuchObject *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_NoSuchObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NoSuchObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_NoSuchObject" "', argument " "1"" of type '" "Standard_NoSuchObject const *""'");  }
+   arg1 = reinterpret_cast< Standard_NoSuchObject * >(argp1); { try {
+      result = (Handle_Standard_NoSuchObject *)new Handle_Standard_NoSuchObject((Standard_NoSuchObject const *)arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_NoSuchObject, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_NoSuchObject(PyObject *self, PyObject *args) { int argc; PyObject *argv[2];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Handle_Standard_NoSuchObject__SWIG_0(self, args);}
+   if (argc == 1) { int _v; int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Handle_Standard_NoSuchObject, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_NoSuchObject__SWIG_1(self, args);}  } 
+  if (argc == 1) { int _v; void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_NoSuchObject, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_NoSuchObject__SWIG_2(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Handle_Standard_NoSuchObject'.\n  Possible C/C++ prototypes are:\n""    Handle_Standard_NoSuchObject()\n""    Handle_Standard_NoSuchObject(Handle_Standard_NoSuchObject const &)\n""    Handle_Standard_NoSuchObject(Standard_NoSuchObject const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_NoSuchObject_Set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NoSuchObject *arg1 = (Handle_Standard_NoSuchObject *) 0 ;
+  Handle_Standard_NoSuchObject *arg2 = 0 ; Handle_Standard_NoSuchObject *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_NoSuchObject_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_NoSuchObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_NoSuchObject_Set" "', argument " "1"" of type '" "Handle_Standard_NoSuchObject *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_NoSuchObject * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_NoSuchObject,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_NoSuchObject_Set" "', argument " "2"" of type '" "Handle_Standard_NoSuchObject const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_NoSuchObject_Set" "', argument " "2"" of type '" "Handle_Standard_NoSuchObject const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_NoSuchObject * >(argp2); { try { {
+        Handle_Standard_NoSuchObject &_result_ref = (arg1)->operator =((Handle_Standard_NoSuchObject const &)*arg2);
+        result = (Handle_Standard_NoSuchObject *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_NoSuchObject, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_NoSuchObject_Set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NoSuchObject *arg1 = (Handle_Standard_NoSuchObject *) 0 ;
+  Standard_NoSuchObject *arg2 = (Standard_NoSuchObject *) 0 ; Handle_Standard_NoSuchObject *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_NoSuchObject_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_NoSuchObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_NoSuchObject_Set" "', argument " "1"" of type '" "Handle_Standard_NoSuchObject *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_NoSuchObject * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Standard_NoSuchObject, 0 |  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_NoSuchObject_Set" "', argument " "2"" of type '" "Standard_NoSuchObject const *""'");  }
+   arg2 = reinterpret_cast< Standard_NoSuchObject * >(argp2); { try { {
+        Handle_Standard_NoSuchObject &_result_ref = (arg1)->operator =((Standard_NoSuchObject const *)arg2);
+        result = (Handle_Standard_NoSuchObject *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_NoSuchObject, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_NoSuchObject_Set(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_NoSuchObject, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_NoSuchObject, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Handle_Standard_NoSuchObject_Set__SWIG_0(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_NoSuchObject, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_NoSuchObject, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Handle_Standard_NoSuchObject_Set__SWIG_1(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Handle_Standard_NoSuchObject_Set'.\n  Possible C/C++ prototypes are:\n""    operator =(Handle_Standard_NoSuchObject *,Handle_Standard_NoSuchObject const &)\n""    operator =(Handle_Standard_NoSuchObject *,Standard_NoSuchObject const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_NoSuchObject_DownCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NoSuchObject *arg1 = (Handle_Standard_NoSuchObject *) 0 ;
+  Handle_Standard_Transient *arg2 = 0 ; Handle_Standard_NoSuchObject result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
+  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_NoSuchObject_DownCast",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_NoSuchObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_NoSuchObject_DownCast" "', argument " "1"" of type '" "Handle_Standard_NoSuchObject *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_NoSuchObject * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Transient,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_NoSuchObject_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_NoSuchObject_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Transient * >(argp2); { try {
+      result = (arg1)->DownCast((Handle_Standard_Transient const &)*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_NoSuchObject(static_cast< const Handle_Standard_NoSuchObject& >(result))), SWIGTYPE_p_Handle_Standard_NoSuchObject, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_NoSuchObject_GetObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NoSuchObject *arg1 = (Handle_Standard_NoSuchObject *) 0 ;
+  Standard_NoSuchObject *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_NoSuchObject_GetObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_NoSuchObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_NoSuchObject_GetObject" "', argument " "1"" of type '" "Handle_Standard_NoSuchObject *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_NoSuchObject * >(argp1); { try {
+      result = (Standard_NoSuchObject *)Handle_Standard_NoSuchObject_GetObject(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_NoSuchObject, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Handle_Standard_NoSuchObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NoSuchObject *arg1 = (Handle_Standard_NoSuchObject *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Handle_Standard_NoSuchObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_NoSuchObject, SWIG_POINTER_DISOWN |  0 );
+  if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Handle_Standard_NoSuchObject" "', argument " "1"" of type '" "Handle_Standard_NoSuchObject *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_NoSuchObject * >(argp1); { try { delete_Handle_Standard_NoSuchObject(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Handle_Standard_NoSuchObject_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Handle_Standard_NoSuchObject, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_DimensionMismatch__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_DimensionMismatch *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_DimensionMismatch",0,0)) SWIG_fail; { try {
+      result = (Handle_Standard_DimensionMismatch *)new Handle_Standard_DimensionMismatch(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_DimensionMismatch, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_DimensionMismatch__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_DimensionMismatch *arg1 = 0 ; Handle_Standard_DimensionMismatch *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_DimensionMismatch",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Handle_Standard_DimensionMismatch,  0  | 0); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_DimensionMismatch" "', argument " "1"" of type '" "Handle_Standard_DimensionMismatch const &""'");  }
+   if (!argp1) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Handle_Standard_DimensionMismatch" "', argument " "1"" of type '" "Handle_Standard_DimensionMismatch const &""'"); }
+   arg1 = reinterpret_cast< Handle_Standard_DimensionMismatch * >(argp1); { try {
+      result = (Handle_Standard_DimensionMismatch *)new Handle_Standard_DimensionMismatch((Handle_Standard_DimensionMismatch const &)*arg1); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_DimensionMismatch, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_DimensionMismatch__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DimensionMismatch *arg1 = (Standard_DimensionMismatch *) 0 ;
+  Handle_Standard_DimensionMismatch *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_DimensionMismatch",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DimensionMismatch, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_DimensionMismatch" "', argument " "1"" of type '" "Standard_DimensionMismatch const *""'");  }
+   arg1 = reinterpret_cast< Standard_DimensionMismatch * >(argp1); { try {
+      result = (Handle_Standard_DimensionMismatch *)new Handle_Standard_DimensionMismatch((Standard_DimensionMismatch const *)arg1); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_DimensionMismatch, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_DimensionMismatch(PyObject *self, PyObject *args) { int argc; PyObject *argv[2];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) {
+    return _wrap_new_Handle_Standard_DimensionMismatch__SWIG_0(self, args);}  if (argc == 1) { int _v;
+    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Handle_Standard_DimensionMismatch, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Handle_Standard_DimensionMismatch__SWIG_1(self, args);}  }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_DimensionMismatch, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Handle_Standard_DimensionMismatch__SWIG_2(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Handle_Standard_DimensionMismatch'.\n  Possible C/C++ prototypes are:\n""    Handle_Standard_DimensionMismatch()\n""    Handle_Standard_DimensionMismatch(Handle_Standard_DimensionMismatch const &)\n""    Handle_Standard_DimensionMismatch(Standard_DimensionMismatch const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_DimensionMismatch_Set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_DimensionMismatch *arg1 = (Handle_Standard_DimensionMismatch *) 0 ;
+  Handle_Standard_DimensionMismatch *arg2 = 0 ; Handle_Standard_DimensionMismatch *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_DimensionMismatch_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_DimensionMismatch, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_DimensionMismatch_Set" "', argument " "1"" of type '" "Handle_Standard_DimensionMismatch *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_DimensionMismatch * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_DimensionMismatch,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_DimensionMismatch_Set" "', argument " "2"" of type '" "Handle_Standard_DimensionMismatch const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_DimensionMismatch_Set" "', argument " "2"" of type '" "Handle_Standard_DimensionMismatch const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_DimensionMismatch * >(argp2); { try { {
+        Handle_Standard_DimensionMismatch &_result_ref = (arg1)->operator =((Handle_Standard_DimensionMismatch const &)*arg2);
+        result = (Handle_Standard_DimensionMismatch *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_DimensionMismatch, 0 |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_DimensionMismatch_Set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_DimensionMismatch *arg1 = (Handle_Standard_DimensionMismatch *) 0 ;
+  Standard_DimensionMismatch *arg2 = (Standard_DimensionMismatch *) 0 ; Handle_Standard_DimensionMismatch *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_DimensionMismatch_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_DimensionMismatch, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_DimensionMismatch_Set" "', argument " "1"" of type '" "Handle_Standard_DimensionMismatch *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_DimensionMismatch * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Standard_DimensionMismatch, 0 |  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_DimensionMismatch_Set" "', argument " "2"" of type '" "Standard_DimensionMismatch const *""'");  }
+   arg2 = reinterpret_cast< Standard_DimensionMismatch * >(argp2); { try { {
+        Handle_Standard_DimensionMismatch &_result_ref = (arg1)->operator =((Standard_DimensionMismatch const *)arg2);
+        result = (Handle_Standard_DimensionMismatch *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_DimensionMismatch, 0 |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_DimensionMismatch_Set(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_DimensionMismatch, 0); _v = SWIG_CheckState(res);
+    if (_v) { int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_DimensionMismatch, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Handle_Standard_DimensionMismatch_Set__SWIG_0(self, args);}  }  }  if (argc == 2) { int _v;
+    void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_DimensionMismatch, 0);
+    _v = SWIG_CheckState(res); if (_v) { void *vptr = 0;
+      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_DimensionMismatch, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Handle_Standard_DimensionMismatch_Set__SWIG_1(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Handle_Standard_DimensionMismatch_Set'.\n  Possible C/C++ prototypes are:\n""    operator =(Handle_Standard_DimensionMismatch *,Handle_Standard_DimensionMismatch const &)\n""    operator =(Handle_Standard_DimensionMismatch *,Standard_DimensionMismatch const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_DimensionMismatch_DownCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_DimensionMismatch *arg1 = (Handle_Standard_DimensionMismatch *) 0 ;
+  Handle_Standard_Transient *arg2 = 0 ; Handle_Standard_DimensionMismatch result; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_DimensionMismatch_DownCast",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_DimensionMismatch, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_DimensionMismatch_DownCast" "', argument " "1"" of type '" "Handle_Standard_DimensionMismatch *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_DimensionMismatch * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Transient,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_DimensionMismatch_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_DimensionMismatch_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Transient * >(argp2); { try {
+      result = (arg1)->DownCast((Handle_Standard_Transient const &)*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_DimensionMismatch(static_cast< const Handle_Standard_DimensionMismatch& >(result))), SWIGTYPE_p_Handle_Standard_DimensionMismatch, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_DimensionMismatch_GetObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_DimensionMismatch *arg1 = (Handle_Standard_DimensionMismatch *) 0 ;
+  Standard_DimensionMismatch *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_DimensionMismatch_GetObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_DimensionMismatch, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_DimensionMismatch_GetObject" "', argument " "1"" of type '" "Handle_Standard_DimensionMismatch *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_DimensionMismatch * >(argp1); { try {
+      result = (Standard_DimensionMismatch *)Handle_Standard_DimensionMismatch_GetObject(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_DimensionMismatch, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Handle_Standard_DimensionMismatch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_DimensionMismatch *arg1 = (Handle_Standard_DimensionMismatch *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Handle_Standard_DimensionMismatch",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_DimensionMismatch, SWIG_POINTER_DISOWN |  0 );
+  if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Handle_Standard_DimensionMismatch" "', argument " "1"" of type '" "Handle_Standard_DimensionMismatch *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_DimensionMismatch * >(argp1); { try {
+      delete_Handle_Standard_DimensionMismatch(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Handle_Standard_DimensionMismatch_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Handle_Standard_DimensionMismatch, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_OutOfMemory__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_OutOfMemory *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_OutOfMemory",0,0)) SWIG_fail; { try {
+      result = (Handle_Standard_OutOfMemory *)new Handle_Standard_OutOfMemory(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_OutOfMemory, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_OutOfMemory__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_OutOfMemory *arg1 = 0 ; Handle_Standard_OutOfMemory *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_OutOfMemory",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Handle_Standard_OutOfMemory,  0  | 0); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_OutOfMemory" "', argument " "1"" of type '" "Handle_Standard_OutOfMemory const &""'");  }
+   if (!argp1) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Handle_Standard_OutOfMemory" "', argument " "1"" of type '" "Handle_Standard_OutOfMemory const &""'"); }
+   arg1 = reinterpret_cast< Handle_Standard_OutOfMemory * >(argp1); { try {
+      result = (Handle_Standard_OutOfMemory *)new Handle_Standard_OutOfMemory((Handle_Standard_OutOfMemory const &)*arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_OutOfMemory, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_OutOfMemory__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_OutOfMemory *arg1 = (Standard_OutOfMemory *) 0 ; Handle_Standard_OutOfMemory *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_OutOfMemory",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_OutOfMemory, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_OutOfMemory" "', argument " "1"" of type '" "Standard_OutOfMemory const *""'");  }
+   arg1 = reinterpret_cast< Standard_OutOfMemory * >(argp1); { try {
+      result = (Handle_Standard_OutOfMemory *)new Handle_Standard_OutOfMemory((Standard_OutOfMemory const *)arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_OutOfMemory, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_OutOfMemory(PyObject *self, PyObject *args) { int argc; PyObject *argv[2];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Handle_Standard_OutOfMemory__SWIG_0(self, args);}
+   if (argc == 1) { int _v; int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Handle_Standard_OutOfMemory, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_OutOfMemory__SWIG_1(self, args);}  }  if (argc == 1) {
+    int _v; void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_OutOfMemory, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_OutOfMemory__SWIG_2(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Handle_Standard_OutOfMemory'.\n  Possible C/C++ prototypes are:\n""    Handle_Standard_OutOfMemory()\n""    Handle_Standard_OutOfMemory(Handle_Standard_OutOfMemory const &)\n""    Handle_Standard_OutOfMemory(Standard_OutOfMemory const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_OutOfMemory_Set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_OutOfMemory *arg1 = (Handle_Standard_OutOfMemory *) 0 ;
+  Handle_Standard_OutOfMemory *arg2 = 0 ; Handle_Standard_OutOfMemory *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_OutOfMemory_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_OutOfMemory, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_OutOfMemory_Set" "', argument " "1"" of type '" "Handle_Standard_OutOfMemory *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_OutOfMemory * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_OutOfMemory,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_OutOfMemory_Set" "', argument " "2"" of type '" "Handle_Standard_OutOfMemory const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_OutOfMemory_Set" "', argument " "2"" of type '" "Handle_Standard_OutOfMemory const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_OutOfMemory * >(argp2); { try { {
+        Handle_Standard_OutOfMemory &_result_ref = (arg1)->operator =((Handle_Standard_OutOfMemory const &)*arg2);
+        result = (Handle_Standard_OutOfMemory *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_OutOfMemory, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_OutOfMemory_Set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_OutOfMemory *arg1 = (Handle_Standard_OutOfMemory *) 0 ;
+  Standard_OutOfMemory *arg2 = (Standard_OutOfMemory *) 0 ; Handle_Standard_OutOfMemory *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_OutOfMemory_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_OutOfMemory, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_OutOfMemory_Set" "', argument " "1"" of type '" "Handle_Standard_OutOfMemory *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_OutOfMemory * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Standard_OutOfMemory, 0 |  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_OutOfMemory_Set" "', argument " "2"" of type '" "Standard_OutOfMemory const *""'");  }
+   arg2 = reinterpret_cast< Standard_OutOfMemory * >(argp2); { try { {
+        Handle_Standard_OutOfMemory &_result_ref = (arg1)->operator =((Standard_OutOfMemory const *)arg2);
+        result = (Handle_Standard_OutOfMemory *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_OutOfMemory, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_OutOfMemory_Set(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_OutOfMemory, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_OutOfMemory, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Handle_Standard_OutOfMemory_Set__SWIG_0(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_OutOfMemory, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_OutOfMemory, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Handle_Standard_OutOfMemory_Set__SWIG_1(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Handle_Standard_OutOfMemory_Set'.\n  Possible C/C++ prototypes are:\n""    operator =(Handle_Standard_OutOfMemory *,Handle_Standard_OutOfMemory const &)\n""    operator =(Handle_Standard_OutOfMemory *,Standard_OutOfMemory const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_OutOfMemory_DownCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_OutOfMemory *arg1 = (Handle_Standard_OutOfMemory *) 0 ;
+  Handle_Standard_Transient *arg2 = 0 ; Handle_Standard_OutOfMemory result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
+  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_OutOfMemory_DownCast",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_OutOfMemory, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_OutOfMemory_DownCast" "', argument " "1"" of type '" "Handle_Standard_OutOfMemory *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_OutOfMemory * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Transient,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_OutOfMemory_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_OutOfMemory_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Transient * >(argp2); { try {
+      result = (arg1)->DownCast((Handle_Standard_Transient const &)*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_OutOfMemory(static_cast< const Handle_Standard_OutOfMemory& >(result))), SWIGTYPE_p_Handle_Standard_OutOfMemory, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_OutOfMemory_GetObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_OutOfMemory *arg1 = (Handle_Standard_OutOfMemory *) 0 ;
+  Standard_OutOfMemory *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_OutOfMemory_GetObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_OutOfMemory, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_OutOfMemory_GetObject" "', argument " "1"" of type '" "Handle_Standard_OutOfMemory *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_OutOfMemory * >(argp1); { try {
+      result = (Standard_OutOfMemory *)Handle_Standard_OutOfMemory_GetObject(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_OutOfMemory, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Handle_Standard_OutOfMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_OutOfMemory *arg1 = (Handle_Standard_OutOfMemory *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Handle_Standard_OutOfMemory",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_OutOfMemory, SWIG_POINTER_DISOWN |  0 );
+  if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Handle_Standard_OutOfMemory" "', argument " "1"" of type '" "Handle_Standard_OutOfMemory *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_OutOfMemory * >(argp1); { try { delete_Handle_Standard_OutOfMemory(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Handle_Standard_OutOfMemory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Handle_Standard_OutOfMemory, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_Type__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Type *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_Type",0,0)) SWIG_fail; { try {
+      result = (Handle_Standard_Type *)new Handle_Standard_Type(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Type, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_Type__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Type *arg1 = 0 ; Handle_Standard_Type *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_Type",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Handle_Standard_Type,  0  | 0); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_Type" "', argument " "1"" of type '" "Handle_Standard_Type const &""'");  }
+   if (!argp1) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Handle_Standard_Type" "', argument " "1"" of type '" "Handle_Standard_Type const &""'"); }
+   arg1 = reinterpret_cast< Handle_Standard_Type * >(argp1); { try {
+      result = (Handle_Standard_Type *)new Handle_Standard_Type((Handle_Standard_Type const &)*arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Type, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_Type__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Type *arg1 = (Standard_Type *) 0 ; Handle_Standard_Type *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_Type",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Type, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_Type" "', argument " "1"" of type '" "Standard_Type const *""'");  }
+   arg1 = reinterpret_cast< Standard_Type * >(argp1); { try {
+      result = (Handle_Standard_Type *)new Handle_Standard_Type((Standard_Type const *)arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Type, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_Type(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Handle_Standard_Type__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Handle_Standard_Type, 0); _v = SWIG_CheckState(res);
+    if (_v) { return _wrap_new_Handle_Standard_Type__SWIG_1(self, args);}  }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_Type, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Handle_Standard_Type__SWIG_2(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Handle_Standard_Type'.\n  Possible C/C++ prototypes are:\n""    Handle_Standard_Type()\n""    Handle_Standard_Type(Handle_Standard_Type const &)\n""    Handle_Standard_Type(Standard_Type const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Type_Set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Type *arg1 = (Handle_Standard_Type *) 0 ; Handle_Standard_Type *arg2 = 0 ;
+  Handle_Standard_Type *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ;
+  PyObject * obj1 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Type_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Type, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Type_Set" "', argument " "1"" of type '" "Handle_Standard_Type *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Type * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Type,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_Type_Set" "', argument " "2"" of type '" "Handle_Standard_Type const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_Type_Set" "', argument " "2"" of type '" "Handle_Standard_Type const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Type * >(argp2); { try { {
+        Handle_Standard_Type &_result_ref = (arg1)->operator =((Handle_Standard_Type const &)*arg2);
+        result = (Handle_Standard_Type *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Type, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Type_Set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Type *arg1 = (Handle_Standard_Type *) 0 ; Standard_Type *arg2 = (Standard_Type *) 0 ;
+  Handle_Standard_Type *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ;
+  PyObject * obj1 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Type_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Type, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Type_Set" "', argument " "1"" of type '" "Handle_Standard_Type *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Type * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Standard_Type, 0 |  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_Type_Set" "', argument " "2"" of type '" "Standard_Type const *""'");  }
+   arg2 = reinterpret_cast< Standard_Type * >(argp2); { try { {
+        Handle_Standard_Type &_result_ref = (arg1)->operator =((Standard_Type const *)arg2);
+        result = (Handle_Standard_Type *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Type, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Type_Set(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_Type, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_Type, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Handle_Standard_Type_Set__SWIG_0(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_Type, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_Type, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Handle_Standard_Type_Set__SWIG_1(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Handle_Standard_Type_Set'.\n  Possible C/C++ prototypes are:\n""    operator =(Handle_Standard_Type *,Handle_Standard_Type const &)\n""    operator =(Handle_Standard_Type *,Standard_Type const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Type_DownCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Type *arg1 = (Handle_Standard_Type *) 0 ; Handle_Standard_Transient *arg2 = 0 ;
+  Handle_Standard_Type result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ;
+  PyObject * obj1 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Type_DownCast",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Type, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Type_DownCast" "', argument " "1"" of type '" "Handle_Standard_Type *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Type * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Transient,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_Type_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_Type_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Transient * >(argp2); { try {
+      result = (arg1)->DownCast((Handle_Standard_Transient const &)*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_Type(static_cast< const Handle_Standard_Type& >(result))), SWIGTYPE_p_Handle_Standard_Type, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Type_GetObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Type *arg1 = (Handle_Standard_Type *) 0 ; Standard_Type *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Type_GetObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Type, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Type_GetObject" "', argument " "1"" of type '" "Handle_Standard_Type *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Type * >(argp1); { try {
+      result = (Standard_Type *)Handle_Standard_Type_GetObject(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_Type, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Handle_Standard_Type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Type *arg1 = (Handle_Standard_Type *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"delete_Handle_Standard_Type",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Type, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Handle_Standard_Type" "', argument " "1"" of type '" "Handle_Standard_Type *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Type * >(argp1); { try { delete_Handle_Standard_Type(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Handle_Standard_Type_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Handle_Standard_Type, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_Overflow__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Overflow *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_Overflow",0,0)) SWIG_fail; { try {
+      result = (Handle_Standard_Overflow *)new Handle_Standard_Overflow(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Overflow, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_Overflow__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Overflow *arg1 = 0 ; Handle_Standard_Overflow *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_Overflow",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Handle_Standard_Overflow,  0  | 0); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_Overflow" "', argument " "1"" of type '" "Handle_Standard_Overflow const &""'");  }
+   if (!argp1) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Handle_Standard_Overflow" "', argument " "1"" of type '" "Handle_Standard_Overflow const &""'"); }
+   arg1 = reinterpret_cast< Handle_Standard_Overflow * >(argp1); { try {
+      result = (Handle_Standard_Overflow *)new Handle_Standard_Overflow((Handle_Standard_Overflow const &)*arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Overflow, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_Overflow__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Overflow *arg1 = (Standard_Overflow *) 0 ; Handle_Standard_Overflow *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_Overflow",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Overflow, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_Overflow" "', argument " "1"" of type '" "Standard_Overflow const *""'");  }
+   arg1 = reinterpret_cast< Standard_Overflow * >(argp1); { try {
+      result = (Handle_Standard_Overflow *)new Handle_Standard_Overflow((Standard_Overflow const *)arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Overflow, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_Overflow(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Handle_Standard_Overflow__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Handle_Standard_Overflow, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_Overflow__SWIG_1(self, args);}  }  if (argc == 1) {
+    int _v; void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_Overflow, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_Overflow__SWIG_2(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Handle_Standard_Overflow'.\n  Possible C/C++ prototypes are:\n""    Handle_Standard_Overflow()\n""    Handle_Standard_Overflow(Handle_Standard_Overflow const &)\n""    Handle_Standard_Overflow(Standard_Overflow const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Overflow_Set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Overflow *arg1 = (Handle_Standard_Overflow *) 0 ;
+  Handle_Standard_Overflow *arg2 = 0 ; Handle_Standard_Overflow *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
+  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Overflow_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Overflow, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Overflow_Set" "', argument " "1"" of type '" "Handle_Standard_Overflow *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Overflow * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Overflow,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_Overflow_Set" "', argument " "2"" of type '" "Handle_Standard_Overflow const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_Overflow_Set" "', argument " "2"" of type '" "Handle_Standard_Overflow const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Overflow * >(argp2); { try { {
+        Handle_Standard_Overflow &_result_ref = (arg1)->operator =((Handle_Standard_Overflow const &)*arg2);
+        result = (Handle_Standard_Overflow *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Overflow, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Overflow_Set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Overflow *arg1 = (Handle_Standard_Overflow *) 0 ;
+  Standard_Overflow *arg2 = (Standard_Overflow *) 0 ; Handle_Standard_Overflow *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Overflow_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Overflow, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Overflow_Set" "', argument " "1"" of type '" "Handle_Standard_Overflow *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Overflow * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Standard_Overflow, 0 |  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_Overflow_Set" "', argument " "2"" of type '" "Standard_Overflow const *""'");  }
+   arg2 = reinterpret_cast< Standard_Overflow * >(argp2); { try { {
+        Handle_Standard_Overflow &_result_ref = (arg1)->operator =((Standard_Overflow const *)arg2);
+        result = (Handle_Standard_Overflow *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Overflow, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Overflow_Set(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_Overflow, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_Overflow, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Handle_Standard_Overflow_Set__SWIG_0(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_Overflow, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_Overflow, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Handle_Standard_Overflow_Set__SWIG_1(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Handle_Standard_Overflow_Set'.\n  Possible C/C++ prototypes are:\n""    operator =(Handle_Standard_Overflow *,Handle_Standard_Overflow const &)\n""    operator =(Handle_Standard_Overflow *,Standard_Overflow const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Overflow_DownCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Overflow *arg1 = (Handle_Standard_Overflow *) 0 ;
+  Handle_Standard_Transient *arg2 = 0 ; Handle_Standard_Overflow result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
+  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Overflow_DownCast",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Overflow, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Overflow_DownCast" "', argument " "1"" of type '" "Handle_Standard_Overflow *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Overflow * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Transient,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_Overflow_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_Overflow_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Transient * >(argp2); { try {
+      result = (arg1)->DownCast((Handle_Standard_Transient const &)*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_Overflow(static_cast< const Handle_Standard_Overflow& >(result))), SWIGTYPE_p_Handle_Standard_Overflow, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Overflow_GetObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Overflow *arg1 = (Handle_Standard_Overflow *) 0 ; Standard_Overflow *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Overflow_GetObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Overflow, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Overflow_GetObject" "', argument " "1"" of type '" "Handle_Standard_Overflow *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Overflow * >(argp1); { try {
+      result = (Standard_Overflow *)Handle_Standard_Overflow_GetObject(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_Overflow, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Handle_Standard_Overflow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Overflow *arg1 = (Handle_Standard_Overflow *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"delete_Handle_Standard_Overflow",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Overflow, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Handle_Standard_Overflow" "', argument " "1"" of type '" "Handle_Standard_Overflow *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Overflow * >(argp1); { try { delete_Handle_Standard_Overflow(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Handle_Standard_Overflow_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Handle_Standard_Overflow, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_NegativeValue__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NegativeValue *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_NegativeValue",0,0)) SWIG_fail; { try {
+      result = (Handle_Standard_NegativeValue *)new Handle_Standard_NegativeValue(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_NegativeValue, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_NegativeValue__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NegativeValue *arg1 = 0 ; Handle_Standard_NegativeValue *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_NegativeValue",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Handle_Standard_NegativeValue,  0  | 0); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_NegativeValue" "', argument " "1"" of type '" "Handle_Standard_NegativeValue const &""'");  }
+   if (!argp1) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Handle_Standard_NegativeValue" "', argument " "1"" of type '" "Handle_Standard_NegativeValue const &""'"); }
+   arg1 = reinterpret_cast< Handle_Standard_NegativeValue * >(argp1); { try {
+      result = (Handle_Standard_NegativeValue *)new Handle_Standard_NegativeValue((Handle_Standard_NegativeValue const &)*arg1); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_NegativeValue, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_NegativeValue__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NegativeValue *arg1 = (Standard_NegativeValue *) 0 ;
+  Handle_Standard_NegativeValue *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_NegativeValue",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NegativeValue, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_NegativeValue" "', argument " "1"" of type '" "Standard_NegativeValue const *""'");  }
+   arg1 = reinterpret_cast< Standard_NegativeValue * >(argp1); { try {
+      result = (Handle_Standard_NegativeValue *)new Handle_Standard_NegativeValue((Standard_NegativeValue const *)arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_NegativeValue, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_NegativeValue(PyObject *self, PyObject *args) { int argc; PyObject *argv[2];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) {
+    return _wrap_new_Handle_Standard_NegativeValue__SWIG_0(self, args);}  if (argc == 1) { int _v;
+    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Handle_Standard_NegativeValue, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Handle_Standard_NegativeValue__SWIG_1(self, args);}  }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_NegativeValue, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Handle_Standard_NegativeValue__SWIG_2(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Handle_Standard_NegativeValue'.\n  Possible C/C++ prototypes are:\n""    Handle_Standard_NegativeValue()\n""    Handle_Standard_NegativeValue(Handle_Standard_NegativeValue const &)\n""    Handle_Standard_NegativeValue(Standard_NegativeValue const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_NegativeValue_Set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NegativeValue *arg1 = (Handle_Standard_NegativeValue *) 0 ;
+  Handle_Standard_NegativeValue *arg2 = 0 ; Handle_Standard_NegativeValue *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_NegativeValue_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_NegativeValue, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_NegativeValue_Set" "', argument " "1"" of type '" "Handle_Standard_NegativeValue *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_NegativeValue * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_NegativeValue,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_NegativeValue_Set" "', argument " "2"" of type '" "Handle_Standard_NegativeValue const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_NegativeValue_Set" "', argument " "2"" of type '" "Handle_Standard_NegativeValue const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_NegativeValue * >(argp2); { try { {
+        Handle_Standard_NegativeValue &_result_ref = (arg1)->operator =((Handle_Standard_NegativeValue const &)*arg2);
+        result = (Handle_Standard_NegativeValue *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_NegativeValue, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_NegativeValue_Set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NegativeValue *arg1 = (Handle_Standard_NegativeValue *) 0 ;
+  Standard_NegativeValue *arg2 = (Standard_NegativeValue *) 0 ; Handle_Standard_NegativeValue *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_NegativeValue_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_NegativeValue, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_NegativeValue_Set" "', argument " "1"" of type '" "Handle_Standard_NegativeValue *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_NegativeValue * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Standard_NegativeValue, 0 |  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_NegativeValue_Set" "', argument " "2"" of type '" "Standard_NegativeValue const *""'");  }
+   arg2 = reinterpret_cast< Standard_NegativeValue * >(argp2); { try { {
+        Handle_Standard_NegativeValue &_result_ref = (arg1)->operator =((Standard_NegativeValue const *)arg2);
+        result = (Handle_Standard_NegativeValue *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_NegativeValue, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_NegativeValue_Set(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_NegativeValue, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_NegativeValue, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Handle_Standard_NegativeValue_Set__SWIG_0(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_NegativeValue, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_NegativeValue, 0);
+      _v = SWIG_CheckState(res); if (_v) { return _wrap_Handle_Standard_NegativeValue_Set__SWIG_1(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Handle_Standard_NegativeValue_Set'.\n  Possible C/C++ prototypes are:\n""    operator =(Handle_Standard_NegativeValue *,Handle_Standard_NegativeValue const &)\n""    operator =(Handle_Standard_NegativeValue *,Standard_NegativeValue const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_NegativeValue_DownCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NegativeValue *arg1 = (Handle_Standard_NegativeValue *) 0 ;
+  Handle_Standard_Transient *arg2 = 0 ; Handle_Standard_NegativeValue result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
+  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_NegativeValue_DownCast",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_NegativeValue, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_NegativeValue_DownCast" "', argument " "1"" of type '" "Handle_Standard_NegativeValue *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_NegativeValue * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Transient,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_NegativeValue_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_NegativeValue_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Transient * >(argp2); { try {
+      result = (arg1)->DownCast((Handle_Standard_Transient const &)*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_NegativeValue(static_cast< const Handle_Standard_NegativeValue& >(result))), SWIGTYPE_p_Handle_Standard_NegativeValue, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_NegativeValue_GetObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NegativeValue *arg1 = (Handle_Standard_NegativeValue *) 0 ;
+  Standard_NegativeValue *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_NegativeValue_GetObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_NegativeValue, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_NegativeValue_GetObject" "', argument " "1"" of type '" "Handle_Standard_NegativeValue *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_NegativeValue * >(argp1); { try {
+      result = (Standard_NegativeValue *)Handle_Standard_NegativeValue_GetObject(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_NegativeValue, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Handle_Standard_NegativeValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_NegativeValue *arg1 = (Handle_Standard_NegativeValue *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Handle_Standard_NegativeValue",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_NegativeValue, SWIG_POINTER_DISOWN |  0 );
+  if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Handle_Standard_NegativeValue" "', argument " "1"" of type '" "Handle_Standard_NegativeValue *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_NegativeValue * >(argp1); { try { delete_Handle_Standard_NegativeValue(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Handle_Standard_NegativeValue_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Handle_Standard_NegativeValue, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_ImmutableObject__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_ImmutableObject *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_ImmutableObject",0,0)) SWIG_fail; { try {
+      result = (Handle_Standard_ImmutableObject *)new Handle_Standard_ImmutableObject(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_ImmutableObject, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_ImmutableObject__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_ImmutableObject *arg1 = 0 ; Handle_Standard_ImmutableObject *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_ImmutableObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Handle_Standard_ImmutableObject,  0  | 0); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_ImmutableObject" "', argument " "1"" of type '" "Handle_Standard_ImmutableObject const &""'");  }
+   if (!argp1) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Handle_Standard_ImmutableObject" "', argument " "1"" of type '" "Handle_Standard_ImmutableObject const &""'"); }
+   arg1 = reinterpret_cast< Handle_Standard_ImmutableObject * >(argp1); { try {
+      result = (Handle_Standard_ImmutableObject *)new Handle_Standard_ImmutableObject((Handle_Standard_ImmutableObject const &)*arg1); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_ImmutableObject, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_ImmutableObject__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ImmutableObject *arg1 = (Standard_ImmutableObject *) 0 ;
+  Handle_Standard_ImmutableObject *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_ImmutableObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ImmutableObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_ImmutableObject" "', argument " "1"" of type '" "Standard_ImmutableObject const *""'");  }
+   arg1 = reinterpret_cast< Standard_ImmutableObject * >(argp1); { try {
+      result = (Handle_Standard_ImmutableObject *)new Handle_Standard_ImmutableObject((Standard_ImmutableObject const *)arg1); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_ImmutableObject, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_ImmutableObject(PyObject *self, PyObject *args) { int argc; PyObject *argv[2];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) {
+    return _wrap_new_Handle_Standard_ImmutableObject__SWIG_0(self, args);}  if (argc == 1) { int _v;
+    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Handle_Standard_ImmutableObject, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Handle_Standard_ImmutableObject__SWIG_1(self, args);}  }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_ImmutableObject, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Handle_Standard_ImmutableObject__SWIG_2(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Handle_Standard_ImmutableObject'.\n  Possible C/C++ prototypes are:\n""    Handle_Standard_ImmutableObject()\n""    Handle_Standard_ImmutableObject(Handle_Standard_ImmutableObject const &)\n""    Handle_Standard_ImmutableObject(Standard_ImmutableObject const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_ImmutableObject_Set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_ImmutableObject *arg1 = (Handle_Standard_ImmutableObject *) 0 ;
+  Handle_Standard_ImmutableObject *arg2 = 0 ; Handle_Standard_ImmutableObject *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_ImmutableObject_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_ImmutableObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_ImmutableObject_Set" "', argument " "1"" of type '" "Handle_Standard_ImmutableObject *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_ImmutableObject * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_ImmutableObject,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_ImmutableObject_Set" "', argument " "2"" of type '" "Handle_Standard_ImmutableObject const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_ImmutableObject_Set" "', argument " "2"" of type '" "Handle_Standard_ImmutableObject const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_ImmutableObject * >(argp2); { try { {
+        Handle_Standard_ImmutableObject &_result_ref = (arg1)->operator =((Handle_Standard_ImmutableObject const &)*arg2);
+        result = (Handle_Standard_ImmutableObject *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_ImmutableObject, 0 |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_ImmutableObject_Set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_ImmutableObject *arg1 = (Handle_Standard_ImmutableObject *) 0 ;
+  Standard_ImmutableObject *arg2 = (Standard_ImmutableObject *) 0 ; Handle_Standard_ImmutableObject *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_ImmutableObject_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_ImmutableObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_ImmutableObject_Set" "', argument " "1"" of type '" "Handle_Standard_ImmutableObject *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_ImmutableObject * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Standard_ImmutableObject, 0 |  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_ImmutableObject_Set" "', argument " "2"" of type '" "Standard_ImmutableObject const *""'");  }
+   arg2 = reinterpret_cast< Standard_ImmutableObject * >(argp2); { try { {
+        Handle_Standard_ImmutableObject &_result_ref = (arg1)->operator =((Standard_ImmutableObject const *)arg2);
+        result = (Handle_Standard_ImmutableObject *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_ImmutableObject, 0 |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_ImmutableObject_Set(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_ImmutableObject, 0); _v = SWIG_CheckState(res);
+    if (_v) { int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_ImmutableObject, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Handle_Standard_ImmutableObject_Set__SWIG_0(self, args);}  }  }  if (argc == 2) { int _v;
+    void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_ImmutableObject, 0);
+    _v = SWIG_CheckState(res); if (_v) { void *vptr = 0;
+      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_ImmutableObject, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Handle_Standard_ImmutableObject_Set__SWIG_1(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Handle_Standard_ImmutableObject_Set'.\n  Possible C/C++ prototypes are:\n""    operator =(Handle_Standard_ImmutableObject *,Handle_Standard_ImmutableObject const &)\n""    operator =(Handle_Standard_ImmutableObject *,Standard_ImmutableObject const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_ImmutableObject_DownCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_ImmutableObject *arg1 = (Handle_Standard_ImmutableObject *) 0 ;
+  Handle_Standard_Transient *arg2 = 0 ; Handle_Standard_ImmutableObject result; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_ImmutableObject_DownCast",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_ImmutableObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_ImmutableObject_DownCast" "', argument " "1"" of type '" "Handle_Standard_ImmutableObject *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_ImmutableObject * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Transient,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_ImmutableObject_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_ImmutableObject_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Transient * >(argp2); { try {
+      result = (arg1)->DownCast((Handle_Standard_Transient const &)*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_ImmutableObject(static_cast< const Handle_Standard_ImmutableObject& >(result))), SWIGTYPE_p_Handle_Standard_ImmutableObject, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_ImmutableObject_GetObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_ImmutableObject *arg1 = (Handle_Standard_ImmutableObject *) 0 ;
+  Standard_ImmutableObject *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_ImmutableObject_GetObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_ImmutableObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_ImmutableObject_GetObject" "', argument " "1"" of type '" "Handle_Standard_ImmutableObject *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_ImmutableObject * >(argp1); { try {
+      result = (Standard_ImmutableObject *)Handle_Standard_ImmutableObject_GetObject(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_ImmutableObject, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Handle_Standard_ImmutableObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_ImmutableObject *arg1 = (Handle_Standard_ImmutableObject *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Handle_Standard_ImmutableObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_ImmutableObject, SWIG_POINTER_DISOWN |  0 );
+  if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Handle_Standard_ImmutableObject" "', argument " "1"" of type '" "Handle_Standard_ImmutableObject *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_ImmutableObject * >(argp1); { try { delete_Handle_Standard_ImmutableObject(arg1); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Handle_Standard_ImmutableObject_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Handle_Standard_ImmutableObject, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_Underflow__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Underflow *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_Underflow",0,0)) SWIG_fail; { try {
+      result = (Handle_Standard_Underflow *)new Handle_Standard_Underflow(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Underflow, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_Underflow__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Underflow *arg1 = 0 ; Handle_Standard_Underflow *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_Underflow",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Handle_Standard_Underflow,  0  | 0); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_Underflow" "', argument " "1"" of type '" "Handle_Standard_Underflow const &""'");  }
+   if (!argp1) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Handle_Standard_Underflow" "', argument " "1"" of type '" "Handle_Standard_Underflow const &""'"); }
+   arg1 = reinterpret_cast< Handle_Standard_Underflow * >(argp1); { try {
+      result = (Handle_Standard_Underflow *)new Handle_Standard_Underflow((Handle_Standard_Underflow const &)*arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Underflow, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_Underflow__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Underflow *arg1 = (Standard_Underflow *) 0 ; Handle_Standard_Underflow *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_Underflow",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Underflow, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_Underflow" "', argument " "1"" of type '" "Standard_Underflow const *""'");  }
+   arg1 = reinterpret_cast< Standard_Underflow * >(argp1); { try {
+      result = (Handle_Standard_Underflow *)new Handle_Standard_Underflow((Standard_Underflow const *)arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Underflow, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_Underflow(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Handle_Standard_Underflow__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Handle_Standard_Underflow, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_Underflow__SWIG_1(self, args);}  }  if (argc == 1) {
+    int _v; void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_Underflow, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_Underflow__SWIG_2(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Handle_Standard_Underflow'.\n  Possible C/C++ prototypes are:\n""    Handle_Standard_Underflow()\n""    Handle_Standard_Underflow(Handle_Standard_Underflow const &)\n""    Handle_Standard_Underflow(Standard_Underflow const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Underflow_Set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Underflow *arg1 = (Handle_Standard_Underflow *) 0 ;
+  Handle_Standard_Underflow *arg2 = 0 ; Handle_Standard_Underflow *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Underflow_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Underflow, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Underflow_Set" "', argument " "1"" of type '" "Handle_Standard_Underflow *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Underflow * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Underflow,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_Underflow_Set" "', argument " "2"" of type '" "Handle_Standard_Underflow const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_Underflow_Set" "', argument " "2"" of type '" "Handle_Standard_Underflow const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Underflow * >(argp2); { try { {
+        Handle_Standard_Underflow &_result_ref = (arg1)->operator =((Handle_Standard_Underflow const &)*arg2);
+        result = (Handle_Standard_Underflow *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Underflow, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Underflow_Set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Underflow *arg1 = (Handle_Standard_Underflow *) 0 ;
+  Standard_Underflow *arg2 = (Standard_Underflow *) 0 ; Handle_Standard_Underflow *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Underflow_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Underflow, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Underflow_Set" "', argument " "1"" of type '" "Handle_Standard_Underflow *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Underflow * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Standard_Underflow, 0 |  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_Underflow_Set" "', argument " "2"" of type '" "Standard_Underflow const *""'");  }
+   arg2 = reinterpret_cast< Standard_Underflow * >(argp2); { try { {
+        Handle_Standard_Underflow &_result_ref = (arg1)->operator =((Standard_Underflow const *)arg2);
+        result = (Handle_Standard_Underflow *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Underflow, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Underflow_Set(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_Underflow, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_Underflow, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Handle_Standard_Underflow_Set__SWIG_0(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_Underflow, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_Underflow, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Handle_Standard_Underflow_Set__SWIG_1(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Handle_Standard_Underflow_Set'.\n  Possible C/C++ prototypes are:\n""    operator =(Handle_Standard_Underflow *,Handle_Standard_Underflow const &)\n""    operator =(Handle_Standard_Underflow *,Standard_Underflow const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Underflow_DownCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Underflow *arg1 = (Handle_Standard_Underflow *) 0 ;
+  Handle_Standard_Transient *arg2 = 0 ; Handle_Standard_Underflow result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
+  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Underflow_DownCast",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Underflow, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Underflow_DownCast" "', argument " "1"" of type '" "Handle_Standard_Underflow *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Underflow * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Transient,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_Underflow_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_Underflow_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Transient * >(argp2); { try {
+      result = (arg1)->DownCast((Handle_Standard_Transient const &)*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_Underflow(static_cast< const Handle_Standard_Underflow& >(result))), SWIGTYPE_p_Handle_Standard_Underflow, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_Underflow_GetObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Underflow *arg1 = (Handle_Standard_Underflow *) 0 ; Standard_Underflow *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_Underflow_GetObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Underflow, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_Underflow_GetObject" "', argument " "1"" of type '" "Handle_Standard_Underflow *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Underflow * >(argp1); { try {
+      result = (Standard_Underflow *)Handle_Standard_Underflow_GetObject(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_Underflow, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Handle_Standard_Underflow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Underflow *arg1 = (Handle_Standard_Underflow *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"delete_Handle_Standard_Underflow",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_Underflow, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Handle_Standard_Underflow" "', argument " "1"" of type '" "Handle_Standard_Underflow *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_Underflow * >(argp1); { try { delete_Handle_Standard_Underflow(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Handle_Standard_Underflow_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Handle_Standard_Underflow, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_ConstructionError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_ConstructionError *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_ConstructionError",0,0)) SWIG_fail; { try {
+      result = (Handle_Standard_ConstructionError *)new Handle_Standard_ConstructionError(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_ConstructionError, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_ConstructionError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_ConstructionError *arg1 = 0 ; Handle_Standard_ConstructionError *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_ConstructionError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Handle_Standard_ConstructionError,  0  | 0); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_ConstructionError" "', argument " "1"" of type '" "Handle_Standard_ConstructionError const &""'");  }
+   if (!argp1) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Handle_Standard_ConstructionError" "', argument " "1"" of type '" "Handle_Standard_ConstructionError const &""'"); }
+   arg1 = reinterpret_cast< Handle_Standard_ConstructionError * >(argp1); { try {
+      result = (Handle_Standard_ConstructionError *)new Handle_Standard_ConstructionError((Handle_Standard_ConstructionError const &)*arg1); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_ConstructionError, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_ConstructionError__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ConstructionError *arg1 = (Standard_ConstructionError *) 0 ;
+  Handle_Standard_ConstructionError *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_ConstructionError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ConstructionError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_ConstructionError" "', argument " "1"" of type '" "Standard_ConstructionError const *""'");  }
+   arg1 = reinterpret_cast< Standard_ConstructionError * >(argp1); { try {
+      result = (Handle_Standard_ConstructionError *)new Handle_Standard_ConstructionError((Standard_ConstructionError const *)arg1); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_ConstructionError, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_ConstructionError(PyObject *self, PyObject *args) { int argc; PyObject *argv[2];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) {
+    return _wrap_new_Handle_Standard_ConstructionError__SWIG_0(self, args);}  if (argc == 1) { int _v;
+    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Handle_Standard_ConstructionError, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Handle_Standard_ConstructionError__SWIG_1(self, args);}  }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_ConstructionError, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Handle_Standard_ConstructionError__SWIG_2(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Handle_Standard_ConstructionError'.\n  Possible C/C++ prototypes are:\n""    Handle_Standard_ConstructionError()\n""    Handle_Standard_ConstructionError(Handle_Standard_ConstructionError const &)\n""    Handle_Standard_ConstructionError(Standard_ConstructionError const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_ConstructionError_Set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_ConstructionError *arg1 = (Handle_Standard_ConstructionError *) 0 ;
+  Handle_Standard_ConstructionError *arg2 = 0 ; Handle_Standard_ConstructionError *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_ConstructionError_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_ConstructionError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_ConstructionError_Set" "', argument " "1"" of type '" "Handle_Standard_ConstructionError *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_ConstructionError * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_ConstructionError,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_ConstructionError_Set" "', argument " "2"" of type '" "Handle_Standard_ConstructionError const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_ConstructionError_Set" "', argument " "2"" of type '" "Handle_Standard_ConstructionError const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_ConstructionError * >(argp2); { try { {
+        Handle_Standard_ConstructionError &_result_ref = (arg1)->operator =((Handle_Standard_ConstructionError const &)*arg2);
+        result = (Handle_Standard_ConstructionError *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_ConstructionError, 0 |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_ConstructionError_Set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_ConstructionError *arg1 = (Handle_Standard_ConstructionError *) 0 ;
+  Standard_ConstructionError *arg2 = (Standard_ConstructionError *) 0 ; Handle_Standard_ConstructionError *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_ConstructionError_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_ConstructionError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_ConstructionError_Set" "', argument " "1"" of type '" "Handle_Standard_ConstructionError *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_ConstructionError * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Standard_ConstructionError, 0 |  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_ConstructionError_Set" "', argument " "2"" of type '" "Standard_ConstructionError const *""'");  }
+   arg2 = reinterpret_cast< Standard_ConstructionError * >(argp2); { try { {
+        Handle_Standard_ConstructionError &_result_ref = (arg1)->operator =((Standard_ConstructionError const *)arg2);
+        result = (Handle_Standard_ConstructionError *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_ConstructionError, 0 |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_ConstructionError_Set(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_ConstructionError, 0); _v = SWIG_CheckState(res);
+    if (_v) { int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_ConstructionError, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Handle_Standard_ConstructionError_Set__SWIG_0(self, args);}  }  }  if (argc == 2) { int _v;
+    void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_ConstructionError, 0);
+    _v = SWIG_CheckState(res); if (_v) { void *vptr = 0;
+      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_ConstructionError, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Handle_Standard_ConstructionError_Set__SWIG_1(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Handle_Standard_ConstructionError_Set'.\n  Possible C/C++ prototypes are:\n""    operator =(Handle_Standard_ConstructionError *,Handle_Standard_ConstructionError const &)\n""    operator =(Handle_Standard_ConstructionError *,Standard_ConstructionError const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_ConstructionError_DownCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_ConstructionError *arg1 = (Handle_Standard_ConstructionError *) 0 ;
+  Handle_Standard_Transient *arg2 = 0 ; Handle_Standard_ConstructionError result; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_ConstructionError_DownCast",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_ConstructionError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_ConstructionError_DownCast" "', argument " "1"" of type '" "Handle_Standard_ConstructionError *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_ConstructionError * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Transient,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_ConstructionError_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_ConstructionError_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Transient * >(argp2); { try {
+      result = (arg1)->DownCast((Handle_Standard_Transient const &)*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_ConstructionError(static_cast< const Handle_Standard_ConstructionError& >(result))), SWIGTYPE_p_Handle_Standard_ConstructionError, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_ConstructionError_GetObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_ConstructionError *arg1 = (Handle_Standard_ConstructionError *) 0 ;
+  Standard_ConstructionError *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_ConstructionError_GetObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_ConstructionError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_ConstructionError_GetObject" "', argument " "1"" of type '" "Handle_Standard_ConstructionError *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_ConstructionError * >(argp1); { try {
+      result = (Standard_ConstructionError *)Handle_Standard_ConstructionError_GetObject(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_ConstructionError, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Handle_Standard_ConstructionError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_ConstructionError *arg1 = (Handle_Standard_ConstructionError *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Handle_Standard_ConstructionError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_ConstructionError, SWIG_POINTER_DISOWN |  0 );
+  if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Handle_Standard_ConstructionError" "', argument " "1"" of type '" "Handle_Standard_ConstructionError *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_ConstructionError * >(argp1); { try {
+      delete_Handle_Standard_ConstructionError(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Handle_Standard_ConstructionError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Handle_Standard_ConstructionError, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_LicenseNotFound__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_LicenseNotFound *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_LicenseNotFound",0,0)) SWIG_fail; { try {
+      result = (Handle_Standard_LicenseNotFound *)new Handle_Standard_LicenseNotFound(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_LicenseNotFound, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_LicenseNotFound__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_LicenseNotFound *arg1 = 0 ; Handle_Standard_LicenseNotFound *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_LicenseNotFound",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Handle_Standard_LicenseNotFound,  0  | 0); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_LicenseNotFound" "', argument " "1"" of type '" "Handle_Standard_LicenseNotFound const &""'");  }
+   if (!argp1) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Handle_Standard_LicenseNotFound" "', argument " "1"" of type '" "Handle_Standard_LicenseNotFound const &""'"); }
+   arg1 = reinterpret_cast< Handle_Standard_LicenseNotFound * >(argp1); { try {
+      result = (Handle_Standard_LicenseNotFound *)new Handle_Standard_LicenseNotFound((Handle_Standard_LicenseNotFound const &)*arg1); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_LicenseNotFound, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_LicenseNotFound__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_LicenseNotFound *arg1 = (Standard_LicenseNotFound *) 0 ;
+  Handle_Standard_LicenseNotFound *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_LicenseNotFound",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_LicenseNotFound, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_LicenseNotFound" "', argument " "1"" of type '" "Standard_LicenseNotFound const *""'");  }
+   arg1 = reinterpret_cast< Standard_LicenseNotFound * >(argp1); { try {
+      result = (Handle_Standard_LicenseNotFound *)new Handle_Standard_LicenseNotFound((Standard_LicenseNotFound const *)arg1); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_LicenseNotFound, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_LicenseNotFound(PyObject *self, PyObject *args) { int argc; PyObject *argv[2];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) {
+    return _wrap_new_Handle_Standard_LicenseNotFound__SWIG_0(self, args);}  if (argc == 1) { int _v;
+    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Handle_Standard_LicenseNotFound, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Handle_Standard_LicenseNotFound__SWIG_1(self, args);}  }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_LicenseNotFound, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Handle_Standard_LicenseNotFound__SWIG_2(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Handle_Standard_LicenseNotFound'.\n  Possible C/C++ prototypes are:\n""    Handle_Standard_LicenseNotFound()\n""    Handle_Standard_LicenseNotFound(Handle_Standard_LicenseNotFound const &)\n""    Handle_Standard_LicenseNotFound(Standard_LicenseNotFound const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_LicenseNotFound_Set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_LicenseNotFound *arg1 = (Handle_Standard_LicenseNotFound *) 0 ;
+  Handle_Standard_LicenseNotFound *arg2 = 0 ; Handle_Standard_LicenseNotFound *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_LicenseNotFound_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_LicenseNotFound, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_LicenseNotFound_Set" "', argument " "1"" of type '" "Handle_Standard_LicenseNotFound *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_LicenseNotFound * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_LicenseNotFound,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_LicenseNotFound_Set" "', argument " "2"" of type '" "Handle_Standard_LicenseNotFound const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_LicenseNotFound_Set" "', argument " "2"" of type '" "Handle_Standard_LicenseNotFound const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_LicenseNotFound * >(argp2); { try { {
+        Handle_Standard_LicenseNotFound &_result_ref = (arg1)->operator =((Handle_Standard_LicenseNotFound const &)*arg2);
+        result = (Handle_Standard_LicenseNotFound *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_LicenseNotFound, 0 |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_LicenseNotFound_Set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_LicenseNotFound *arg1 = (Handle_Standard_LicenseNotFound *) 0 ;
+  Standard_LicenseNotFound *arg2 = (Standard_LicenseNotFound *) 0 ; Handle_Standard_LicenseNotFound *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_LicenseNotFound_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_LicenseNotFound, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_LicenseNotFound_Set" "', argument " "1"" of type '" "Handle_Standard_LicenseNotFound *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_LicenseNotFound * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Standard_LicenseNotFound, 0 |  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_LicenseNotFound_Set" "', argument " "2"" of type '" "Standard_LicenseNotFound const *""'");  }
+   arg2 = reinterpret_cast< Standard_LicenseNotFound * >(argp2); { try { {
+        Handle_Standard_LicenseNotFound &_result_ref = (arg1)->operator =((Standard_LicenseNotFound const *)arg2);
+        result = (Handle_Standard_LicenseNotFound *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_LicenseNotFound, 0 |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_LicenseNotFound_Set(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_LicenseNotFound, 0); _v = SWIG_CheckState(res);
+    if (_v) { int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_LicenseNotFound, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Handle_Standard_LicenseNotFound_Set__SWIG_0(self, args);}  }  }  if (argc == 2) { int _v;
+    void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_LicenseNotFound, 0);
+    _v = SWIG_CheckState(res); if (_v) { void *vptr = 0;
+      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_LicenseNotFound, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Handle_Standard_LicenseNotFound_Set__SWIG_1(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Handle_Standard_LicenseNotFound_Set'.\n  Possible C/C++ prototypes are:\n""    operator =(Handle_Standard_LicenseNotFound *,Handle_Standard_LicenseNotFound const &)\n""    operator =(Handle_Standard_LicenseNotFound *,Standard_LicenseNotFound const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_LicenseNotFound_DownCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_LicenseNotFound *arg1 = (Handle_Standard_LicenseNotFound *) 0 ;
+  Handle_Standard_Transient *arg2 = 0 ; Handle_Standard_LicenseNotFound result; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_LicenseNotFound_DownCast",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_LicenseNotFound, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_LicenseNotFound_DownCast" "', argument " "1"" of type '" "Handle_Standard_LicenseNotFound *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_LicenseNotFound * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Transient,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_LicenseNotFound_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_LicenseNotFound_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Transient * >(argp2); { try {
+      result = (arg1)->DownCast((Handle_Standard_Transient const &)*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_LicenseNotFound(static_cast< const Handle_Standard_LicenseNotFound& >(result))), SWIGTYPE_p_Handle_Standard_LicenseNotFound, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_LicenseNotFound_GetObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_LicenseNotFound *arg1 = (Handle_Standard_LicenseNotFound *) 0 ;
+  Standard_LicenseNotFound *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_LicenseNotFound_GetObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_LicenseNotFound, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_LicenseNotFound_GetObject" "', argument " "1"" of type '" "Handle_Standard_LicenseNotFound *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_LicenseNotFound * >(argp1); { try {
+      result = (Standard_LicenseNotFound *)Handle_Standard_LicenseNotFound_GetObject(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_LicenseNotFound, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Handle_Standard_LicenseNotFound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_LicenseNotFound *arg1 = (Handle_Standard_LicenseNotFound *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Handle_Standard_LicenseNotFound",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_LicenseNotFound, SWIG_POINTER_DISOWN |  0 );
+  if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Handle_Standard_LicenseNotFound" "', argument " "1"" of type '" "Handle_Standard_LicenseNotFound *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_LicenseNotFound * >(argp1); { try { delete_Handle_Standard_LicenseNotFound(arg1); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Handle_Standard_LicenseNotFound_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Handle_Standard_LicenseNotFound, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_MultiplyDefined__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_MultiplyDefined *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_MultiplyDefined",0,0)) SWIG_fail; { try {
+      result = (Handle_Standard_MultiplyDefined *)new Handle_Standard_MultiplyDefined(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_MultiplyDefined, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_MultiplyDefined__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_MultiplyDefined *arg1 = 0 ; Handle_Standard_MultiplyDefined *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_MultiplyDefined",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Handle_Standard_MultiplyDefined,  0  | 0); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_MultiplyDefined" "', argument " "1"" of type '" "Handle_Standard_MultiplyDefined const &""'");  }
+   if (!argp1) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Handle_Standard_MultiplyDefined" "', argument " "1"" of type '" "Handle_Standard_MultiplyDefined const &""'"); }
+   arg1 = reinterpret_cast< Handle_Standard_MultiplyDefined * >(argp1); { try {
+      result = (Handle_Standard_MultiplyDefined *)new Handle_Standard_MultiplyDefined((Handle_Standard_MultiplyDefined const &)*arg1); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_MultiplyDefined, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_MultiplyDefined__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_MultiplyDefined *arg1 = (Standard_MultiplyDefined *) 0 ;
+  Handle_Standard_MultiplyDefined *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_MultiplyDefined",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_MultiplyDefined, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_MultiplyDefined" "', argument " "1"" of type '" "Standard_MultiplyDefined const *""'");  }
+   arg1 = reinterpret_cast< Standard_MultiplyDefined * >(argp1); { try {
+      result = (Handle_Standard_MultiplyDefined *)new Handle_Standard_MultiplyDefined((Standard_MultiplyDefined const *)arg1); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_MultiplyDefined, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_MultiplyDefined(PyObject *self, PyObject *args) { int argc; PyObject *argv[2];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) {
+    return _wrap_new_Handle_Standard_MultiplyDefined__SWIG_0(self, args);}  if (argc == 1) { int _v;
+    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Handle_Standard_MultiplyDefined, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Handle_Standard_MultiplyDefined__SWIG_1(self, args);}  }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_MultiplyDefined, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Handle_Standard_MultiplyDefined__SWIG_2(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Handle_Standard_MultiplyDefined'.\n  Possible C/C++ prototypes are:\n""    Handle_Standard_MultiplyDefined()\n""    Handle_Standard_MultiplyDefined(Handle_Standard_MultiplyDefined const &)\n""    Handle_Standard_MultiplyDefined(Standard_MultiplyDefined const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_MultiplyDefined_Set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_MultiplyDefined *arg1 = (Handle_Standard_MultiplyDefined *) 0 ;
+  Handle_Standard_MultiplyDefined *arg2 = 0 ; Handle_Standard_MultiplyDefined *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_MultiplyDefined_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_MultiplyDefined, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_MultiplyDefined_Set" "', argument " "1"" of type '" "Handle_Standard_MultiplyDefined *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_MultiplyDefined * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_MultiplyDefined,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_MultiplyDefined_Set" "', argument " "2"" of type '" "Handle_Standard_MultiplyDefined const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_MultiplyDefined_Set" "', argument " "2"" of type '" "Handle_Standard_MultiplyDefined const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_MultiplyDefined * >(argp2); { try { {
+        Handle_Standard_MultiplyDefined &_result_ref = (arg1)->operator =((Handle_Standard_MultiplyDefined const &)*arg2);
+        result = (Handle_Standard_MultiplyDefined *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_MultiplyDefined, 0 |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_MultiplyDefined_Set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_MultiplyDefined *arg1 = (Handle_Standard_MultiplyDefined *) 0 ;
+  Standard_MultiplyDefined *arg2 = (Standard_MultiplyDefined *) 0 ; Handle_Standard_MultiplyDefined *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_MultiplyDefined_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_MultiplyDefined, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_MultiplyDefined_Set" "', argument " "1"" of type '" "Handle_Standard_MultiplyDefined *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_MultiplyDefined * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Standard_MultiplyDefined, 0 |  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_MultiplyDefined_Set" "', argument " "2"" of type '" "Standard_MultiplyDefined const *""'");  }
+   arg2 = reinterpret_cast< Standard_MultiplyDefined * >(argp2); { try { {
+        Handle_Standard_MultiplyDefined &_result_ref = (arg1)->operator =((Standard_MultiplyDefined const *)arg2);
+        result = (Handle_Standard_MultiplyDefined *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_MultiplyDefined, 0 |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_MultiplyDefined_Set(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_MultiplyDefined, 0); _v = SWIG_CheckState(res);
+    if (_v) { int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_MultiplyDefined, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Handle_Standard_MultiplyDefined_Set__SWIG_0(self, args);}  }  }  if (argc == 2) { int _v;
+    void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_MultiplyDefined, 0);
+    _v = SWIG_CheckState(res); if (_v) { void *vptr = 0;
+      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_MultiplyDefined, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Handle_Standard_MultiplyDefined_Set__SWIG_1(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Handle_Standard_MultiplyDefined_Set'.\n  Possible C/C++ prototypes are:\n""    operator =(Handle_Standard_MultiplyDefined *,Handle_Standard_MultiplyDefined const &)\n""    operator =(Handle_Standard_MultiplyDefined *,Standard_MultiplyDefined const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_MultiplyDefined_DownCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_MultiplyDefined *arg1 = (Handle_Standard_MultiplyDefined *) 0 ;
+  Handle_Standard_Transient *arg2 = 0 ; Handle_Standard_MultiplyDefined result; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_MultiplyDefined_DownCast",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_MultiplyDefined, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_MultiplyDefined_DownCast" "', argument " "1"" of type '" "Handle_Standard_MultiplyDefined *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_MultiplyDefined * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Transient,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_MultiplyDefined_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_MultiplyDefined_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Transient * >(argp2); { try {
+      result = (arg1)->DownCast((Handle_Standard_Transient const &)*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_MultiplyDefined(static_cast< const Handle_Standard_MultiplyDefined& >(result))), SWIGTYPE_p_Handle_Standard_MultiplyDefined, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_MultiplyDefined_GetObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_MultiplyDefined *arg1 = (Handle_Standard_MultiplyDefined *) 0 ;
+  Standard_MultiplyDefined *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_MultiplyDefined_GetObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_MultiplyDefined, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_MultiplyDefined_GetObject" "', argument " "1"" of type '" "Handle_Standard_MultiplyDefined *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_MultiplyDefined * >(argp1); { try {
+      result = (Standard_MultiplyDefined *)Handle_Standard_MultiplyDefined_GetObject(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_MultiplyDefined, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Handle_Standard_MultiplyDefined(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_MultiplyDefined *arg1 = (Handle_Standard_MultiplyDefined *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Handle_Standard_MultiplyDefined",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_MultiplyDefined, SWIG_POINTER_DISOWN |  0 );
+  if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Handle_Standard_MultiplyDefined" "', argument " "1"" of type '" "Handle_Standard_MultiplyDefined *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_MultiplyDefined * >(argp1); { try { delete_Handle_Standard_MultiplyDefined(arg1); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Handle_Standard_MultiplyDefined_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Handle_Standard_MultiplyDefined, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_TooManyUsers__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_TooManyUsers *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_TooManyUsers",0,0)) SWIG_fail; { try {
+      result = (Handle_Standard_TooManyUsers *)new Handle_Standard_TooManyUsers(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_TooManyUsers, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_TooManyUsers__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_TooManyUsers *arg1 = 0 ; Handle_Standard_TooManyUsers *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_TooManyUsers",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Handle_Standard_TooManyUsers,  0  | 0); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_TooManyUsers" "', argument " "1"" of type '" "Handle_Standard_TooManyUsers const &""'");  }
+   if (!argp1) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Handle_Standard_TooManyUsers" "', argument " "1"" of type '" "Handle_Standard_TooManyUsers const &""'"); }
+   arg1 = reinterpret_cast< Handle_Standard_TooManyUsers * >(argp1); { try {
+      result = (Handle_Standard_TooManyUsers *)new Handle_Standard_TooManyUsers((Handle_Standard_TooManyUsers const &)*arg1); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_TooManyUsers, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_TooManyUsers__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_TooManyUsers *arg1 = (Standard_TooManyUsers *) 0 ;
+  Handle_Standard_TooManyUsers *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Handle_Standard_TooManyUsers",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_TooManyUsers, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Handle_Standard_TooManyUsers" "', argument " "1"" of type '" "Standard_TooManyUsers const *""'");  }
+   arg1 = reinterpret_cast< Standard_TooManyUsers * >(argp1); { try {
+      result = (Handle_Standard_TooManyUsers *)new Handle_Standard_TooManyUsers((Standard_TooManyUsers const *)arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_TooManyUsers, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Handle_Standard_TooManyUsers(PyObject *self, PyObject *args) { int argc; PyObject *argv[2];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Handle_Standard_TooManyUsers__SWIG_0(self, args);}
+   if (argc == 1) { int _v; int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Handle_Standard_TooManyUsers, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_TooManyUsers__SWIG_1(self, args);}  } 
+  if (argc == 1) { int _v; void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_TooManyUsers, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Handle_Standard_TooManyUsers__SWIG_2(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Handle_Standard_TooManyUsers'.\n  Possible C/C++ prototypes are:\n""    Handle_Standard_TooManyUsers()\n""    Handle_Standard_TooManyUsers(Handle_Standard_TooManyUsers const &)\n""    Handle_Standard_TooManyUsers(Standard_TooManyUsers const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_TooManyUsers_Set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_TooManyUsers *arg1 = (Handle_Standard_TooManyUsers *) 0 ;
+  Handle_Standard_TooManyUsers *arg2 = 0 ; Handle_Standard_TooManyUsers *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_TooManyUsers_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_TooManyUsers, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_TooManyUsers_Set" "', argument " "1"" of type '" "Handle_Standard_TooManyUsers *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_TooManyUsers * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_TooManyUsers,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_TooManyUsers_Set" "', argument " "2"" of type '" "Handle_Standard_TooManyUsers const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_TooManyUsers_Set" "', argument " "2"" of type '" "Handle_Standard_TooManyUsers const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_TooManyUsers * >(argp2); { try { {
+        Handle_Standard_TooManyUsers &_result_ref = (arg1)->operator =((Handle_Standard_TooManyUsers const &)*arg2);
+        result = (Handle_Standard_TooManyUsers *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_TooManyUsers, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_TooManyUsers_Set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_TooManyUsers *arg1 = (Handle_Standard_TooManyUsers *) 0 ;
+  Standard_TooManyUsers *arg2 = (Standard_TooManyUsers *) 0 ; Handle_Standard_TooManyUsers *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_TooManyUsers_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_TooManyUsers, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_TooManyUsers_Set" "', argument " "1"" of type '" "Handle_Standard_TooManyUsers *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_TooManyUsers * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Standard_TooManyUsers, 0 |  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_TooManyUsers_Set" "', argument " "2"" of type '" "Standard_TooManyUsers const *""'");  }
+   arg2 = reinterpret_cast< Standard_TooManyUsers * >(argp2); { try { {
+        Handle_Standard_TooManyUsers &_result_ref = (arg1)->operator =((Standard_TooManyUsers const *)arg2);
+        result = (Handle_Standard_TooManyUsers *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_TooManyUsers, 0 |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_TooManyUsers_Set(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_TooManyUsers, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_TooManyUsers, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Handle_Standard_TooManyUsers_Set__SWIG_0(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Handle_Standard_TooManyUsers, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_TooManyUsers, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Handle_Standard_TooManyUsers_Set__SWIG_1(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Handle_Standard_TooManyUsers_Set'.\n  Possible C/C++ prototypes are:\n""    operator =(Handle_Standard_TooManyUsers *,Handle_Standard_TooManyUsers const &)\n""    operator =(Handle_Standard_TooManyUsers *,Standard_TooManyUsers const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_TooManyUsers_DownCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_TooManyUsers *arg1 = (Handle_Standard_TooManyUsers *) 0 ;
+  Handle_Standard_Transient *arg2 = 0 ; Handle_Standard_TooManyUsers result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
+  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_TooManyUsers_DownCast",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_TooManyUsers, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_TooManyUsers_DownCast" "', argument " "1"" of type '" "Handle_Standard_TooManyUsers *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_TooManyUsers * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Transient,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Handle_Standard_TooManyUsers_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Handle_Standard_TooManyUsers_DownCast" "', argument " "2"" of type '" "Handle_Standard_Transient const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Transient * >(argp2); { try {
+      result = (arg1)->DownCast((Handle_Standard_Transient const &)*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_TooManyUsers(static_cast< const Handle_Standard_TooManyUsers& >(result))), SWIGTYPE_p_Handle_Standard_TooManyUsers, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Handle_Standard_TooManyUsers_GetObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_TooManyUsers *arg1 = (Handle_Standard_TooManyUsers *) 0 ;
+  Standard_TooManyUsers *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Handle_Standard_TooManyUsers_GetObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_TooManyUsers, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Handle_Standard_TooManyUsers_GetObject" "', argument " "1"" of type '" "Handle_Standard_TooManyUsers *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_TooManyUsers * >(argp1); { try {
+      result = (Standard_TooManyUsers *)Handle_Standard_TooManyUsers_GetObject(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_TooManyUsers, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Handle_Standard_TooManyUsers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_TooManyUsers *arg1 = (Handle_Standard_TooManyUsers *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Handle_Standard_TooManyUsers",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Handle_Standard_TooManyUsers, SWIG_POINTER_DISOWN |  0 );
+  if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Handle_Standard_TooManyUsers" "', argument " "1"" of type '" "Handle_Standard_TooManyUsers *""'");  }
+   arg1 = reinterpret_cast< Handle_Standard_TooManyUsers * >(argp1); { try { delete_Handle_Standard_TooManyUsers(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Handle_Standard_TooManyUsers_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Handle_Standard_TooManyUsers, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Standard_Transient(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Transient *result = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Standard_Transient",0,0)) SWIG_fail; { try {
+      result = (Standard_Transient *)new Standard_Transient(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_Transient, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Transient_Delete(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Transient *arg1 = (Standard_Transient *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Transient_Delete",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Transient, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Transient_Delete" "', argument " "1"" of type '" "Standard_Transient const *""'");  }
+   arg1 = reinterpret_cast< Standard_Transient * >(argp1); { try { ((Standard_Transient const *)arg1)->Delete(); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Transient_HashCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Transient *arg1 = (Standard_Transient *) 0 ; Standard_Integer arg2 ;
+  Standard_Integer result; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ;
+  PyObject * obj1 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_Transient_HashCode",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Transient, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Transient_HashCode" "', argument " "1"" of type '" "Standard_Transient const *""'");  }
+   arg1 = reinterpret_cast< Standard_Transient * >(argp1); ecode2 = SWIG_AsVal_int(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Standard_Transient_HashCode" "', argument " "2"" of type '" "Standard_Integer""'"); }
+    arg2 = static_cast< Standard_Integer >(val2); { try {
+      result = (Standard_Integer)((Standard_Transient const *)arg1)->HashCode(arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Transient_ShallowDumpToString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Transient *arg1 = (Standard_Transient *) 0 ; std::string result; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Transient_ShallowDumpToString",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Transient, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Transient_ShallowDumpToString" "', argument " "1"" of type '" "Standard_Transient *""'");  }
+   arg1 = reinterpret_cast< Standard_Transient * >(argp1); { try { result = Standard_Transient_ShallowDumpToString(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_std_string(static_cast< std::string >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Transient_DynamicType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Transient *arg1 = (Standard_Transient *) 0 ; Handle_Standard_Type *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Transient_DynamicType",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Transient, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Transient_DynamicType" "', argument " "1"" of type '" "Standard_Transient const *""'");  }
+   arg1 = reinterpret_cast< Standard_Transient * >(argp1); { try { {
+        Handle_Standard_Type const &_result_ref = ((Standard_Transient const *)arg1)->DynamicType();
+        result = (Handle_Standard_Type *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Type, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Transient_IsInstance__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Transient *arg1 = (Standard_Transient *) 0 ; Handle_Standard_Type *arg2 = 0 ;
+  Standard_Boolean result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ;
+  PyObject * obj1 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_Transient_IsInstance",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Transient, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Transient_IsInstance" "', argument " "1"" of type '" "Standard_Transient const *""'");  }
+   arg1 = reinterpret_cast< Standard_Transient * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Type,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_Transient_IsInstance" "', argument " "2"" of type '" "Handle_Standard_Type const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_Transient_IsInstance" "', argument " "2"" of type '" "Handle_Standard_Type const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Type * >(argp2); { try {
+      result = (Standard_Boolean)((Standard_Transient const *)arg1)->IsInstance((Handle_Standard_Type const &)*arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Transient_IsInstance__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Transient *arg1 = (Standard_Transient *) 0 ; char *arg2 = (char *) 0 ;
+  Standard_Boolean result; void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ; PyObject * obj0 = 0 ;
+  PyObject * obj1 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_Transient_IsInstance",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Transient, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Transient_IsInstance" "', argument " "1"" of type '" "Standard_Transient const *""'");  }
+   arg1 = reinterpret_cast< Standard_Transient * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_Transient_IsInstance" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try {
+      result = (Standard_Boolean)((Standard_Transient const *)arg1)->IsInstance((char const *)arg2); }   catch(Standard_Failure)
+    { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)); if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
+  return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Transient_IsInstance(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_Transient, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_Type, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Standard_Transient_IsInstance__SWIG_0(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_Transient, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Standard_Transient_IsInstance__SWIG_1(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Standard_Transient_IsInstance'.\n  Possible C/C++ prototypes are:\n""    IsInstance(Standard_Transient const *,Handle_Standard_Type const &)\n""    IsInstance(Standard_Transient const *,char const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Transient_IsKind__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Transient *arg1 = (Standard_Transient *) 0 ; Handle_Standard_Type *arg2 = 0 ;
+  Standard_Boolean result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ;
+  PyObject * obj1 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_Transient_IsKind",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Transient, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Transient_IsKind" "', argument " "1"" of type '" "Standard_Transient const *""'");  }
+   arg1 = reinterpret_cast< Standard_Transient * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Type,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_Transient_IsKind" "', argument " "2"" of type '" "Handle_Standard_Type const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_Transient_IsKind" "', argument " "2"" of type '" "Handle_Standard_Type const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Type * >(argp2); { try {
+      result = (Standard_Boolean)((Standard_Transient const *)arg1)->IsKind((Handle_Standard_Type const &)*arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Transient_IsKind__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Transient *arg1 = (Standard_Transient *) 0 ; char *arg2 = (char *) 0 ;
+  Standard_Boolean result; void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ; PyObject * obj0 = 0 ;
+  PyObject * obj1 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_Transient_IsKind",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Transient, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Transient_IsKind" "', argument " "1"" of type '" "Standard_Transient const *""'");  }
+   arg1 = reinterpret_cast< Standard_Transient * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_Transient_IsKind" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try {
+      result = (Standard_Boolean)((Standard_Transient const *)arg1)->IsKind((char const *)arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)); if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
+  return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Transient_IsKind(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_Transient, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_Type, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Standard_Transient_IsKind__SWIG_0(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_Transient, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Standard_Transient_IsKind__SWIG_1(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Standard_Transient_IsKind'.\n  Possible C/C++ prototypes are:\n""    IsKind(Standard_Transient const *,Handle_Standard_Type const &)\n""    IsKind(Standard_Transient const *,char const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Transient_This(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Transient *arg1 = (Standard_Transient *) 0 ; Handle_Standard_Transient result; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_Transient_This",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Transient, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Transient_This" "', argument " "1"" of type '" "Standard_Transient const *""'");  }
+   arg1 = reinterpret_cast< Standard_Transient * >(argp1); { try { result = ((Standard_Transient const *)arg1)->This(); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_Transient(static_cast< const Handle_Standard_Transient& >(result))), SWIGTYPE_p_Handle_Standard_Transient, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Transient_GetRefCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Transient *arg1 = (Standard_Transient *) 0 ; Standard_Integer result; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Transient_GetRefCount",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Transient, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Transient_GetRefCount" "', argument " "1"" of type '" "Standard_Transient const *""'");  }
+   arg1 = reinterpret_cast< Standard_Transient * >(argp1); { try {
+      result = (Standard_Integer)((Standard_Transient const *)arg1)->GetRefCount(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Transient_GetHandle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Transient *arg1 = (Standard_Transient *) 0 ; Handle_Standard_Transient result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Transient_GetHandle",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Transient, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Transient_GetHandle" "', argument " "1"" of type '" "Standard_Transient *""'");  }
+   arg1 = reinterpret_cast< Standard_Transient * >(argp1); { try { result = Standard_Transient_GetHandle(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_Transient(static_cast< const Handle_Standard_Transient& >(result))), SWIGTYPE_p_Handle_Standard_Transient, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Transient___hash__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Transient *arg1 = (Standard_Transient *) 0 ; Standard_Integer result; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_Transient___hash__",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Transient, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Transient___hash__" "', argument " "1"" of type '" "Standard_Transient *""'");  }
+   arg1 = reinterpret_cast< Standard_Transient * >(argp1); { try {
+      result = (Standard_Integer)Standard_Transient___hash__(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_Transient(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Transient *arg1 = (Standard_Transient *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_Transient",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Transient, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_Transient" "', argument " "1"" of type '" "Standard_Transient *""'");  }
+   arg1 = reinterpret_cast< Standard_Transient * >(argp1); { try { delete_Standard_Transient(arg1); }   catch(Standard_Failure)
+    { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_Transient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_Transient, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Standard_Failure__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Failure *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_Failure",0,0)) SWIG_fail; { try {
+      result = (Standard_Failure *)new Standard_Failure(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_Failure, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_Failure__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Failure *arg1 = 0 ; Standard_Failure *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Standard_Failure",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Standard_Failure,  0  | 0); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_Failure" "', argument " "1"" of type '" "Standard_Failure const &""'");  }
+   if (!argp1) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Standard_Failure" "', argument " "1"" of type '" "Standard_Failure const &""'"); }
+   arg1 = reinterpret_cast< Standard_Failure * >(argp1); { try {
+      result = (Standard_Failure *)new Standard_Failure((Standard_Failure const &)*arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_Failure, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_Failure__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; char *arg1 = (char *) 0 ; Standard_Failure *result = 0 ; int res1 ; char *buf1 = 0 ; int alloc1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Standard_Failure",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_Failure" "', argument " "1"" of type '" "char const *""'"); }
+   arg1 = reinterpret_cast< char * >(buf1); { try { result = (Standard_Failure *)new Standard_Failure((char const *)arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_Failure, SWIG_POINTER_NEW |  0 );
+  if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return resultobj; fail: if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_Failure(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Standard_Failure__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Standard_Failure, 0); _v = SWIG_CheckState(res);
+    if (_v) { return _wrap_new_Standard_Failure__SWIG_1(self, args);}  }  if (argc == 1) { int _v;
+    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Standard_Failure__SWIG_2(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Standard_Failure'.\n  Possible C/C++ prototypes are:\n""    Standard_Failure()\n""    Standard_Failure(Standard_Failure const &)\n""    Standard_Failure(char const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Failure_Destroy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Failure *arg1 = (Standard_Failure *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Failure_Destroy",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Failure, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Failure_Destroy" "', argument " "1"" of type '" "Standard_Failure *""'");  }
+   arg1 = reinterpret_cast< Standard_Failure * >(argp1); { try { (arg1)->Destroy(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Failure_PrintToString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Failure *arg1 = (Standard_Failure *) 0 ; std::string result; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Failure_PrintToString",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Failure, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Failure_PrintToString" "', argument " "1"" of type '" "Standard_Failure *""'");  }
+   arg1 = reinterpret_cast< Standard_Failure * >(argp1); { try { result = Standard_Failure_PrintToString(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_std_string(static_cast< std::string >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Failure_GetMessageString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Failure *arg1 = (Standard_Failure *) 0 ; Standard_CString result; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Failure_GetMessageString",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Failure, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Failure_GetMessageString" "', argument " "1"" of type '" "Standard_Failure const *""'");  }
+   arg1 = reinterpret_cast< Standard_Failure * >(argp1); { try {
+      result = (Standard_CString)((Standard_Failure const *)arg1)->GetMessageString(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_FromCharPtr((const char *)result); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Failure_SetMessageString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Failure *arg1 = (Standard_Failure *) 0 ; char *arg2 = (char *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Failure_SetMessageString",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Failure, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Failure_SetMessageString" "', argument " "1"" of type '" "Standard_Failure *""'");  }
+   arg1 = reinterpret_cast< Standard_Failure * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_Failure_SetMessageString" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { (arg1)->SetMessageString((char const *)arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Failure_Reraise__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Failure *arg1 = (Standard_Failure *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_Failure_Reraise",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Failure, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Failure_Reraise" "', argument " "1"" of type '" "Standard_Failure *""'");  }
+   arg1 = reinterpret_cast< Standard_Failure * >(argp1); { try { (arg1)->Reraise(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Failure_Reraise__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Failure *arg1 = (Standard_Failure *) 0 ; char *arg2 = (char *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Failure_Reraise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Failure, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Failure_Reraise" "', argument " "1"" of type '" "Standard_Failure *""'");  }
+   arg1 = reinterpret_cast< Standard_Failure * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_Failure_Reraise" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { (arg1)->Reraise((char const *)arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Failure_Reraise(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_Failure, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_Standard_Failure_Reraise__SWIG_0(self, args);}  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_Failure, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Standard_Failure_Reraise__SWIG_1(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Standard_Failure_Reraise'.\n  Possible C/C++ prototypes are:\n""    Reraise(Standard_Failure *)\n""    Reraise(Standard_Failure *,char const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Failure_Raise__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Failure *arg1 = (Standard_Failure *) 0 ; char *arg2 = (char *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Failure_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Failure, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Failure_Raise" "', argument " "1"" of type '" "Standard_Failure *""'");  }
+   arg1 = reinterpret_cast< Standard_Failure * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_Failure_Raise" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { (arg1)->Raise((char const *)arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Failure_Raise__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Failure *arg1 = (Standard_Failure *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_Failure_Raise",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Failure, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Failure_Raise" "', argument " "1"" of type '" "Standard_Failure *""'");  }
+   arg1 = reinterpret_cast< Standard_Failure * >(argp1); { try { (arg1)->Raise(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Failure_Raise__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Failure *arg1 = (Standard_Failure *) 0 ; Standard_SStream *arg2 = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Failure_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Failure, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Failure_Raise" "', argument " "1"" of type '" "Standard_Failure *""'");  }
+   arg1 = reinterpret_cast< Standard_Failure * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Standard_SStream,  0 );
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_Failure_Raise" "', argument " "2"" of type '" "Standard_SStream &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_Failure_Raise" "', argument " "2"" of type '" "Standard_SStream &""'"); }
+   arg2 = reinterpret_cast< Standard_SStream * >(argp2); { try { (arg1)->Raise(*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Failure_Raise(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_Failure, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_Standard_Failure_Raise__SWIG_1(self, args);}  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_Failure, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_SStream, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Standard_Failure_Raise__SWIG_2(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_Failure, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Standard_Failure_Raise__SWIG_0(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Standard_Failure_Raise'.\n  Possible C/C++ prototypes are:\n""    Raise(Standard_Failure *,char const *)\n""    Raise(Standard_Failure *)\n""    Raise(Standard_Failure *,Standard_SStream &)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Failure_NewInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Failure *arg1 = (Standard_Failure *) 0 ; char *arg2 = (char *) 0 ;
+  Handle_Standard_Failure result; void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ;
+  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Failure_NewInstance",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Failure, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Failure_NewInstance" "', argument " "1"" of type '" "Standard_Failure *""'");  }
+   arg1 = reinterpret_cast< Standard_Failure * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_Failure_NewInstance" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { result = (arg1)->NewInstance((char const *)arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_Failure(static_cast< const Handle_Standard_Failure& >(result))), SWIGTYPE_p_Handle_Standard_Failure, SWIG_POINTER_OWN |  0 );
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Failure_Jump(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Failure *arg1 = (Standard_Failure *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Failure_Jump",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Failure, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Failure_Jump" "', argument " "1"" of type '" "Standard_Failure const *""'");  }
+   arg1 = reinterpret_cast< Standard_Failure * >(argp1); { try { ((Standard_Failure const *)arg1)->Jump(); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Failure_Caught(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Failure *arg1 = (Standard_Failure *) 0 ; Handle_Standard_Failure result; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_Failure_Caught",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Failure, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Failure_Caught" "', argument " "1"" of type '" "Standard_Failure *""'");  }
+   arg1 = reinterpret_cast< Standard_Failure * >(argp1); { try { result = (arg1)->Caught(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_Failure(static_cast< const Handle_Standard_Failure& >(result))), SWIGTYPE_p_Handle_Standard_Failure, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Failure_GetHandle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Failure *arg1 = (Standard_Failure *) 0 ; Handle_Standard_Failure result; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_Failure_GetHandle",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Failure, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Failure_GetHandle" "', argument " "1"" of type '" "Standard_Failure *""'");  }
+   arg1 = reinterpret_cast< Standard_Failure * >(argp1); { try { result = Standard_Failure_GetHandle(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_Failure(static_cast< const Handle_Standard_Failure& >(result))), SWIGTYPE_p_Handle_Standard_Failure, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Failure___hash__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Failure *arg1 = (Standard_Failure *) 0 ; Standard_Integer result; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_Failure___hash__",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Failure, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Failure___hash__" "', argument " "1"" of type '" "Standard_Failure *""'");  }
+   arg1 = reinterpret_cast< Standard_Failure * >(argp1); { try { result = (Standard_Integer)Standard_Failure___hash__(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_Failure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Failure *arg1 = (Standard_Failure *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_Failure",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Failure, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_Failure" "', argument " "1"" of type '" "Standard_Failure *""'");  }
+   arg1 = reinterpret_cast< Standard_Failure * >(argp1); { try { delete_Standard_Failure(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_Failure_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_Failure, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Standard_LicenseError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_LicenseError *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_LicenseError",0,0)) SWIG_fail; { try {
+      result = (Standard_LicenseError *)new Standard_LicenseError(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_LicenseError, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_LicenseError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; char *arg1 = (char *) 0 ; Standard_LicenseError *result = 0 ; int res1 ; char *buf1 = 0 ;
+  int alloc1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Standard_LicenseError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_LicenseError" "', argument " "1"" of type '" "char const *""'"); }
+   arg1 = reinterpret_cast< char * >(buf1); { try {
+      result = (Standard_LicenseError *)new Standard_LicenseError((char const *)arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_LicenseError, SWIG_POINTER_NEW |  0 );
+  if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return resultobj; fail: if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_LicenseError(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Standard_LicenseError__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Standard_LicenseError__SWIG_1(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Standard_LicenseError'.\n  Possible C/C++ prototypes are:\n""    Standard_LicenseError()\n""    Standard_LicenseError(char const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_LicenseError_NewInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_LicenseError *arg1 = (Standard_LicenseError *) 0 ; char *arg2 = (char *) 0 ;
+  Handle_Standard_LicenseError result; void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ;
+  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_LicenseError_NewInstance",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_LicenseError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_LicenseError_NewInstance" "', argument " "1"" of type '" "Standard_LicenseError *""'");  }
+   arg1 = reinterpret_cast< Standard_LicenseError * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_LicenseError_NewInstance" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { result = (arg1)->NewInstance((char const *)arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_LicenseError(static_cast< const Handle_Standard_LicenseError& >(result))), SWIGTYPE_p_Handle_Standard_LicenseError, SWIG_POINTER_OWN |  0 );
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_LicenseError_GetHandle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_LicenseError *arg1 = (Standard_LicenseError *) 0 ; Handle_Standard_LicenseError result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_LicenseError_GetHandle",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_LicenseError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_LicenseError_GetHandle" "', argument " "1"" of type '" "Standard_LicenseError *""'");  }
+   arg1 = reinterpret_cast< Standard_LicenseError * >(argp1); { try { result = Standard_LicenseError_GetHandle(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_LicenseError(static_cast< const Handle_Standard_LicenseError& >(result))), SWIGTYPE_p_Handle_Standard_LicenseError, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_LicenseError___hash__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_LicenseError *arg1 = (Standard_LicenseError *) 0 ; Standard_Integer result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_LicenseError___hash__",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_LicenseError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_LicenseError___hash__" "', argument " "1"" of type '" "Standard_LicenseError *""'");  }
+   arg1 = reinterpret_cast< Standard_LicenseError * >(argp1); { try {
+      result = (Standard_Integer)Standard_LicenseError___hash__(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_LicenseError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_LicenseError *arg1 = (Standard_LicenseError *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_LicenseError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_LicenseError, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_LicenseError" "', argument " "1"" of type '" "Standard_LicenseError *""'");  }
+   arg1 = reinterpret_cast< Standard_LicenseError * >(argp1); { try { delete_Standard_LicenseError(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_LicenseError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_LicenseError, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Standard_DomainError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DomainError *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_DomainError",0,0)) SWIG_fail; { try {
+      result = (Standard_DomainError *)new Standard_DomainError(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_DomainError, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_DomainError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; char *arg1 = (char *) 0 ; Standard_DomainError *result = 0 ; int res1 ; char *buf1 = 0 ;
+  int alloc1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Standard_DomainError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_DomainError" "', argument " "1"" of type '" "char const *""'"); }
+   arg1 = reinterpret_cast< char * >(buf1); { try {
+      result = (Standard_DomainError *)new Standard_DomainError((char const *)arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_DomainError, SWIG_POINTER_NEW |  0 );
+  if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return resultobj; fail: if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_DomainError(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Standard_DomainError__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Standard_DomainError__SWIG_1(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Standard_DomainError'.\n  Possible C/C++ prototypes are:\n""    Standard_DomainError()\n""    Standard_DomainError(char const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_DomainError_Raise__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DomainError *arg1 = (Standard_DomainError *) 0 ; char *arg2 = (char *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_DomainError_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DomainError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_DomainError_Raise" "', argument " "1"" of type '" "Standard_DomainError *""'");  }
+   arg1 = reinterpret_cast< Standard_DomainError * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_DomainError_Raise" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { (arg1)->Raise((char const *)arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_DomainError_Raise__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DomainError *arg1 = (Standard_DomainError *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_DomainError_Raise",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DomainError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_DomainError_Raise" "', argument " "1"" of type '" "Standard_DomainError *""'");  }
+   arg1 = reinterpret_cast< Standard_DomainError * >(argp1); { try { (arg1)->Raise(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_DomainError_Raise__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DomainError *arg1 = (Standard_DomainError *) 0 ; Standard_SStream *arg2 = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_DomainError_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DomainError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_DomainError_Raise" "', argument " "1"" of type '" "Standard_DomainError *""'");  }
+   arg1 = reinterpret_cast< Standard_DomainError * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Standard_SStream,  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_DomainError_Raise" "', argument " "2"" of type '" "Standard_SStream &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_DomainError_Raise" "', argument " "2"" of type '" "Standard_SStream &""'"); }
+   arg2 = reinterpret_cast< Standard_SStream * >(argp2); { try { (arg1)->Raise(*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_DomainError_Raise(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_DomainError, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_Standard_DomainError_Raise__SWIG_1(self, args);}  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_DomainError, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_SStream, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Standard_DomainError_Raise__SWIG_2(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_DomainError, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Standard_DomainError_Raise__SWIG_0(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Standard_DomainError_Raise'.\n  Possible C/C++ prototypes are:\n""    Raise(Standard_DomainError *,char const *)\n""    Raise(Standard_DomainError *)\n""    Raise(Standard_DomainError *,Standard_SStream &)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_DomainError_NewInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DomainError *arg1 = (Standard_DomainError *) 0 ; char *arg2 = (char *) 0 ;
+  Handle_Standard_DomainError result; void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ;
+  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_DomainError_NewInstance",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DomainError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_DomainError_NewInstance" "', argument " "1"" of type '" "Standard_DomainError *""'");  }
+   arg1 = reinterpret_cast< Standard_DomainError * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_DomainError_NewInstance" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { result = (arg1)->NewInstance((char const *)arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_DomainError(static_cast< const Handle_Standard_DomainError& >(result))), SWIGTYPE_p_Handle_Standard_DomainError, SWIG_POINTER_OWN |  0 );
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_DomainError_DynamicType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DomainError *arg1 = (Standard_DomainError *) 0 ; Handle_Standard_Type *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_DomainError_DynamicType",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DomainError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_DomainError_DynamicType" "', argument " "1"" of type '" "Standard_DomainError const *""'");  }
+   arg1 = reinterpret_cast< Standard_DomainError * >(argp1); { try { {
+        Handle_Standard_Type const &_result_ref = ((Standard_DomainError const *)arg1)->DynamicType();
+        result = (Handle_Standard_Type *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Type, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_DomainError_GetHandle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DomainError *arg1 = (Standard_DomainError *) 0 ; Handle_Standard_DomainError result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_DomainError_GetHandle",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DomainError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_DomainError_GetHandle" "', argument " "1"" of type '" "Standard_DomainError *""'");  }
+   arg1 = reinterpret_cast< Standard_DomainError * >(argp1); { try { result = Standard_DomainError_GetHandle(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_DomainError(static_cast< const Handle_Standard_DomainError& >(result))), SWIGTYPE_p_Handle_Standard_DomainError, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_DomainError___hash__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DomainError *arg1 = (Standard_DomainError *) 0 ; Standard_Integer result; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_DomainError___hash__",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DomainError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_DomainError___hash__" "', argument " "1"" of type '" "Standard_DomainError *""'");  }
+   arg1 = reinterpret_cast< Standard_DomainError * >(argp1); { try {
+      result = (Standard_Integer)Standard_DomainError___hash__(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_DomainError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DomainError *arg1 = (Standard_DomainError *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_DomainError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DomainError, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_DomainError" "', argument " "1"" of type '" "Standard_DomainError *""'");  }
+   arg1 = reinterpret_cast< Standard_DomainError * >(argp1); { try { delete_Standard_DomainError(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_DomainError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_DomainError, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Standard_NoSuchObject__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NoSuchObject *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_NoSuchObject",0,0)) SWIG_fail; { try {
+      result = (Standard_NoSuchObject *)new Standard_NoSuchObject(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_NoSuchObject, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_NoSuchObject__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; char *arg1 = (char *) 0 ; Standard_NoSuchObject *result = 0 ; int res1 ; char *buf1 = 0 ;
+  int alloc1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Standard_NoSuchObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_NoSuchObject" "', argument " "1"" of type '" "char const *""'"); }
+   arg1 = reinterpret_cast< char * >(buf1); { try {
+      result = (Standard_NoSuchObject *)new Standard_NoSuchObject((char const *)arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_NoSuchObject, SWIG_POINTER_NEW |  0 );
+  if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return resultobj; fail: if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_NoSuchObject(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Standard_NoSuchObject__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Standard_NoSuchObject__SWIG_1(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Standard_NoSuchObject'.\n  Possible C/C++ prototypes are:\n""    Standard_NoSuchObject()\n""    Standard_NoSuchObject(char const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NoSuchObject_NewInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NoSuchObject *arg1 = (Standard_NoSuchObject *) 0 ; char *arg2 = (char *) 0 ;
+  Handle_Standard_NoSuchObject result; void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ;
+  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_NoSuchObject_NewInstance",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NoSuchObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NoSuchObject_NewInstance" "', argument " "1"" of type '" "Standard_NoSuchObject *""'");  }
+   arg1 = reinterpret_cast< Standard_NoSuchObject * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_NoSuchObject_NewInstance" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { result = (arg1)->NewInstance((char const *)arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_NoSuchObject(static_cast< const Handle_Standard_NoSuchObject& >(result))), SWIGTYPE_p_Handle_Standard_NoSuchObject, SWIG_POINTER_OWN |  0 );
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NoSuchObject_GetHandle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NoSuchObject *arg1 = (Standard_NoSuchObject *) 0 ; Handle_Standard_NoSuchObject result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_NoSuchObject_GetHandle",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NoSuchObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NoSuchObject_GetHandle" "', argument " "1"" of type '" "Standard_NoSuchObject *""'");  }
+   arg1 = reinterpret_cast< Standard_NoSuchObject * >(argp1); { try { result = Standard_NoSuchObject_GetHandle(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_NoSuchObject(static_cast< const Handle_Standard_NoSuchObject& >(result))), SWIGTYPE_p_Handle_Standard_NoSuchObject, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NoSuchObject___hash__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NoSuchObject *arg1 = (Standard_NoSuchObject *) 0 ; Standard_Integer result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_NoSuchObject___hash__",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NoSuchObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NoSuchObject___hash__" "', argument " "1"" of type '" "Standard_NoSuchObject *""'");  }
+   arg1 = reinterpret_cast< Standard_NoSuchObject * >(argp1); { try {
+      result = (Standard_Integer)Standard_NoSuchObject___hash__(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_NoSuchObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NoSuchObject *arg1 = (Standard_NoSuchObject *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_NoSuchObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NoSuchObject, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_NoSuchObject" "', argument " "1"" of type '" "Standard_NoSuchObject *""'");  }
+   arg1 = reinterpret_cast< Standard_NoSuchObject * >(argp1); { try { delete_Standard_NoSuchObject(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_NoSuchObject_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_NoSuchObject, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Standard_RangeError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_RangeError *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_RangeError",0,0)) SWIG_fail; { try {
+      result = (Standard_RangeError *)new Standard_RangeError(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_RangeError, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_RangeError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; char *arg1 = (char *) 0 ; Standard_RangeError *result = 0 ; int res1 ; char *buf1 = 0 ;
+  int alloc1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Standard_RangeError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_RangeError" "', argument " "1"" of type '" "char const *""'"); }
+   arg1 = reinterpret_cast< char * >(buf1); { try {
+      result = (Standard_RangeError *)new Standard_RangeError((char const *)arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_RangeError, SWIG_POINTER_NEW |  0 );
+  if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return resultobj; fail: if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_RangeError(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Standard_RangeError__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Standard_RangeError__SWIG_1(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Standard_RangeError'.\n  Possible C/C++ prototypes are:\n""    Standard_RangeError()\n""    Standard_RangeError(char const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_RangeError_Raise__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_RangeError *arg1 = (Standard_RangeError *) 0 ; char *arg2 = (char *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_RangeError_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_RangeError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_RangeError_Raise" "', argument " "1"" of type '" "Standard_RangeError *""'");  }
+   arg1 = reinterpret_cast< Standard_RangeError * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_RangeError_Raise" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { (arg1)->Raise((char const *)arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_RangeError_Raise__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_RangeError *arg1 = (Standard_RangeError *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_RangeError_Raise",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_RangeError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_RangeError_Raise" "', argument " "1"" of type '" "Standard_RangeError *""'");  }
+   arg1 = reinterpret_cast< Standard_RangeError * >(argp1); { try { (arg1)->Raise(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_RangeError_Raise__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_RangeError *arg1 = (Standard_RangeError *) 0 ; Standard_SStream *arg2 = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_RangeError_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_RangeError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_RangeError_Raise" "', argument " "1"" of type '" "Standard_RangeError *""'");  }
+   arg1 = reinterpret_cast< Standard_RangeError * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Standard_SStream,  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_RangeError_Raise" "', argument " "2"" of type '" "Standard_SStream &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_RangeError_Raise" "', argument " "2"" of type '" "Standard_SStream &""'"); }
+   arg2 = reinterpret_cast< Standard_SStream * >(argp2); { try { (arg1)->Raise(*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_RangeError_Raise(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_RangeError, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_Standard_RangeError_Raise__SWIG_1(self, args);}  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_RangeError, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_SStream, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Standard_RangeError_Raise__SWIG_2(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_RangeError, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Standard_RangeError_Raise__SWIG_0(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Standard_RangeError_Raise'.\n  Possible C/C++ prototypes are:\n""    Raise(Standard_RangeError *,char const *)\n""    Raise(Standard_RangeError *)\n""    Raise(Standard_RangeError *,Standard_SStream &)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_RangeError_NewInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_RangeError *arg1 = (Standard_RangeError *) 0 ; char *arg2 = (char *) 0 ;
+  Handle_Standard_RangeError result; void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ;
+  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_RangeError_NewInstance",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_RangeError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_RangeError_NewInstance" "', argument " "1"" of type '" "Standard_RangeError *""'");  }
+   arg1 = reinterpret_cast< Standard_RangeError * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_RangeError_NewInstance" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { result = (arg1)->NewInstance((char const *)arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_RangeError(static_cast< const Handle_Standard_RangeError& >(result))), SWIGTYPE_p_Handle_Standard_RangeError, SWIG_POINTER_OWN |  0 );
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_RangeError_DynamicType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_RangeError *arg1 = (Standard_RangeError *) 0 ; Handle_Standard_Type *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_RangeError_DynamicType",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_RangeError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_RangeError_DynamicType" "', argument " "1"" of type '" "Standard_RangeError const *""'");  }
+   arg1 = reinterpret_cast< Standard_RangeError * >(argp1); { try { {
+        Handle_Standard_Type const &_result_ref = ((Standard_RangeError const *)arg1)->DynamicType();
+        result = (Handle_Standard_Type *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Type, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_RangeError_GetHandle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_RangeError *arg1 = (Standard_RangeError *) 0 ; Handle_Standard_RangeError result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_RangeError_GetHandle",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_RangeError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_RangeError_GetHandle" "', argument " "1"" of type '" "Standard_RangeError *""'");  }
+   arg1 = reinterpret_cast< Standard_RangeError * >(argp1); { try { result = Standard_RangeError_GetHandle(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_RangeError(static_cast< const Handle_Standard_RangeError& >(result))), SWIGTYPE_p_Handle_Standard_RangeError, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_RangeError___hash__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_RangeError *arg1 = (Standard_RangeError *) 0 ; Standard_Integer result; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_RangeError___hash__",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_RangeError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_RangeError___hash__" "', argument " "1"" of type '" "Standard_RangeError *""'");  }
+   arg1 = reinterpret_cast< Standard_RangeError * >(argp1); { try {
+      result = (Standard_Integer)Standard_RangeError___hash__(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_RangeError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_RangeError *arg1 = (Standard_RangeError *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_RangeError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_RangeError, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_RangeError" "', argument " "1"" of type '" "Standard_RangeError *""'");  }
+   arg1 = reinterpret_cast< Standard_RangeError * >(argp1); { try { delete_Standard_RangeError(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_RangeError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_RangeError, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Standard_NullValue__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NullValue *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_NullValue",0,0)) SWIG_fail; { try {
+      result = (Standard_NullValue *)new Standard_NullValue(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_NullValue, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_NullValue__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; char *arg1 = (char *) 0 ; Standard_NullValue *result = 0 ; int res1 ; char *buf1 = 0 ;
+  int alloc1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Standard_NullValue",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_NullValue" "', argument " "1"" of type '" "char const *""'"); }
+   arg1 = reinterpret_cast< char * >(buf1); { try { result = (Standard_NullValue *)new Standard_NullValue((char const *)arg1); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_NullValue, SWIG_POINTER_NEW |  0 );
+  if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return resultobj; fail: if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_NullValue(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Standard_NullValue__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Standard_NullValue__SWIG_1(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Standard_NullValue'.\n  Possible C/C++ prototypes are:\n""    Standard_NullValue()\n""    Standard_NullValue(char const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NullValue_NewInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NullValue *arg1 = (Standard_NullValue *) 0 ; char *arg2 = (char *) 0 ;
+  Handle_Standard_NullValue result; void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ;
+  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_NullValue_NewInstance",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NullValue, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NullValue_NewInstance" "', argument " "1"" of type '" "Standard_NullValue *""'");  }
+   arg1 = reinterpret_cast< Standard_NullValue * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_NullValue_NewInstance" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { result = (arg1)->NewInstance((char const *)arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_NullValue(static_cast< const Handle_Standard_NullValue& >(result))), SWIGTYPE_p_Handle_Standard_NullValue, SWIG_POINTER_OWN |  0 );
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NullValue_GetHandle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NullValue *arg1 = (Standard_NullValue *) 0 ; Handle_Standard_NullValue result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_NullValue_GetHandle",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NullValue, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NullValue_GetHandle" "', argument " "1"" of type '" "Standard_NullValue *""'");  }
+   arg1 = reinterpret_cast< Standard_NullValue * >(argp1); { try { result = Standard_NullValue_GetHandle(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_NullValue(static_cast< const Handle_Standard_NullValue& >(result))), SWIGTYPE_p_Handle_Standard_NullValue, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NullValue___hash__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NullValue *arg1 = (Standard_NullValue *) 0 ; Standard_Integer result; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_NullValue___hash__",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NullValue, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NullValue___hash__" "', argument " "1"" of type '" "Standard_NullValue *""'");  }
+   arg1 = reinterpret_cast< Standard_NullValue * >(argp1); { try {
+      result = (Standard_Integer)Standard_NullValue___hash__(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_NullValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_NullValue *arg1 = (Standard_NullValue *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_NullValue",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NullValue, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_NullValue" "', argument " "1"" of type '" "Standard_NullValue *""'");  }
+   arg1 = reinterpret_cast< Standard_NullValue * >(argp1); { try { delete_Standard_NullValue(arg1); }   catch(Standard_Failure)
+    { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_NullValue_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_NullValue, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Standard_ConstructionError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ConstructionError *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_ConstructionError",0,0)) SWIG_fail; { try {
+      result = (Standard_ConstructionError *)new Standard_ConstructionError(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_ConstructionError, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_ConstructionError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; char *arg1 = (char *) 0 ; Standard_ConstructionError *result = 0 ; int res1 ; char *buf1 = 0 ;
+  int alloc1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_ConstructionError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_ConstructionError" "', argument " "1"" of type '" "char const *""'"); }
+   arg1 = reinterpret_cast< char * >(buf1); { try {
+      result = (Standard_ConstructionError *)new Standard_ConstructionError((char const *)arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_ConstructionError, SWIG_POINTER_NEW |  0 );
+  if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return resultobj; fail: if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_ConstructionError(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Standard_ConstructionError__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Standard_ConstructionError__SWIG_1(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Standard_ConstructionError'.\n  Possible C/C++ prototypes are:\n""    Standard_ConstructionError()\n""    Standard_ConstructionError(char const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_ConstructionError_Raise__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ConstructionError *arg1 = (Standard_ConstructionError *) 0 ; char *arg2 = (char *) 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_ConstructionError_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ConstructionError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_ConstructionError_Raise" "', argument " "1"" of type '" "Standard_ConstructionError *""'");  }
+   arg1 = reinterpret_cast< Standard_ConstructionError * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_ConstructionError_Raise" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { (arg1)->Raise((char const *)arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_ConstructionError_Raise__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ConstructionError *arg1 = (Standard_ConstructionError *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_ConstructionError_Raise",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ConstructionError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_ConstructionError_Raise" "', argument " "1"" of type '" "Standard_ConstructionError *""'");  }
+   arg1 = reinterpret_cast< Standard_ConstructionError * >(argp1); { try { (arg1)->Raise(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_ConstructionError_Raise__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ConstructionError *arg1 = (Standard_ConstructionError *) 0 ; Standard_SStream *arg2 = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_ConstructionError_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ConstructionError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_ConstructionError_Raise" "', argument " "1"" of type '" "Standard_ConstructionError *""'");  }
+   arg1 = reinterpret_cast< Standard_ConstructionError * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Standard_SStream,  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_ConstructionError_Raise" "', argument " "2"" of type '" "Standard_SStream &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_ConstructionError_Raise" "', argument " "2"" of type '" "Standard_SStream &""'"); }
+   arg2 = reinterpret_cast< Standard_SStream * >(argp2); { try { (arg1)->Raise(*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_ConstructionError_Raise(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_ConstructionError, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_Standard_ConstructionError_Raise__SWIG_1(self, args);}  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_ConstructionError, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_SStream, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Standard_ConstructionError_Raise__SWIG_2(self, args);}  }  }  if (argc == 2) { int _v;
+    void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_ConstructionError, 0);
+    _v = SWIG_CheckState(res); if (_v) { int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Standard_ConstructionError_Raise__SWIG_0(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Standard_ConstructionError_Raise'.\n  Possible C/C++ prototypes are:\n""    Raise(Standard_ConstructionError *,char const *)\n""    Raise(Standard_ConstructionError *)\n""    Raise(Standard_ConstructionError *,Standard_SStream &)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_ConstructionError_NewInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ConstructionError *arg1 = (Standard_ConstructionError *) 0 ; char *arg2 = (char *) 0 ;
+  Handle_Standard_ConstructionError result; void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ;
+  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_ConstructionError_NewInstance",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ConstructionError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_ConstructionError_NewInstance" "', argument " "1"" of type '" "Standard_ConstructionError *""'");  }
+   arg1 = reinterpret_cast< Standard_ConstructionError * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_ConstructionError_NewInstance" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { result = (arg1)->NewInstance((char const *)arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_ConstructionError(static_cast< const Handle_Standard_ConstructionError& >(result))), SWIGTYPE_p_Handle_Standard_ConstructionError, SWIG_POINTER_OWN |  0 );
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_ConstructionError_DynamicType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ConstructionError *arg1 = (Standard_ConstructionError *) 0 ;
+  Handle_Standard_Type *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_ConstructionError_DynamicType",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ConstructionError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_ConstructionError_DynamicType" "', argument " "1"" of type '" "Standard_ConstructionError const *""'");  }
+   arg1 = reinterpret_cast< Standard_ConstructionError * >(argp1); { try { {
+        Handle_Standard_Type const &_result_ref = ((Standard_ConstructionError const *)arg1)->DynamicType();
+        result = (Handle_Standard_Type *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Type, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_ConstructionError_GetHandle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ConstructionError *arg1 = (Standard_ConstructionError *) 0 ;
+  Handle_Standard_ConstructionError result; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_ConstructionError_GetHandle",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ConstructionError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_ConstructionError_GetHandle" "', argument " "1"" of type '" "Standard_ConstructionError *""'");  }
+   arg1 = reinterpret_cast< Standard_ConstructionError * >(argp1); { try { result = Standard_ConstructionError_GetHandle(arg1); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_ConstructionError(static_cast< const Handle_Standard_ConstructionError& >(result))), SWIGTYPE_p_Handle_Standard_ConstructionError, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_ConstructionError___hash__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ConstructionError *arg1 = (Standard_ConstructionError *) 0 ; Standard_Integer result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_ConstructionError___hash__",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ConstructionError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_ConstructionError___hash__" "', argument " "1"" of type '" "Standard_ConstructionError *""'");  }
+   arg1 = reinterpret_cast< Standard_ConstructionError * >(argp1); { try {
+      result = (Standard_Integer)Standard_ConstructionError___hash__(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_ConstructionError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ConstructionError *arg1 = (Standard_ConstructionError *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_ConstructionError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ConstructionError, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_ConstructionError" "', argument " "1"" of type '" "Standard_ConstructionError *""'");  }
+   arg1 = reinterpret_cast< Standard_ConstructionError * >(argp1); { try { delete_Standard_ConstructionError(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_ConstructionError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_ConstructionError, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Standard_NumericError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NumericError *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_NumericError",0,0)) SWIG_fail; { try {
+      result = (Standard_NumericError *)new Standard_NumericError(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_NumericError, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_NumericError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; char *arg1 = (char *) 0 ; Standard_NumericError *result = 0 ; int res1 ; char *buf1 = 0 ;
+  int alloc1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Standard_NumericError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_NumericError" "', argument " "1"" of type '" "char const *""'"); }
+   arg1 = reinterpret_cast< char * >(buf1); { try {
+      result = (Standard_NumericError *)new Standard_NumericError((char const *)arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_NumericError, SWIG_POINTER_NEW |  0 );
+  if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return resultobj; fail: if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_NumericError(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Standard_NumericError__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Standard_NumericError__SWIG_1(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Standard_NumericError'.\n  Possible C/C++ prototypes are:\n""    Standard_NumericError()\n""    Standard_NumericError(char const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NumericError_Raise__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NumericError *arg1 = (Standard_NumericError *) 0 ; char *arg2 = (char *) 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_NumericError_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NumericError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NumericError_Raise" "', argument " "1"" of type '" "Standard_NumericError *""'");  }
+   arg1 = reinterpret_cast< Standard_NumericError * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_NumericError_Raise" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { (arg1)->Raise((char const *)arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NumericError_Raise__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NumericError *arg1 = (Standard_NumericError *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_NumericError_Raise",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NumericError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NumericError_Raise" "', argument " "1"" of type '" "Standard_NumericError *""'");  }
+   arg1 = reinterpret_cast< Standard_NumericError * >(argp1); { try { (arg1)->Raise(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NumericError_Raise__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NumericError *arg1 = (Standard_NumericError *) 0 ; Standard_SStream *arg2 = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_NumericError_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NumericError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NumericError_Raise" "', argument " "1"" of type '" "Standard_NumericError *""'");  }
+   arg1 = reinterpret_cast< Standard_NumericError * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Standard_SStream,  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_NumericError_Raise" "', argument " "2"" of type '" "Standard_SStream &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_NumericError_Raise" "', argument " "2"" of type '" "Standard_SStream &""'"); }
+   arg2 = reinterpret_cast< Standard_SStream * >(argp2); { try { (arg1)->Raise(*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NumericError_Raise(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_NumericError, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_Standard_NumericError_Raise__SWIG_1(self, args);}  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_NumericError, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_SStream, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Standard_NumericError_Raise__SWIG_2(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_NumericError, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Standard_NumericError_Raise__SWIG_0(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Standard_NumericError_Raise'.\n  Possible C/C++ prototypes are:\n""    Raise(Standard_NumericError *,char const *)\n""    Raise(Standard_NumericError *)\n""    Raise(Standard_NumericError *,Standard_SStream &)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NumericError_NewInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NumericError *arg1 = (Standard_NumericError *) 0 ; char *arg2 = (char *) 0 ;
+  Handle_Standard_NumericError result; void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ;
+  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_NumericError_NewInstance",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NumericError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NumericError_NewInstance" "', argument " "1"" of type '" "Standard_NumericError *""'");  }
+   arg1 = reinterpret_cast< Standard_NumericError * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_NumericError_NewInstance" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { result = (arg1)->NewInstance((char const *)arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_NumericError(static_cast< const Handle_Standard_NumericError& >(result))), SWIGTYPE_p_Handle_Standard_NumericError, SWIG_POINTER_OWN |  0 );
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NumericError_DynamicType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NumericError *arg1 = (Standard_NumericError *) 0 ; Handle_Standard_Type *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_NumericError_DynamicType",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NumericError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NumericError_DynamicType" "', argument " "1"" of type '" "Standard_NumericError const *""'");  }
+   arg1 = reinterpret_cast< Standard_NumericError * >(argp1); { try { {
+        Handle_Standard_Type const &_result_ref = ((Standard_NumericError const *)arg1)->DynamicType();
+        result = (Handle_Standard_Type *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Type, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NumericError_GetHandle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NumericError *arg1 = (Standard_NumericError *) 0 ; Handle_Standard_NumericError result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_NumericError_GetHandle",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NumericError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NumericError_GetHandle" "', argument " "1"" of type '" "Standard_NumericError *""'");  }
+   arg1 = reinterpret_cast< Standard_NumericError * >(argp1); { try { result = Standard_NumericError_GetHandle(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_NumericError(static_cast< const Handle_Standard_NumericError& >(result))), SWIGTYPE_p_Handle_Standard_NumericError, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NumericError___hash__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NumericError *arg1 = (Standard_NumericError *) 0 ; Standard_Integer result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_NumericError___hash__",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NumericError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NumericError___hash__" "', argument " "1"" of type '" "Standard_NumericError *""'");  }
+   arg1 = reinterpret_cast< Standard_NumericError * >(argp1); { try {
+      result = (Standard_Integer)Standard_NumericError___hash__(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_NumericError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NumericError *arg1 = (Standard_NumericError *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_NumericError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NumericError, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_NumericError" "', argument " "1"" of type '" "Standard_NumericError *""'");  }
+   arg1 = reinterpret_cast< Standard_NumericError * >(argp1); { try { delete_Standard_NumericError(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_NumericError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_NumericError, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_Standard_MMgrRoot_Allocate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_MMgrRoot *arg1 = (Standard_MMgrRoot *) 0 ; Standard_Size arg2 ; Standard_Address result; void *argp1 = 0 ;
+  int res1 = 0 ; size_t val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_MMgrRoot_Allocate",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_MMgrRoot, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_MMgrRoot_Allocate" "', argument " "1"" of type '" "Standard_MMgrRoot *""'");  }
+   arg1 = reinterpret_cast< Standard_MMgrRoot * >(argp1); ecode2 = SWIG_AsVal_size_t(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Standard_MMgrRoot_Allocate" "', argument " "2"" of type '" "Standard_Size""'"); }
+    arg2 = static_cast< Standard_Size >(val2); { try { result = (Standard_Address)(arg1)->Allocate(arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 ); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_MMgrRoot_Reallocate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_MMgrRoot *arg1 = (Standard_MMgrRoot *) 0 ; Standard_Address *arg2 = 0 ; Standard_Size arg3 ;
+  Standard_Address result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; size_t val3 ; int ecode3 = 0 ;
+  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_MMgrRoot_Reallocate",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_MMgrRoot, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_MMgrRoot_Reallocate" "', argument " "1"" of type '" "Standard_MMgrRoot *""'");  }
+   arg1 = reinterpret_cast< Standard_MMgrRoot * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_p_void,  0 );
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_MMgrRoot_Reallocate" "', argument " "2"" of type '" "Standard_Address &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_MMgrRoot_Reallocate" "', argument " "2"" of type '" "Standard_Address &""'"); }
+   arg2 = reinterpret_cast< Standard_Address * >(argp2); ecode3 = SWIG_AsVal_size_t(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Standard_MMgrRoot_Reallocate" "', argument " "3"" of type '" "Standard_Size""'"); }
+    arg3 = static_cast< Standard_Size >(val3); { try { result = (Standard_Address)(arg1)->Reallocate(*arg2,arg3); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 ); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_MMgrRoot_Free(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_MMgrRoot *arg1 = (Standard_MMgrRoot *) 0 ; Standard_Address *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_MMgrRoot_Free",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_MMgrRoot, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_MMgrRoot_Free" "', argument " "1"" of type '" "Standard_MMgrRoot *""'");  }
+   arg1 = reinterpret_cast< Standard_MMgrRoot * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_p_void,  0 );
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_MMgrRoot_Free" "', argument " "2"" of type '" "Standard_Address &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_MMgrRoot_Free" "', argument " "2"" of type '" "Standard_Address &""'"); }
+   arg2 = reinterpret_cast< Standard_Address * >(argp2); { try { (arg1)->Free(*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_MMgrRoot_Purge__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_MMgrRoot *arg1 = (Standard_MMgrRoot *) 0 ; Standard_Boolean arg2 ; Standard_Integer result;
+  void *argp1 = 0 ; int res1 = 0 ; unsigned int val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_MMgrRoot_Purge",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_MMgrRoot, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_MMgrRoot_Purge" "', argument " "1"" of type '" "Standard_MMgrRoot *""'");  }
+   arg1 = reinterpret_cast< Standard_MMgrRoot * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
+  if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Standard_MMgrRoot_Purge" "', argument " "2"" of type '" "Standard_Boolean""'"); }
+    arg2 = static_cast< Standard_Boolean >(val2); { try { result = (Standard_Integer)(arg1)->Purge(arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_MMgrRoot_Purge__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_MMgrRoot *arg1 = (Standard_MMgrRoot *) 0 ; Standard_Integer result; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_MMgrRoot_Purge",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_MMgrRoot, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_MMgrRoot_Purge" "', argument " "1"" of type '" "Standard_MMgrRoot *""'");  }
+   arg1 = reinterpret_cast< Standard_MMgrRoot * >(argp1); { try { result = (Standard_Integer)(arg1)->Purge(); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_MMgrRoot_Purge(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_MMgrRoot, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_Standard_MMgrRoot_Purge__SWIG_1(self, args);}  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_MMgrRoot, 0); _v = SWIG_CheckState(res); if (_v) { {
+        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL); _v = SWIG_CheckState(res); }  if (_v) {
+        return _wrap_Standard_MMgrRoot_Purge__SWIG_0(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Standard_MMgrRoot_Purge'.\n  Possible C/C++ prototypes are:\n""    Purge(Standard_MMgrRoot *,Standard_Boolean)\n""    Purge(Standard_MMgrRoot *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_MMgrRoot_SetReentrant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_MMgrRoot *arg1 = (Standard_MMgrRoot *) 0 ; Standard_Boolean arg2 ; void *argp1 = 0 ;
+  int res1 = 0 ; unsigned int val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_MMgrRoot_SetReentrant",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_MMgrRoot, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_MMgrRoot_SetReentrant" "', argument " "1"" of type '" "Standard_MMgrRoot *""'");  }
+   arg1 = reinterpret_cast< Standard_MMgrRoot * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
+  if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Standard_MMgrRoot_SetReentrant" "', argument " "2"" of type '" "Standard_Boolean""'"); }
+    arg2 = static_cast< Standard_Boolean >(val2); { try { (arg1)->SetReentrant(arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_MMgrRoot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_MMgrRoot *arg1 = (Standard_MMgrRoot *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_MMgrRoot",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_MMgrRoot, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_MMgrRoot" "', argument " "1"" of type '" "Standard_MMgrRoot *""'");  }
+   arg1 = reinterpret_cast< Standard_MMgrRoot * >(argp1); { try { delete_Standard_MMgrRoot(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_MMgrRoot_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_MMgrRoot, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Standard_MMgrRaw__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Boolean arg1 ; Standard_MMgrRaw *result = 0 ; unsigned int val1 ; int ecode1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Standard_MMgrRaw",1,1,&obj0)) SWIG_fail;
+  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1); if (!SWIG_IsOK(ecode1)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Standard_MMgrRaw" "', argument " "1"" of type '" "Standard_Boolean""'"); }
+    arg1 = static_cast< Standard_Boolean >(val1); { try { result = (Standard_MMgrRaw *)new Standard_MMgrRaw(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_MMgrRaw, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_MMgrRaw__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_MMgrRaw *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_MMgrRaw",0,0)) SWIG_fail; { try {
+      result = (Standard_MMgrRaw *)new Standard_MMgrRaw(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_MMgrRaw, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_MMgrRaw(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Standard_MMgrRaw__SWIG_1(self, args);} 
+  if (argc == 1) { int _v; { int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL); _v = SWIG_CheckState(res); }  if (_v) {
+      return _wrap_new_Standard_MMgrRaw__SWIG_0(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Standard_MMgrRaw'.\n  Possible C/C++ prototypes are:\n""    Standard_MMgrRaw(Standard_Boolean const)\n""    Standard_MMgrRaw()\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_MMgrRaw_Allocate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_MMgrRaw *arg1 = (Standard_MMgrRaw *) 0 ; Standard_Size arg2 ; Standard_Address result; void *argp1 = 0 ;
+  int res1 = 0 ; size_t val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_MMgrRaw_Allocate",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_MMgrRaw, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_MMgrRaw_Allocate" "', argument " "1"" of type '" "Standard_MMgrRaw *""'");  }
+   arg1 = reinterpret_cast< Standard_MMgrRaw * >(argp1); ecode2 = SWIG_AsVal_size_t(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Standard_MMgrRaw_Allocate" "', argument " "2"" of type '" "Standard_Size""'"); }
+    arg2 = static_cast< Standard_Size >(val2); { try { result = (Standard_Address)(arg1)->Allocate(arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 ); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_MMgrRaw_Reallocate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_MMgrRaw *arg1 = (Standard_MMgrRaw *) 0 ; Standard_Address *arg2 = 0 ; Standard_Size arg3 ;
+  Standard_Address result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; size_t val3 ; int ecode3 = 0 ;
+  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_MMgrRaw_Reallocate",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_MMgrRaw, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_MMgrRaw_Reallocate" "', argument " "1"" of type '" "Standard_MMgrRaw *""'");  }
+   arg1 = reinterpret_cast< Standard_MMgrRaw * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_p_void,  0 );
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_MMgrRaw_Reallocate" "', argument " "2"" of type '" "Standard_Address &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_MMgrRaw_Reallocate" "', argument " "2"" of type '" "Standard_Address &""'"); }
+   arg2 = reinterpret_cast< Standard_Address * >(argp2); ecode3 = SWIG_AsVal_size_t(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Standard_MMgrRaw_Reallocate" "', argument " "3"" of type '" "Standard_Size""'"); }
+    arg3 = static_cast< Standard_Size >(val3); { try { result = (Standard_Address)(arg1)->Reallocate(*arg2,arg3); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 ); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_MMgrRaw_Free(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_MMgrRaw *arg1 = (Standard_MMgrRaw *) 0 ; Standard_Address *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_MMgrRaw_Free",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_MMgrRaw, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_MMgrRaw_Free" "', argument " "1"" of type '" "Standard_MMgrRaw *""'");  }
+   arg1 = reinterpret_cast< Standard_MMgrRaw * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_p_void,  0 );
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_MMgrRaw_Free" "', argument " "2"" of type '" "Standard_Address &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_MMgrRaw_Free" "', argument " "2"" of type '" "Standard_Address &""'"); }
+   arg2 = reinterpret_cast< Standard_Address * >(argp2); { try { (arg1)->Free(*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_MMgrRaw(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_MMgrRaw *arg1 = (Standard_MMgrRaw *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_MMgrRaw",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_MMgrRaw, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_MMgrRaw" "', argument " "1"" of type '" "Standard_MMgrRaw *""'");  }
+   arg1 = reinterpret_cast< Standard_MMgrRaw * >(argp1); { try { delete_Standard_MMgrRaw(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_MMgrRaw_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_MMgrRaw, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Standard_NoMoreObject__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NoMoreObject *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_NoMoreObject",0,0)) SWIG_fail; { try {
+      result = (Standard_NoMoreObject *)new Standard_NoMoreObject(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_NoMoreObject, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_NoMoreObject__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; char *arg1 = (char *) 0 ; Standard_NoMoreObject *result = 0 ; int res1 ; char *buf1 = 0 ;
+  int alloc1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Standard_NoMoreObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_NoMoreObject" "', argument " "1"" of type '" "char const *""'"); }
+   arg1 = reinterpret_cast< char * >(buf1); { try {
+      result = (Standard_NoMoreObject *)new Standard_NoMoreObject((char const *)arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_NoMoreObject, SWIG_POINTER_NEW |  0 );
+  if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return resultobj; fail: if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_NoMoreObject(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Standard_NoMoreObject__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Standard_NoMoreObject__SWIG_1(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Standard_NoMoreObject'.\n  Possible C/C++ prototypes are:\n""    Standard_NoMoreObject()\n""    Standard_NoMoreObject(char const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NoMoreObject_Raise__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NoMoreObject *arg1 = (Standard_NoMoreObject *) 0 ; char *arg2 = (char *) 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_NoMoreObject_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NoMoreObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NoMoreObject_Raise" "', argument " "1"" of type '" "Standard_NoMoreObject *""'");  }
+   arg1 = reinterpret_cast< Standard_NoMoreObject * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_NoMoreObject_Raise" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { (arg1)->Raise((char const *)arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NoMoreObject_Raise__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NoMoreObject *arg1 = (Standard_NoMoreObject *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_NoMoreObject_Raise",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NoMoreObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NoMoreObject_Raise" "', argument " "1"" of type '" "Standard_NoMoreObject *""'");  }
+   arg1 = reinterpret_cast< Standard_NoMoreObject * >(argp1); { try { (arg1)->Raise(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NoMoreObject_Raise__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NoMoreObject *arg1 = (Standard_NoMoreObject *) 0 ; Standard_SStream *arg2 = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_NoMoreObject_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NoMoreObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NoMoreObject_Raise" "', argument " "1"" of type '" "Standard_NoMoreObject *""'");  }
+   arg1 = reinterpret_cast< Standard_NoMoreObject * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Standard_SStream,  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_NoMoreObject_Raise" "', argument " "2"" of type '" "Standard_SStream &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_NoMoreObject_Raise" "', argument " "2"" of type '" "Standard_SStream &""'"); }
+   arg2 = reinterpret_cast< Standard_SStream * >(argp2); { try { (arg1)->Raise(*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NoMoreObject_Raise(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_NoMoreObject, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_Standard_NoMoreObject_Raise__SWIG_1(self, args);}  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_NoMoreObject, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_SStream, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Standard_NoMoreObject_Raise__SWIG_2(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_NoMoreObject, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Standard_NoMoreObject_Raise__SWIG_0(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Standard_NoMoreObject_Raise'.\n  Possible C/C++ prototypes are:\n""    Raise(Standard_NoMoreObject *,char const *)\n""    Raise(Standard_NoMoreObject *)\n""    Raise(Standard_NoMoreObject *,Standard_SStream &)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NoMoreObject_NewInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NoMoreObject *arg1 = (Standard_NoMoreObject *) 0 ; char *arg2 = (char *) 0 ;
+  Handle_Standard_NoMoreObject result; void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ;
+  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_NoMoreObject_NewInstance",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NoMoreObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NoMoreObject_NewInstance" "', argument " "1"" of type '" "Standard_NoMoreObject *""'");  }
+   arg1 = reinterpret_cast< Standard_NoMoreObject * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_NoMoreObject_NewInstance" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { result = (arg1)->NewInstance((char const *)arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_NoMoreObject(static_cast< const Handle_Standard_NoMoreObject& >(result))), SWIGTYPE_p_Handle_Standard_NoMoreObject, SWIG_POINTER_OWN |  0 );
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NoMoreObject_DynamicType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NoMoreObject *arg1 = (Standard_NoMoreObject *) 0 ; Handle_Standard_Type *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_NoMoreObject_DynamicType",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NoMoreObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NoMoreObject_DynamicType" "', argument " "1"" of type '" "Standard_NoMoreObject const *""'");  }
+   arg1 = reinterpret_cast< Standard_NoMoreObject * >(argp1); { try { {
+        Handle_Standard_Type const &_result_ref = ((Standard_NoMoreObject const *)arg1)->DynamicType();
+        result = (Handle_Standard_Type *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Type, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NoMoreObject_GetHandle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NoMoreObject *arg1 = (Standard_NoMoreObject *) 0 ; Handle_Standard_NoMoreObject result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_NoMoreObject_GetHandle",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NoMoreObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NoMoreObject_GetHandle" "', argument " "1"" of type '" "Standard_NoMoreObject *""'");  }
+   arg1 = reinterpret_cast< Standard_NoMoreObject * >(argp1); { try { result = Standard_NoMoreObject_GetHandle(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_NoMoreObject(static_cast< const Handle_Standard_NoMoreObject& >(result))), SWIGTYPE_p_Handle_Standard_NoMoreObject, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NoMoreObject___hash__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NoMoreObject *arg1 = (Standard_NoMoreObject *) 0 ; Standard_Integer result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_NoMoreObject___hash__",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NoMoreObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NoMoreObject___hash__" "', argument " "1"" of type '" "Standard_NoMoreObject *""'");  }
+   arg1 = reinterpret_cast< Standard_NoMoreObject * >(argp1); { try {
+      result = (Standard_Integer)Standard_NoMoreObject___hash__(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_NoMoreObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NoMoreObject *arg1 = (Standard_NoMoreObject *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_NoMoreObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NoMoreObject, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_NoMoreObject" "', argument " "1"" of type '" "Standard_NoMoreObject *""'");  }
+   arg1 = reinterpret_cast< Standard_NoMoreObject * >(argp1); { try { delete_Standard_NoMoreObject(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_NoMoreObject_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_NoMoreObject, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Standard_ProgramError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ProgramError *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_ProgramError",0,0)) SWIG_fail; { try {
+      result = (Standard_ProgramError *)new Standard_ProgramError(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_ProgramError, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_ProgramError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; char *arg1 = (char *) 0 ; Standard_ProgramError *result = 0 ; int res1 ; char *buf1 = 0 ;
+  int alloc1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Standard_ProgramError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_ProgramError" "', argument " "1"" of type '" "char const *""'"); }
+   arg1 = reinterpret_cast< char * >(buf1); { try {
+      result = (Standard_ProgramError *)new Standard_ProgramError((char const *)arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_ProgramError, SWIG_POINTER_NEW |  0 );
+  if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return resultobj; fail: if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_ProgramError(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Standard_ProgramError__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Standard_ProgramError__SWIG_1(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Standard_ProgramError'.\n  Possible C/C++ prototypes are:\n""    Standard_ProgramError()\n""    Standard_ProgramError(char const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_ProgramError_Raise__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ProgramError *arg1 = (Standard_ProgramError *) 0 ; char *arg2 = (char *) 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_ProgramError_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ProgramError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_ProgramError_Raise" "', argument " "1"" of type '" "Standard_ProgramError *""'");  }
+   arg1 = reinterpret_cast< Standard_ProgramError * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_ProgramError_Raise" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { (arg1)->Raise((char const *)arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_ProgramError_Raise__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ProgramError *arg1 = (Standard_ProgramError *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_ProgramError_Raise",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ProgramError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_ProgramError_Raise" "', argument " "1"" of type '" "Standard_ProgramError *""'");  }
+   arg1 = reinterpret_cast< Standard_ProgramError * >(argp1); { try { (arg1)->Raise(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_ProgramError_Raise__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ProgramError *arg1 = (Standard_ProgramError *) 0 ; Standard_SStream *arg2 = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_ProgramError_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ProgramError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_ProgramError_Raise" "', argument " "1"" of type '" "Standard_ProgramError *""'");  }
+   arg1 = reinterpret_cast< Standard_ProgramError * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Standard_SStream,  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_ProgramError_Raise" "', argument " "2"" of type '" "Standard_SStream &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_ProgramError_Raise" "', argument " "2"" of type '" "Standard_SStream &""'"); }
+   arg2 = reinterpret_cast< Standard_SStream * >(argp2); { try { (arg1)->Raise(*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_ProgramError_Raise(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_ProgramError, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_Standard_ProgramError_Raise__SWIG_1(self, args);}  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_ProgramError, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_SStream, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Standard_ProgramError_Raise__SWIG_2(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_ProgramError, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Standard_ProgramError_Raise__SWIG_0(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Standard_ProgramError_Raise'.\n  Possible C/C++ prototypes are:\n""    Raise(Standard_ProgramError *,char const *)\n""    Raise(Standard_ProgramError *)\n""    Raise(Standard_ProgramError *,Standard_SStream &)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_ProgramError_NewInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ProgramError *arg1 = (Standard_ProgramError *) 0 ; char *arg2 = (char *) 0 ;
+  Handle_Standard_ProgramError result; void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ;
+  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_ProgramError_NewInstance",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ProgramError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_ProgramError_NewInstance" "', argument " "1"" of type '" "Standard_ProgramError *""'");  }
+   arg1 = reinterpret_cast< Standard_ProgramError * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_ProgramError_NewInstance" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { result = (arg1)->NewInstance((char const *)arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_ProgramError(static_cast< const Handle_Standard_ProgramError& >(result))), SWIGTYPE_p_Handle_Standard_ProgramError, SWIG_POINTER_OWN |  0 );
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_ProgramError_DynamicType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ProgramError *arg1 = (Standard_ProgramError *) 0 ; Handle_Standard_Type *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_ProgramError_DynamicType",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ProgramError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_ProgramError_DynamicType" "', argument " "1"" of type '" "Standard_ProgramError const *""'");  }
+   arg1 = reinterpret_cast< Standard_ProgramError * >(argp1); { try { {
+        Handle_Standard_Type const &_result_ref = ((Standard_ProgramError const *)arg1)->DynamicType();
+        result = (Handle_Standard_Type *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Type, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_ProgramError_GetHandle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ProgramError *arg1 = (Standard_ProgramError *) 0 ; Handle_Standard_ProgramError result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_ProgramError_GetHandle",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ProgramError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_ProgramError_GetHandle" "', argument " "1"" of type '" "Standard_ProgramError *""'");  }
+   arg1 = reinterpret_cast< Standard_ProgramError * >(argp1); { try { result = Standard_ProgramError_GetHandle(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_ProgramError(static_cast< const Handle_Standard_ProgramError& >(result))), SWIGTYPE_p_Handle_Standard_ProgramError, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_ProgramError___hash__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ProgramError *arg1 = (Standard_ProgramError *) 0 ; Standard_Integer result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_ProgramError___hash__",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ProgramError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_ProgramError___hash__" "', argument " "1"" of type '" "Standard_ProgramError *""'");  }
+   arg1 = reinterpret_cast< Standard_ProgramError * >(argp1); { try {
+      result = (Standard_Integer)Standard_ProgramError___hash__(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_ProgramError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ProgramError *arg1 = (Standard_ProgramError *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_ProgramError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ProgramError, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_ProgramError" "', argument " "1"" of type '" "Standard_ProgramError *""'");  }
+   arg1 = reinterpret_cast< Standard_ProgramError * >(argp1); { try { delete_Standard_ProgramError(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_ProgramError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_ProgramError, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Standard_NotImplemented__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NotImplemented *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_NotImplemented",0,0)) SWIG_fail; { try {
+      result = (Standard_NotImplemented *)new Standard_NotImplemented(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_NotImplemented, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_NotImplemented__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; char *arg1 = (char *) 0 ; Standard_NotImplemented *result = 0 ; int res1 ; char *buf1 = 0 ;
+  int alloc1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Standard_NotImplemented",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_NotImplemented" "', argument " "1"" of type '" "char const *""'"); }
+   arg1 = reinterpret_cast< char * >(buf1); { try {
+      result = (Standard_NotImplemented *)new Standard_NotImplemented((char const *)arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_NotImplemented, SWIG_POINTER_NEW |  0 );
+  if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return resultobj; fail: if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_NotImplemented(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Standard_NotImplemented__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Standard_NotImplemented__SWIG_1(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Standard_NotImplemented'.\n  Possible C/C++ prototypes are:\n""    Standard_NotImplemented()\n""    Standard_NotImplemented(char const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NotImplemented_NewInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NotImplemented *arg1 = (Standard_NotImplemented *) 0 ; char *arg2 = (char *) 0 ;
+  Handle_Standard_NotImplemented result; void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ;
+  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_NotImplemented_NewInstance",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NotImplemented, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NotImplemented_NewInstance" "', argument " "1"" of type '" "Standard_NotImplemented *""'");  }
+   arg1 = reinterpret_cast< Standard_NotImplemented * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_NotImplemented_NewInstance" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { result = (arg1)->NewInstance((char const *)arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_NotImplemented(static_cast< const Handle_Standard_NotImplemented& >(result))), SWIGTYPE_p_Handle_Standard_NotImplemented, SWIG_POINTER_OWN |  0 );
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NotImplemented_GetHandle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NotImplemented *arg1 = (Standard_NotImplemented *) 0 ;
+  Handle_Standard_NotImplemented result; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_NotImplemented_GetHandle",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NotImplemented, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NotImplemented_GetHandle" "', argument " "1"" of type '" "Standard_NotImplemented *""'");  }
+   arg1 = reinterpret_cast< Standard_NotImplemented * >(argp1); { try { result = Standard_NotImplemented_GetHandle(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_NotImplemented(static_cast< const Handle_Standard_NotImplemented& >(result))), SWIGTYPE_p_Handle_Standard_NotImplemented, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NotImplemented___hash__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NotImplemented *arg1 = (Standard_NotImplemented *) 0 ; Standard_Integer result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_NotImplemented___hash__",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NotImplemented, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NotImplemented___hash__" "', argument " "1"" of type '" "Standard_NotImplemented *""'");  }
+   arg1 = reinterpret_cast< Standard_NotImplemented * >(argp1); { try {
+      result = (Standard_Integer)Standard_NotImplemented___hash__(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_NotImplemented(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NotImplemented *arg1 = (Standard_NotImplemented *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_NotImplemented",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NotImplemented, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_NotImplemented" "', argument " "1"" of type '" "Standard_NotImplemented *""'");  }
+   arg1 = reinterpret_cast< Standard_NotImplemented * >(argp1); { try { delete_Standard_NotImplemented(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_NotImplemented_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_NotImplemented, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Standard_DimensionError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DimensionError *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_DimensionError",0,0)) SWIG_fail; { try {
+      result = (Standard_DimensionError *)new Standard_DimensionError(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_DimensionError, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_DimensionError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; char *arg1 = (char *) 0 ; Standard_DimensionError *result = 0 ; int res1 ; char *buf1 = 0 ;
+  int alloc1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Standard_DimensionError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_DimensionError" "', argument " "1"" of type '" "char const *""'"); }
+   arg1 = reinterpret_cast< char * >(buf1); { try {
+      result = (Standard_DimensionError *)new Standard_DimensionError((char const *)arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_DimensionError, SWIG_POINTER_NEW |  0 );
+  if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return resultobj; fail: if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_DimensionError(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Standard_DimensionError__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Standard_DimensionError__SWIG_1(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Standard_DimensionError'.\n  Possible C/C++ prototypes are:\n""    Standard_DimensionError()\n""    Standard_DimensionError(char const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_DimensionError_Raise__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DimensionError *arg1 = (Standard_DimensionError *) 0 ; char *arg2 = (char *) 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_DimensionError_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DimensionError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_DimensionError_Raise" "', argument " "1"" of type '" "Standard_DimensionError *""'");  }
+   arg1 = reinterpret_cast< Standard_DimensionError * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_DimensionError_Raise" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { (arg1)->Raise((char const *)arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_DimensionError_Raise__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DimensionError *arg1 = (Standard_DimensionError *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_DimensionError_Raise",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DimensionError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_DimensionError_Raise" "', argument " "1"" of type '" "Standard_DimensionError *""'");  }
+   arg1 = reinterpret_cast< Standard_DimensionError * >(argp1); { try { (arg1)->Raise(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_DimensionError_Raise__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DimensionError *arg1 = (Standard_DimensionError *) 0 ; Standard_SStream *arg2 = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_DimensionError_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DimensionError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_DimensionError_Raise" "', argument " "1"" of type '" "Standard_DimensionError *""'");  }
+   arg1 = reinterpret_cast< Standard_DimensionError * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Standard_SStream,  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_DimensionError_Raise" "', argument " "2"" of type '" "Standard_SStream &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_DimensionError_Raise" "', argument " "2"" of type '" "Standard_SStream &""'"); }
+   arg2 = reinterpret_cast< Standard_SStream * >(argp2); { try { (arg1)->Raise(*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_DimensionError_Raise(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_DimensionError, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_Standard_DimensionError_Raise__SWIG_1(self, args);}  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_DimensionError, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_SStream, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Standard_DimensionError_Raise__SWIG_2(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_DimensionError, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Standard_DimensionError_Raise__SWIG_0(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Standard_DimensionError_Raise'.\n  Possible C/C++ prototypes are:\n""    Raise(Standard_DimensionError *,char const *)\n""    Raise(Standard_DimensionError *)\n""    Raise(Standard_DimensionError *,Standard_SStream &)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_DimensionError_NewInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DimensionError *arg1 = (Standard_DimensionError *) 0 ; char *arg2 = (char *) 0 ;
+  Handle_Standard_DimensionError result; void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ;
+  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_DimensionError_NewInstance",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DimensionError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_DimensionError_NewInstance" "', argument " "1"" of type '" "Standard_DimensionError *""'");  }
+   arg1 = reinterpret_cast< Standard_DimensionError * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_DimensionError_NewInstance" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { result = (arg1)->NewInstance((char const *)arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_DimensionError(static_cast< const Handle_Standard_DimensionError& >(result))), SWIGTYPE_p_Handle_Standard_DimensionError, SWIG_POINTER_OWN |  0 );
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_DimensionError_DynamicType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DimensionError *arg1 = (Standard_DimensionError *) 0 ; Handle_Standard_Type *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_DimensionError_DynamicType",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DimensionError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_DimensionError_DynamicType" "', argument " "1"" of type '" "Standard_DimensionError const *""'");  }
+   arg1 = reinterpret_cast< Standard_DimensionError * >(argp1); { try { {
+        Handle_Standard_Type const &_result_ref = ((Standard_DimensionError const *)arg1)->DynamicType();
+        result = (Handle_Standard_Type *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Type, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_DimensionError_GetHandle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DimensionError *arg1 = (Standard_DimensionError *) 0 ;
+  Handle_Standard_DimensionError result; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_DimensionError_GetHandle",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DimensionError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_DimensionError_GetHandle" "', argument " "1"" of type '" "Standard_DimensionError *""'");  }
+   arg1 = reinterpret_cast< Standard_DimensionError * >(argp1); { try { result = Standard_DimensionError_GetHandle(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_DimensionError(static_cast< const Handle_Standard_DimensionError& >(result))), SWIGTYPE_p_Handle_Standard_DimensionError, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_DimensionError___hash__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DimensionError *arg1 = (Standard_DimensionError *) 0 ; Standard_Integer result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_DimensionError___hash__",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DimensionError, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_DimensionError___hash__" "', argument " "1"" of type '" "Standard_DimensionError *""'");  }
+   arg1 = reinterpret_cast< Standard_DimensionError * >(argp1); { try {
+      result = (Standard_Integer)Standard_DimensionError___hash__(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_DimensionError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DimensionError *arg1 = (Standard_DimensionError *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_DimensionError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DimensionError, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_DimensionError" "', argument " "1"" of type '" "Standard_DimensionError *""'");  }
+   arg1 = reinterpret_cast< Standard_DimensionError * >(argp1); { try { delete_Standard_DimensionError(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_DimensionError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_DimensionError, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Standard_MMgrOpt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Boolean arg1 ; Standard_Boolean arg2 ; Standard_Size arg3 ; Standard_Integer arg4 ;
+  Standard_Size arg5 ; Standard_Boolean arg6 ; Standard_MMgrOpt *result = 0 ; unsigned int val1 ; int ecode1 = 0 ;
+  unsigned int val2 ; int ecode2 = 0 ; size_t val3 ; int ecode3 = 0 ; int val4 ; int ecode4 = 0 ; size_t val5 ; int ecode5 = 0 ;
+  unsigned int val6 ; int ecode6 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; PyObject * obj3 = 0 ;
+  PyObject * obj4 = 0 ; PyObject * obj5 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_MMgrOpt",6,6,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
+  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1); if (!SWIG_IsOK(ecode1)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Standard_MMgrOpt" "', argument " "1"" of type '" "Standard_Boolean""'"); }
+    arg1 = static_cast< Standard_Boolean >(val1); ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Standard_MMgrOpt" "', argument " "2"" of type '" "Standard_Boolean""'"); }
+    arg2 = static_cast< Standard_Boolean >(val2); ecode3 = SWIG_AsVal_size_t(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Standard_MMgrOpt" "', argument " "3"" of type '" "Standard_Size""'"); }
+    arg3 = static_cast< Standard_Size >(val3); ecode4 = SWIG_AsVal_int(obj3, &val4); if (!SWIG_IsOK(ecode4)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Standard_MMgrOpt" "', argument " "4"" of type '" "Standard_Integer""'"); }
+    arg4 = static_cast< Standard_Integer >(val4); ecode5 = SWIG_AsVal_size_t(obj4, &val5); if (!SWIG_IsOK(ecode5)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Standard_MMgrOpt" "', argument " "5"" of type '" "Standard_Size""'"); }
+    arg5 = static_cast< Standard_Size >(val5); ecode6 = SWIG_AsVal_unsigned_SS_int(obj5, &val6); if (!SWIG_IsOK(ecode6)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_Standard_MMgrOpt" "', argument " "6"" of type '" "Standard_Boolean""'"); }
+    arg6 = static_cast< Standard_Boolean >(val6); { try {
+      result = (Standard_MMgrOpt *)new Standard_MMgrOpt(arg1,arg2,arg3,arg4,arg5,arg6); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_MMgrOpt, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_MMgrOpt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Boolean arg1 ; Standard_Boolean arg2 ; Standard_Size arg3 ; Standard_Integer arg4 ;
+  Standard_Size arg5 ; Standard_MMgrOpt *result = 0 ; unsigned int val1 ; int ecode1 = 0 ; unsigned int val2 ; int ecode2 = 0 ;
+  size_t val3 ; int ecode3 = 0 ; int val4 ; int ecode4 = 0 ; size_t val5 ; int ecode5 = 0 ; PyObject * obj0 = 0 ;
+  PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; PyObject * obj3 = 0 ; PyObject * obj4 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_MMgrOpt",5,5,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
+  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1); if (!SWIG_IsOK(ecode1)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Standard_MMgrOpt" "', argument " "1"" of type '" "Standard_Boolean""'"); }
+    arg1 = static_cast< Standard_Boolean >(val1); ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Standard_MMgrOpt" "', argument " "2"" of type '" "Standard_Boolean""'"); }
+    arg2 = static_cast< Standard_Boolean >(val2); ecode3 = SWIG_AsVal_size_t(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Standard_MMgrOpt" "', argument " "3"" of type '" "Standard_Size""'"); }
+    arg3 = static_cast< Standard_Size >(val3); ecode4 = SWIG_AsVal_int(obj3, &val4); if (!SWIG_IsOK(ecode4)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Standard_MMgrOpt" "', argument " "4"" of type '" "Standard_Integer""'"); }
+    arg4 = static_cast< Standard_Integer >(val4); ecode5 = SWIG_AsVal_size_t(obj4, &val5); if (!SWIG_IsOK(ecode5)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Standard_MMgrOpt" "', argument " "5"" of type '" "Standard_Size""'"); }
+    arg5 = static_cast< Standard_Size >(val5); { try {
+      result = (Standard_MMgrOpt *)new Standard_MMgrOpt(arg1,arg2,arg3,arg4,arg5); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_MMgrOpt, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_MMgrOpt__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Boolean arg1 ; Standard_Boolean arg2 ; Standard_Size arg3 ; Standard_Integer arg4 ;
+  Standard_MMgrOpt *result = 0 ; unsigned int val1 ; int ecode1 = 0 ; unsigned int val2 ; int ecode2 = 0 ; size_t val3 ;
+  int ecode3 = 0 ; int val4 ; int ecode4 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ;
+  PyObject * obj3 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Standard_MMgrOpt",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
+  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1); if (!SWIG_IsOK(ecode1)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Standard_MMgrOpt" "', argument " "1"" of type '" "Standard_Boolean""'"); }
+    arg1 = static_cast< Standard_Boolean >(val1); ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Standard_MMgrOpt" "', argument " "2"" of type '" "Standard_Boolean""'"); }
+    arg2 = static_cast< Standard_Boolean >(val2); ecode3 = SWIG_AsVal_size_t(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Standard_MMgrOpt" "', argument " "3"" of type '" "Standard_Size""'"); }
+    arg3 = static_cast< Standard_Size >(val3); ecode4 = SWIG_AsVal_int(obj3, &val4); if (!SWIG_IsOK(ecode4)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Standard_MMgrOpt" "', argument " "4"" of type '" "Standard_Integer""'"); }
+    arg4 = static_cast< Standard_Integer >(val4); { try {
+      result = (Standard_MMgrOpt *)new Standard_MMgrOpt(arg1,arg2,arg3,arg4); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_MMgrOpt, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_MMgrOpt__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Boolean arg1 ; Standard_Boolean arg2 ; Standard_Size arg3 ; Standard_MMgrOpt *result = 0 ;
+  unsigned int val1 ; int ecode1 = 0 ; unsigned int val2 ; int ecode2 = 0 ; size_t val3 ; int ecode3 = 0 ; PyObject * obj0 = 0 ;
+  PyObject * obj1 = 0 ; PyObject * obj2 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_MMgrOpt",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
+  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1); if (!SWIG_IsOK(ecode1)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Standard_MMgrOpt" "', argument " "1"" of type '" "Standard_Boolean""'"); }
+    arg1 = static_cast< Standard_Boolean >(val1); ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Standard_MMgrOpt" "', argument " "2"" of type '" "Standard_Boolean""'"); }
+    arg2 = static_cast< Standard_Boolean >(val2); ecode3 = SWIG_AsVal_size_t(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Standard_MMgrOpt" "', argument " "3"" of type '" "Standard_Size""'"); }
+    arg3 = static_cast< Standard_Size >(val3); { try { result = (Standard_MMgrOpt *)new Standard_MMgrOpt(arg1,arg2,arg3); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_MMgrOpt, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_MMgrOpt__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Boolean arg1 ; Standard_Boolean arg2 ; Standard_MMgrOpt *result = 0 ; unsigned int val1 ;
+  int ecode1 = 0 ; unsigned int val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_MMgrOpt",2,2,&obj0,&obj1)) SWIG_fail;
+  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1); if (!SWIG_IsOK(ecode1)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Standard_MMgrOpt" "', argument " "1"" of type '" "Standard_Boolean""'"); }
+    arg1 = static_cast< Standard_Boolean >(val1); ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Standard_MMgrOpt" "', argument " "2"" of type '" "Standard_Boolean""'"); }
+    arg2 = static_cast< Standard_Boolean >(val2); { try { result = (Standard_MMgrOpt *)new Standard_MMgrOpt(arg1,arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_MMgrOpt, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_MMgrOpt__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Boolean arg1 ; Standard_MMgrOpt *result = 0 ; unsigned int val1 ; int ecode1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Standard_MMgrOpt",1,1,&obj0)) SWIG_fail;
+  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1); if (!SWIG_IsOK(ecode1)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Standard_MMgrOpt" "', argument " "1"" of type '" "Standard_Boolean""'"); }
+    arg1 = static_cast< Standard_Boolean >(val1); { try { result = (Standard_MMgrOpt *)new Standard_MMgrOpt(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_MMgrOpt, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_MMgrOpt__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_MMgrOpt *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_MMgrOpt",0,0)) SWIG_fail; { try {
+      result = (Standard_MMgrOpt *)new Standard_MMgrOpt(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_MMgrOpt, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_MMgrOpt(PyObject *self, PyObject *args) { int argc; PyObject *argv[7]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 6); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Standard_MMgrOpt__SWIG_6(self, args);} 
+  if (argc == 1) { int _v; { int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL); _v = SWIG_CheckState(res); }  if (_v) {
+      return _wrap_new_Standard_MMgrOpt__SWIG_5(self, args);}  }  if (argc == 2) { int _v; {
+      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL); _v = SWIG_CheckState(res); }  if (_v) { {
+        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL); _v = SWIG_CheckState(res); }  if (_v) {
+        return _wrap_new_Standard_MMgrOpt__SWIG_4(self, args);}  }  }  if (argc == 3) { int _v; {
+      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL); _v = SWIG_CheckState(res); }  if (_v) { {
+        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL); _v = SWIG_CheckState(res); }  if (_v) { {
+          int res = SWIG_AsVal_size_t(argv[2], NULL); _v = SWIG_CheckState(res); }  if (_v) {
+          return _wrap_new_Standard_MMgrOpt__SWIG_3(self, args);}  }  }  }  if (argc == 4) { int _v; {
+      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL); _v = SWIG_CheckState(res); }  if (_v) { {
+        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL); _v = SWIG_CheckState(res); }  if (_v) { {
+          int res = SWIG_AsVal_size_t(argv[2], NULL); _v = SWIG_CheckState(res); }  if (_v) { {
+            int res = SWIG_AsVal_int(argv[3], NULL); _v = SWIG_CheckState(res); }  if (_v) {
+            return _wrap_new_Standard_MMgrOpt__SWIG_2(self, args);}  }  }  }  }  if (argc == 5) { int _v; {
+      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL); _v = SWIG_CheckState(res); }  if (_v) { {
+        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL); _v = SWIG_CheckState(res); }  if (_v) { {
+          int res = SWIG_AsVal_size_t(argv[2], NULL); _v = SWIG_CheckState(res); }  if (_v) { {
+            int res = SWIG_AsVal_int(argv[3], NULL); _v = SWIG_CheckState(res); }  if (_v) { {
+              int res = SWIG_AsVal_size_t(argv[4], NULL); _v = SWIG_CheckState(res); }  if (_v) {
+              return _wrap_new_Standard_MMgrOpt__SWIG_1(self, args);}  }  }  }  }  }  if (argc == 6) { int _v; {
+      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL); _v = SWIG_CheckState(res); }  if (_v) { {
+        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL); _v = SWIG_CheckState(res); }  if (_v) { {
+          int res = SWIG_AsVal_size_t(argv[2], NULL); _v = SWIG_CheckState(res); }  if (_v) { {
+            int res = SWIG_AsVal_int(argv[3], NULL); _v = SWIG_CheckState(res); }  if (_v) { {
+              int res = SWIG_AsVal_size_t(argv[4], NULL); _v = SWIG_CheckState(res); }  if (_v) { {
+                int res = SWIG_AsVal_unsigned_SS_int(argv[5], NULL); _v = SWIG_CheckState(res); }  if (_v) {
+                return _wrap_new_Standard_MMgrOpt__SWIG_0(self, args);}  }  }  }  }  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Standard_MMgrOpt'.\n  Possible C/C++ prototypes are:\n""    Standard_MMgrOpt(Standard_Boolean const,Standard_Boolean const,Standard_Size const,Standard_Integer const,Standard_Size const,Standard_Boolean const)\n""    Standard_MMgrOpt(Standard_Boolean const,Standard_Boolean const,Standard_Size const,Standard_Integer const,Standard_Size const)\n""    Standard_MMgrOpt(Standard_Boolean const,Standard_Boolean const,Standard_Size const,Standard_Integer const)\n""    Standard_MMgrOpt(Standard_Boolean const,Standard_Boolean const,Standard_Size const)\n""    Standard_MMgrOpt(Standard_Boolean const,Standard_Boolean const)\n""    Standard_MMgrOpt(Standard_Boolean const)\n""    Standard_MMgrOpt()\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_MMgrOpt_Allocate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_MMgrOpt *arg1 = (Standard_MMgrOpt *) 0 ; Standard_Size arg2 ; Standard_Address result; void *argp1 = 0 ;
+  int res1 = 0 ; size_t val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_MMgrOpt_Allocate",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_MMgrOpt, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_MMgrOpt_Allocate" "', argument " "1"" of type '" "Standard_MMgrOpt *""'");  }
+   arg1 = reinterpret_cast< Standard_MMgrOpt * >(argp1); ecode2 = SWIG_AsVal_size_t(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Standard_MMgrOpt_Allocate" "', argument " "2"" of type '" "Standard_Size""'"); }
+    arg2 = static_cast< Standard_Size >(val2); { try { result = (Standard_Address)(arg1)->Allocate(arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 ); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_MMgrOpt_Reallocate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_MMgrOpt *arg1 = (Standard_MMgrOpt *) 0 ; Standard_Address *arg2 = 0 ; Standard_Size arg3 ;
+  Standard_Address result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; size_t val3 ; int ecode3 = 0 ;
+  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_MMgrOpt_Reallocate",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_MMgrOpt, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_MMgrOpt_Reallocate" "', argument " "1"" of type '" "Standard_MMgrOpt *""'");  }
+   arg1 = reinterpret_cast< Standard_MMgrOpt * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_p_void,  0 );
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_MMgrOpt_Reallocate" "', argument " "2"" of type '" "Standard_Address &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_MMgrOpt_Reallocate" "', argument " "2"" of type '" "Standard_Address &""'"); }
+   arg2 = reinterpret_cast< Standard_Address * >(argp2); ecode3 = SWIG_AsVal_size_t(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Standard_MMgrOpt_Reallocate" "', argument " "3"" of type '" "Standard_Size""'"); }
+    arg3 = static_cast< Standard_Size >(val3); { try { result = (Standard_Address)(arg1)->Reallocate(*arg2,arg3); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 ); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_MMgrOpt_Free(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_MMgrOpt *arg1 = (Standard_MMgrOpt *) 0 ; Standard_Address *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_MMgrOpt_Free",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_MMgrOpt, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_MMgrOpt_Free" "', argument " "1"" of type '" "Standard_MMgrOpt *""'");  }
+   arg1 = reinterpret_cast< Standard_MMgrOpt * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_p_void,  0 );
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_MMgrOpt_Free" "', argument " "2"" of type '" "Standard_Address &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_MMgrOpt_Free" "', argument " "2"" of type '" "Standard_Address &""'"); }
+   arg2 = reinterpret_cast< Standard_Address * >(argp2); { try { (arg1)->Free(*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_MMgrOpt_Purge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_MMgrOpt *arg1 = (Standard_MMgrOpt *) 0 ; Standard_Boolean arg2 ; Standard_Integer result; void *argp1 = 0 ;
+  int res1 = 0 ; unsigned int val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_MMgrOpt_Purge",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_MMgrOpt, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_MMgrOpt_Purge" "', argument " "1"" of type '" "Standard_MMgrOpt *""'");  }
+   arg1 = reinterpret_cast< Standard_MMgrOpt * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
+  if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Standard_MMgrOpt_Purge" "', argument " "2"" of type '" "Standard_Boolean""'"); }
+    arg2 = static_cast< Standard_Boolean >(val2); { try { result = (Standard_Integer)(arg1)->Purge(arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_MMgrOpt_SetReentrant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_MMgrOpt *arg1 = (Standard_MMgrOpt *) 0 ; Standard_Boolean arg2 ; void *argp1 = 0 ;
+  int res1 = 0 ; unsigned int val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_MMgrOpt_SetReentrant",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_MMgrOpt, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_MMgrOpt_SetReentrant" "', argument " "1"" of type '" "Standard_MMgrOpt *""'");  }
+   arg1 = reinterpret_cast< Standard_MMgrOpt * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
+  if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Standard_MMgrOpt_SetReentrant" "', argument " "2"" of type '" "Standard_Boolean""'"); }
+    arg2 = static_cast< Standard_Boolean >(val2); { try { (arg1)->SetReentrant(arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_MMgrOpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_MMgrOpt *arg1 = (Standard_MMgrOpt *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_MMgrOpt",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_MMgrOpt, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_MMgrOpt" "', argument " "1"" of type '" "Standard_MMgrOpt *""'");  }
+   arg1 = reinterpret_cast< Standard_MMgrOpt * >(argp1); { try { delete_Standard_MMgrOpt(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_MMgrOpt_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_MMgrOpt, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Standard_TypeMismatch__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_TypeMismatch *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_TypeMismatch",0,0)) SWIG_fail; { try {
+      result = (Standard_TypeMismatch *)new Standard_TypeMismatch(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_TypeMismatch, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_TypeMismatch__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; char *arg1 = (char *) 0 ; Standard_TypeMismatch *result = 0 ; int res1 ; char *buf1 = 0 ;
+  int alloc1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Standard_TypeMismatch",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_TypeMismatch" "', argument " "1"" of type '" "char const *""'"); }
+   arg1 = reinterpret_cast< char * >(buf1); { try {
+      result = (Standard_TypeMismatch *)new Standard_TypeMismatch((char const *)arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_TypeMismatch, SWIG_POINTER_NEW |  0 );
+  if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return resultobj; fail: if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_TypeMismatch(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Standard_TypeMismatch__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Standard_TypeMismatch__SWIG_1(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Standard_TypeMismatch'.\n  Possible C/C++ prototypes are:\n""    Standard_TypeMismatch()\n""    Standard_TypeMismatch(char const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_TypeMismatch_Raise__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_TypeMismatch *arg1 = (Standard_TypeMismatch *) 0 ; char *arg2 = (char *) 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_TypeMismatch_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_TypeMismatch, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_TypeMismatch_Raise" "', argument " "1"" of type '" "Standard_TypeMismatch *""'");  }
+   arg1 = reinterpret_cast< Standard_TypeMismatch * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_TypeMismatch_Raise" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { (arg1)->Raise((char const *)arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_TypeMismatch_Raise__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_TypeMismatch *arg1 = (Standard_TypeMismatch *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_TypeMismatch_Raise",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_TypeMismatch, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_TypeMismatch_Raise" "', argument " "1"" of type '" "Standard_TypeMismatch *""'");  }
+   arg1 = reinterpret_cast< Standard_TypeMismatch * >(argp1); { try { (arg1)->Raise(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_TypeMismatch_Raise__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_TypeMismatch *arg1 = (Standard_TypeMismatch *) 0 ; Standard_SStream *arg2 = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_TypeMismatch_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_TypeMismatch, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_TypeMismatch_Raise" "', argument " "1"" of type '" "Standard_TypeMismatch *""'");  }
+   arg1 = reinterpret_cast< Standard_TypeMismatch * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Standard_SStream,  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_TypeMismatch_Raise" "', argument " "2"" of type '" "Standard_SStream &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_TypeMismatch_Raise" "', argument " "2"" of type '" "Standard_SStream &""'"); }
+   arg2 = reinterpret_cast< Standard_SStream * >(argp2); { try { (arg1)->Raise(*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_TypeMismatch_Raise(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_TypeMismatch, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_Standard_TypeMismatch_Raise__SWIG_1(self, args);}  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_TypeMismatch, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_SStream, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Standard_TypeMismatch_Raise__SWIG_2(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_TypeMismatch, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Standard_TypeMismatch_Raise__SWIG_0(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Standard_TypeMismatch_Raise'.\n  Possible C/C++ prototypes are:\n""    Raise(Standard_TypeMismatch *,char const *)\n""    Raise(Standard_TypeMismatch *)\n""    Raise(Standard_TypeMismatch *,Standard_SStream &)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_TypeMismatch_NewInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_TypeMismatch *arg1 = (Standard_TypeMismatch *) 0 ; char *arg2 = (char *) 0 ;
+  Handle_Standard_TypeMismatch result; void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ;
+  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_TypeMismatch_NewInstance",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_TypeMismatch, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_TypeMismatch_NewInstance" "', argument " "1"" of type '" "Standard_TypeMismatch *""'");  }
+   arg1 = reinterpret_cast< Standard_TypeMismatch * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_TypeMismatch_NewInstance" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { result = (arg1)->NewInstance((char const *)arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_TypeMismatch(static_cast< const Handle_Standard_TypeMismatch& >(result))), SWIGTYPE_p_Handle_Standard_TypeMismatch, SWIG_POINTER_OWN |  0 );
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_TypeMismatch_DynamicType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_TypeMismatch *arg1 = (Standard_TypeMismatch *) 0 ; Handle_Standard_Type *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_TypeMismatch_DynamicType",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_TypeMismatch, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_TypeMismatch_DynamicType" "', argument " "1"" of type '" "Standard_TypeMismatch const *""'");  }
+   arg1 = reinterpret_cast< Standard_TypeMismatch * >(argp1); { try { {
+        Handle_Standard_Type const &_result_ref = ((Standard_TypeMismatch const *)arg1)->DynamicType();
+        result = (Handle_Standard_Type *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Type, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_TypeMismatch_GetHandle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_TypeMismatch *arg1 = (Standard_TypeMismatch *) 0 ; Handle_Standard_TypeMismatch result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_TypeMismatch_GetHandle",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_TypeMismatch, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_TypeMismatch_GetHandle" "', argument " "1"" of type '" "Standard_TypeMismatch *""'");  }
+   arg1 = reinterpret_cast< Standard_TypeMismatch * >(argp1); { try { result = Standard_TypeMismatch_GetHandle(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_TypeMismatch(static_cast< const Handle_Standard_TypeMismatch& >(result))), SWIGTYPE_p_Handle_Standard_TypeMismatch, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_TypeMismatch___hash__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_TypeMismatch *arg1 = (Standard_TypeMismatch *) 0 ; Standard_Integer result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_TypeMismatch___hash__",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_TypeMismatch, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_TypeMismatch___hash__" "', argument " "1"" of type '" "Standard_TypeMismatch *""'");  }
+   arg1 = reinterpret_cast< Standard_TypeMismatch * >(argp1); { try {
+      result = (Standard_Integer)Standard_TypeMismatch___hash__(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_TypeMismatch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_TypeMismatch *arg1 = (Standard_TypeMismatch *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_TypeMismatch",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_TypeMismatch, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_TypeMismatch" "', argument " "1"" of type '" "Standard_TypeMismatch *""'");  }
+   arg1 = reinterpret_cast< Standard_TypeMismatch * >(argp1); { try { delete_Standard_TypeMismatch(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_TypeMismatch_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_TypeMismatch, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Standard_Storable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Storable *result = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Standard_Storable",0,0)) SWIG_fail; { try {
+      result = (Standard_Storable *)new Standard_Storable(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_Storable, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Storable_Delete(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Storable *arg1 = (Standard_Storable *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Storable_Delete",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Storable, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Storable_Delete" "', argument " "1"" of type '" "Standard_Storable *""'");  }
+   arg1 = reinterpret_cast< Standard_Storable * >(argp1); { try { (arg1)->Delete(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Storable_HashCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Storable *arg1 = (Standard_Storable *) 0 ; Standard_Integer arg2 ; Standard_Integer result; void *argp1 = 0 ;
+  int res1 = 0 ; int val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Storable_HashCode",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Storable, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Storable_HashCode" "', argument " "1"" of type '" "Standard_Storable const *""'");  }
+   arg1 = reinterpret_cast< Standard_Storable * >(argp1); ecode2 = SWIG_AsVal_int(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Standard_Storable_HashCode" "', argument " "2"" of type '" "Standard_Integer""'"); }
+    arg2 = static_cast< Standard_Integer >(val2); { try {
+      result = (Standard_Integer)((Standard_Storable const *)arg1)->HashCode(arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Storable_IsEqual(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Storable *arg1 = (Standard_Storable *) 0 ; Standard_Storable *arg2 = 0 ; Standard_Boolean result; void *argp1 = 0 ;
+  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Storable_IsEqual",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Storable, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Storable_IsEqual" "', argument " "1"" of type '" "Standard_Storable const *""'");  }
+   arg1 = reinterpret_cast< Standard_Storable * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Standard_Storable,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_Storable_IsEqual" "', argument " "2"" of type '" "Standard_Storable const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_Storable_IsEqual" "', argument " "2"" of type '" "Standard_Storable const &""'"); }
+   arg2 = reinterpret_cast< Standard_Storable * >(argp2); { try {
+      result = (Standard_Boolean)((Standard_Storable const *)arg1)->IsEqual((Standard_Storable const &)*arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Storable___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Storable *arg1 = (Standard_Storable *) 0 ; Standard_Storable *arg2 = 0 ; Standard_Boolean result; void *argp1 = 0 ;
+  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Storable___eq__",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Storable, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Storable___eq__" "', argument " "1"" of type '" "Standard_Storable const *""'");  }
+   arg1 = reinterpret_cast< Standard_Storable * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Standard_Storable,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_Storable___eq__" "', argument " "2"" of type '" "Standard_Storable const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_Storable___eq__" "', argument " "2"" of type '" "Standard_Storable const &""'"); }
+   arg2 = reinterpret_cast< Standard_Storable * >(argp2); { try {
+      result = (Standard_Boolean)((Standard_Storable const *)arg1)->operator ==((Standard_Storable const &)*arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Storable_IsSimilar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Storable *arg1 = (Standard_Storable *) 0 ; Standard_Storable *arg2 = 0 ;
+  Standard_Boolean result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ;
+  PyObject * obj1 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_Storable_IsSimilar",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Storable, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Storable_IsSimilar" "', argument " "1"" of type '" "Standard_Storable const *""'");  }
+   arg1 = reinterpret_cast< Standard_Storable * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Standard_Storable,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_Storable_IsSimilar" "', argument " "2"" of type '" "Standard_Storable const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_Storable_IsSimilar" "', argument " "2"" of type '" "Standard_Storable const &""'"); }
+   arg2 = reinterpret_cast< Standard_Storable * >(argp2); { try {
+      result = (Standard_Boolean)((Standard_Storable const *)arg1)->IsSimilar((Standard_Storable const &)*arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Storable_ShallowDumpToString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Storable *arg1 = (Standard_Storable *) 0 ; std::string result; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Storable_ShallowDumpToString",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Storable, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Storable_ShallowDumpToString" "', argument " "1"" of type '" "Standard_Storable *""'");  }
+   arg1 = reinterpret_cast< Standard_Storable * >(argp1); { try { result = Standard_Storable_ShallowDumpToString(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_std_string(static_cast< std::string >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Storable___hash__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Storable *arg1 = (Standard_Storable *) 0 ; Standard_Integer result; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_Storable___hash__",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Storable, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Storable___hash__" "', argument " "1"" of type '" "Standard_Storable *""'");  }
+   arg1 = reinterpret_cast< Standard_Storable * >(argp1); { try { result = (Standard_Integer)Standard_Storable___hash__(arg1); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_Storable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Storable *arg1 = (Standard_Storable *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_Storable",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Storable, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_Storable" "', argument " "1"" of type '" "Standard_Storable *""'");  }
+   arg1 = reinterpret_cast< Standard_Storable * >(argp1); { try { delete_Standard_Storable(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_Storable_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_Storable, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Standard_DimensionMismatch__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DimensionMismatch *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_DimensionMismatch",0,0)) SWIG_fail; { try {
+      result = (Standard_DimensionMismatch *)new Standard_DimensionMismatch(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_DimensionMismatch, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_DimensionMismatch__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; char *arg1 = (char *) 0 ; Standard_DimensionMismatch *result = 0 ; int res1 ; char *buf1 = 0 ;
+  int alloc1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_DimensionMismatch",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_DimensionMismatch" "', argument " "1"" of type '" "char const *""'"); }
+   arg1 = reinterpret_cast< char * >(buf1); { try {
+      result = (Standard_DimensionMismatch *)new Standard_DimensionMismatch((char const *)arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_DimensionMismatch, SWIG_POINTER_NEW |  0 );
+  if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return resultobj; fail: if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_DimensionMismatch(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Standard_DimensionMismatch__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Standard_DimensionMismatch__SWIG_1(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Standard_DimensionMismatch'.\n  Possible C/C++ prototypes are:\n""    Standard_DimensionMismatch()\n""    Standard_DimensionMismatch(char const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_DimensionMismatch_Raise__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DimensionMismatch *arg1 = (Standard_DimensionMismatch *) 0 ; char *arg2 = (char *) 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_DimensionMismatch_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DimensionMismatch, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_DimensionMismatch_Raise" "', argument " "1"" of type '" "Standard_DimensionMismatch *""'");  }
+   arg1 = reinterpret_cast< Standard_DimensionMismatch * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_DimensionMismatch_Raise" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { (arg1)->Raise((char const *)arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_DimensionMismatch_Raise__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DimensionMismatch *arg1 = (Standard_DimensionMismatch *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_DimensionMismatch_Raise",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DimensionMismatch, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_DimensionMismatch_Raise" "', argument " "1"" of type '" "Standard_DimensionMismatch *""'");  }
+   arg1 = reinterpret_cast< Standard_DimensionMismatch * >(argp1); { try { (arg1)->Raise(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_DimensionMismatch_Raise__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DimensionMismatch *arg1 = (Standard_DimensionMismatch *) 0 ; Standard_SStream *arg2 = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_DimensionMismatch_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DimensionMismatch, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_DimensionMismatch_Raise" "', argument " "1"" of type '" "Standard_DimensionMismatch *""'");  }
+   arg1 = reinterpret_cast< Standard_DimensionMismatch * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Standard_SStream,  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_DimensionMismatch_Raise" "', argument " "2"" of type '" "Standard_SStream &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_DimensionMismatch_Raise" "', argument " "2"" of type '" "Standard_SStream &""'"); }
+   arg2 = reinterpret_cast< Standard_SStream * >(argp2); { try { (arg1)->Raise(*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_DimensionMismatch_Raise(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_DimensionMismatch, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_Standard_DimensionMismatch_Raise__SWIG_1(self, args);}  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_DimensionMismatch, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_SStream, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Standard_DimensionMismatch_Raise__SWIG_2(self, args);}  }  }  if (argc == 2) { int _v;
+    void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_DimensionMismatch, 0);
+    _v = SWIG_CheckState(res); if (_v) { int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Standard_DimensionMismatch_Raise__SWIG_0(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Standard_DimensionMismatch_Raise'.\n  Possible C/C++ prototypes are:\n""    Raise(Standard_DimensionMismatch *,char const *)\n""    Raise(Standard_DimensionMismatch *)\n""    Raise(Standard_DimensionMismatch *,Standard_SStream &)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_DimensionMismatch_NewInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DimensionMismatch *arg1 = (Standard_DimensionMismatch *) 0 ; char *arg2 = (char *) 0 ;
+  Handle_Standard_DimensionMismatch result; void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ;
+  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_DimensionMismatch_NewInstance",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DimensionMismatch, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_DimensionMismatch_NewInstance" "', argument " "1"" of type '" "Standard_DimensionMismatch *""'");  }
+   arg1 = reinterpret_cast< Standard_DimensionMismatch * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_DimensionMismatch_NewInstance" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { result = (arg1)->NewInstance((char const *)arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_DimensionMismatch(static_cast< const Handle_Standard_DimensionMismatch& >(result))), SWIGTYPE_p_Handle_Standard_DimensionMismatch, SWIG_POINTER_OWN |  0 );
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_DimensionMismatch_DynamicType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DimensionMismatch *arg1 = (Standard_DimensionMismatch *) 0 ;
+  Handle_Standard_Type *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_DimensionMismatch_DynamicType",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DimensionMismatch, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_DimensionMismatch_DynamicType" "', argument " "1"" of type '" "Standard_DimensionMismatch const *""'");  }
+   arg1 = reinterpret_cast< Standard_DimensionMismatch * >(argp1); { try { {
+        Handle_Standard_Type const &_result_ref = ((Standard_DimensionMismatch const *)arg1)->DynamicType();
+        result = (Handle_Standard_Type *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Type, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_DimensionMismatch_GetHandle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DimensionMismatch *arg1 = (Standard_DimensionMismatch *) 0 ;
+  Handle_Standard_DimensionMismatch result; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_DimensionMismatch_GetHandle",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DimensionMismatch, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_DimensionMismatch_GetHandle" "', argument " "1"" of type '" "Standard_DimensionMismatch *""'");  }
+   arg1 = reinterpret_cast< Standard_DimensionMismatch * >(argp1); { try { result = Standard_DimensionMismatch_GetHandle(arg1); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_DimensionMismatch(static_cast< const Handle_Standard_DimensionMismatch& >(result))), SWIGTYPE_p_Handle_Standard_DimensionMismatch, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_DimensionMismatch___hash__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DimensionMismatch *arg1 = (Standard_DimensionMismatch *) 0 ; Standard_Integer result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_DimensionMismatch___hash__",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DimensionMismatch, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_DimensionMismatch___hash__" "', argument " "1"" of type '" "Standard_DimensionMismatch *""'");  }
+   arg1 = reinterpret_cast< Standard_DimensionMismatch * >(argp1); { try {
+      result = (Standard_Integer)Standard_DimensionMismatch___hash__(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_DimensionMismatch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DimensionMismatch *arg1 = (Standard_DimensionMismatch *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_DimensionMismatch",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DimensionMismatch, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_DimensionMismatch" "', argument " "1"" of type '" "Standard_DimensionMismatch *""'");  }
+   arg1 = reinterpret_cast< Standard_DimensionMismatch * >(argp1); { try { delete_Standard_DimensionMismatch(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_DimensionMismatch_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_DimensionMismatch, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_Standard_Type_Name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Type *arg1 = (Standard_Type *) 0 ; Standard_CString result; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Type_Name",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Type, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Type_Name" "', argument " "1"" of type '" "Standard_Type const *""'");  }
+   arg1 = reinterpret_cast< Standard_Type * >(argp1); { try { result = (Standard_CString)((Standard_Type const *)arg1)->Name(); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_FromCharPtr((const char *)result); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Type_Size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Type *arg1 = (Standard_Type *) 0 ; Standard_Integer result; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Type_Size",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Type, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Type_Size" "', argument " "1"" of type '" "Standard_Type const *""'");  }
+   arg1 = reinterpret_cast< Standard_Type * >(argp1); { try { result = (Standard_Integer)((Standard_Type const *)arg1)->Size(); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_Type__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  char *arg1 = (char *) 0 ; Standard_Integer arg2 ; Standard_Type *result = 0 ; int res1 ; char *buf1 = 0 ; int alloc1 = 0 ;
+  int val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_Type",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_Type" "', argument " "1"" of type '" "char const *""'"); }
+   arg1 = reinterpret_cast< char * >(buf1); ecode2 = SWIG_AsVal_int(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Standard_Type" "', argument " "2"" of type '" "Standard_Integer""'"); }
+    arg2 = static_cast< Standard_Integer >(val2); { try { result = (Standard_Type *)new Standard_Type((char const *)arg1,arg2); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_Type, SWIG_POINTER_NEW |  0 );
+  if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return resultobj; fail: if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_Type__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  char *arg1 = (char *) 0 ; Standard_Integer arg2 ; Standard_Integer arg3 ;
+  Standard_Address arg4 = (Standard_Address) (Standard_Address)0 ; Standard_Type *result = 0 ; int res1 ; char *buf1 = 0 ;
+  int alloc1 = 0 ; int val2 ; int ecode2 = 0 ; int val3 ; int ecode3 = 0 ; int res4 ; PyObject * obj0 = 0 ;
+  PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; PyObject * obj3 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_Type",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
+  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_Type" "', argument " "1"" of type '" "char const *""'"); }
+   arg1 = reinterpret_cast< char * >(buf1); ecode2 = SWIG_AsVal_int(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Standard_Type" "', argument " "2"" of type '" "Standard_Integer""'"); }
+    arg2 = static_cast< Standard_Integer >(val2); ecode3 = SWIG_AsVal_int(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Standard_Type" "', argument " "3"" of type '" "Standard_Integer""'"); }
+    arg3 = static_cast< Standard_Integer >(val3); res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4), 0, 0);
+  if (!SWIG_IsOK(res4)) {
+    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_Standard_Type" "', argument " "4"" of type '" "Standard_Address const""'");  }
+   { try { result = (Standard_Type *)new Standard_Type((char const *)arg1,arg2,arg3,arg4); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_Type, SWIG_POINTER_NEW |  0 );
+  if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return resultobj; fail: if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_Type__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  char *arg1 = (char *) 0 ; Standard_Integer arg2 ; Standard_Integer arg3 ; Standard_Integer arg4 ;
+  Standard_Address arg5 = (Standard_Address) (Standard_Address)0 ;
+  Standard_Address arg6 = (Standard_Address) (Standard_Address)0 ; Standard_Type *result = 0 ; int res1 ; char *buf1 = 0 ;
+  int alloc1 = 0 ; int val2 ; int ecode2 = 0 ; int val3 ; int ecode3 = 0 ; int val4 ; int ecode4 = 0 ; int res5 ; int res6 ;
+  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; PyObject * obj3 = 0 ; PyObject * obj4 = 0 ;
+  PyObject * obj5 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_Type",6,6,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
+  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_Type" "', argument " "1"" of type '" "char const *""'"); }
+   arg1 = reinterpret_cast< char * >(buf1); ecode2 = SWIG_AsVal_int(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Standard_Type" "', argument " "2"" of type '" "Standard_Integer""'"); }
+    arg2 = static_cast< Standard_Integer >(val2); ecode3 = SWIG_AsVal_int(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Standard_Type" "', argument " "3"" of type '" "Standard_Integer""'"); }
+    arg3 = static_cast< Standard_Integer >(val3); ecode4 = SWIG_AsVal_int(obj3, &val4); if (!SWIG_IsOK(ecode4)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Standard_Type" "', argument " "4"" of type '" "Standard_Integer""'"); }
+    arg4 = static_cast< Standard_Integer >(val4); res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5), 0, 0);
+  if (!SWIG_IsOK(res5)) {
+    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_Standard_Type" "', argument " "5"" of type '" "Standard_Address const""'");  }
+   res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6), 0, 0); if (!SWIG_IsOK(res6)) {
+    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_Standard_Type" "', argument " "6"" of type '" "Standard_Address const""'");  }
+   { try { result = (Standard_Type *)new Standard_Type((char const *)arg1,arg2,arg3,arg4,arg5,arg6); }   catch(Standard_Failure)
+    { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_Type, SWIG_POINTER_NEW |  0 );
+  if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return resultobj; fail: if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_Type__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  char *arg1 = (char *) 0 ; Standard_Integer arg2 ; Standard_Integer arg3 ;
+  Standard_Address arg4 = (Standard_Address) (Standard_Address)0 ;
+  Standard_Address arg5 = (Standard_Address) (Standard_Address)0 ; Standard_Type *result = 0 ; int res1 ; char *buf1 = 0 ;
+  int alloc1 = 0 ; int val2 ; int ecode2 = 0 ; int val3 ; int ecode3 = 0 ; int res4 ; int res5 ; PyObject * obj0 = 0 ;
+  PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; PyObject * obj3 = 0 ; PyObject * obj4 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_Type",5,5,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
+  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_Type" "', argument " "1"" of type '" "char const *""'"); }
+   arg1 = reinterpret_cast< char * >(buf1); ecode2 = SWIG_AsVal_int(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Standard_Type" "', argument " "2"" of type '" "Standard_Integer""'"); }
+    arg2 = static_cast< Standard_Integer >(val2); ecode3 = SWIG_AsVal_int(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Standard_Type" "', argument " "3"" of type '" "Standard_Integer""'"); }
+    arg3 = static_cast< Standard_Integer >(val3); res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4), 0, 0);
+  if (!SWIG_IsOK(res4)) {
+    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_Standard_Type" "', argument " "4"" of type '" "Standard_Address const""'");  }
+   res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5), 0, 0); if (!SWIG_IsOK(res5)) {
+    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_Standard_Type" "', argument " "5"" of type '" "Standard_Address const""'");  }
+   { try { result = (Standard_Type *)new Standard_Type((char const *)arg1,arg2,arg3,arg4,arg5); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_Type, SWIG_POINTER_NEW |  0 );
+  if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return resultobj; fail: if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_Type(PyObject *self, PyObject *args) { int argc; PyObject *argv[7]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 6); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
+    _v = SWIG_CheckState(res); if (_v) { { int res = SWIG_AsVal_int(argv[1], NULL); _v = SWIG_CheckState(res); }  if (_v) {
+        return _wrap_new_Standard_Type__SWIG_0(self, args);}  }  }  if (argc == 4) { int _v;
+    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) { {
+        int res = SWIG_AsVal_int(argv[1], NULL); _v = SWIG_CheckState(res); }  if (_v) { {
+          int res = SWIG_AsVal_int(argv[2], NULL); _v = SWIG_CheckState(res); }  if (_v) { void *ptr = 0;
+          int res = SWIG_ConvertPtr(argv[3], &ptr, 0, 0); _v = SWIG_CheckState(res); if (_v) {
+            return _wrap_new_Standard_Type__SWIG_1(self, args);}  }  }  }  }  if (argc == 5) { int _v;
+    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) { {
+        int res = SWIG_AsVal_int(argv[1], NULL); _v = SWIG_CheckState(res); }  if (_v) { {
+          int res = SWIG_AsVal_int(argv[2], NULL); _v = SWIG_CheckState(res); }  if (_v) { void *ptr = 0;
+          int res = SWIG_ConvertPtr(argv[3], &ptr, 0, 0); _v = SWIG_CheckState(res); if (_v) { void *ptr = 0;
+            int res = SWIG_ConvertPtr(argv[4], &ptr, 0, 0); _v = SWIG_CheckState(res); if (_v) {
+              return _wrap_new_Standard_Type__SWIG_3(self, args);}  }  }  }  }  }  if (argc == 6) { int _v;
+    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) { {
+        int res = SWIG_AsVal_int(argv[1], NULL); _v = SWIG_CheckState(res); }  if (_v) { {
+          int res = SWIG_AsVal_int(argv[2], NULL); _v = SWIG_CheckState(res); }  if (_v) { {
+            int res = SWIG_AsVal_int(argv[3], NULL); _v = SWIG_CheckState(res); }  if (_v) { void *ptr = 0;
+            int res = SWIG_ConvertPtr(argv[4], &ptr, 0, 0); _v = SWIG_CheckState(res); if (_v) { void *ptr = 0;
+              int res = SWIG_ConvertPtr(argv[5], &ptr, 0, 0); _v = SWIG_CheckState(res); if (_v) {
+                return _wrap_new_Standard_Type__SWIG_2(self, args);}  }  }  }  }  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Standard_Type'.\n  Possible C/C++ prototypes are:\n""    Standard_Type(char const *,Standard_Integer const)\n""    Standard_Type(char const *,Standard_Integer const,Standard_Integer const,Standard_Address const)\n""    Standard_Type(char const *,Standard_Integer const,Standard_Integer const,Standard_Integer const,Standard_Address const,Standard_Address const)\n""    Standard_Type(char const *,Standard_Integer const,Standard_Integer const,Standard_Address const,Standard_Address const)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Type_SubType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Type *arg1 = (Standard_Type *) 0 ; Handle_Standard_Type *arg2 = 0 ; Standard_Boolean result;
+  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Type_SubType",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Type, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Type_SubType" "', argument " "1"" of type '" "Standard_Type const *""'");  }
+   arg1 = reinterpret_cast< Standard_Type * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Type,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_Type_SubType" "', argument " "2"" of type '" "Handle_Standard_Type const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_Type_SubType" "', argument " "2"" of type '" "Handle_Standard_Type const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Type * >(argp2); { try {
+      result = (Standard_Boolean)((Standard_Type const *)arg1)->SubType((Handle_Standard_Type const &)*arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Type_SubType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Type *arg1 = (Standard_Type *) 0 ; char *arg2 = (char *) 0 ; Standard_Boolean result;
+  void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Type_SubType",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Type, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Type_SubType" "', argument " "1"" of type '" "Standard_Type const *""'");  }
+   arg1 = reinterpret_cast< Standard_Type * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_Type_SubType" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try {
+      result = (Standard_Boolean)((Standard_Type const *)arg1)->SubType((char const *)arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)); if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
+  return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Type_SubType(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_Type, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Handle_Standard_Type, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Standard_Type_SubType__SWIG_0(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_Type, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Standard_Type_SubType__SWIG_1(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Standard_Type_SubType'.\n  Possible C/C++ prototypes are:\n""    SubType(Standard_Type const *,Handle_Standard_Type const &)\n""    SubType(Standard_Type const *,char const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Type_IsImported(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Type *arg1 = (Standard_Type *) 0 ; Standard_Boolean result; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Type_IsImported",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Type, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Type_IsImported" "', argument " "1"" of type '" "Standard_Type const *""'");  }
+   arg1 = reinterpret_cast< Standard_Type * >(argp1); { try {
+      result = (Standard_Boolean)((Standard_Type const *)arg1)->IsImported(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Type_IsPrimitive(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Type *arg1 = (Standard_Type *) 0 ; Standard_Boolean result; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Type_IsPrimitive",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Type, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Type_IsPrimitive" "', argument " "1"" of type '" "Standard_Type const *""'");  }
+   arg1 = reinterpret_cast< Standard_Type * >(argp1); { try {
+      result = (Standard_Boolean)((Standard_Type const *)arg1)->IsPrimitive(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Type_IsEnumeration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Type *arg1 = (Standard_Type *) 0 ; Standard_Boolean result; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_Type_IsEnumeration",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Type, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Type_IsEnumeration" "', argument " "1"" of type '" "Standard_Type const *""'");  }
+   arg1 = reinterpret_cast< Standard_Type * >(argp1); { try {
+      result = (Standard_Boolean)((Standard_Type const *)arg1)->IsEnumeration(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Type_IsClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Type *arg1 = (Standard_Type *) 0 ; Standard_Boolean result; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Type_IsClass",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Type, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Type_IsClass" "', argument " "1"" of type '" "Standard_Type const *""'");  }
+   arg1 = reinterpret_cast< Standard_Type * >(argp1); { try {
+      result = (Standard_Boolean)((Standard_Type const *)arg1)->IsClass(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Type_NumberOfParent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Type *arg1 = (Standard_Type *) 0 ; Standard_Integer result; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_Type_NumberOfParent",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Type, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Type_NumberOfParent" "', argument " "1"" of type '" "Standard_Type const *""'");  }
+   arg1 = reinterpret_cast< Standard_Type * >(argp1); { try {
+      result = (Standard_Integer)((Standard_Type const *)arg1)->NumberOfParent(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Type_NumberOfAncestor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Type *arg1 = (Standard_Type *) 0 ; Standard_Integer result; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_Type_NumberOfAncestor",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Type, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Type_NumberOfAncestor" "', argument " "1"" of type '" "Standard_Type const *""'");  }
+   arg1 = reinterpret_cast< Standard_Type * >(argp1); { try {
+      result = (Standard_Integer)((Standard_Type const *)arg1)->NumberOfAncestor(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Type_ShallowDump(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Type *arg1 = (Standard_Type *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Type_ShallowDump",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Type, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Type_ShallowDump" "', argument " "1"" of type '" "Standard_Type const *""'");  }
+   arg1 = reinterpret_cast< Standard_Type * >(argp1); { try { ((Standard_Type const *)arg1)->ShallowDump(); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Type_ShallowDumpToString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Type *arg1 = (Standard_Type *) 0 ; std::string result; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_Type_ShallowDumpToString",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Type, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Type_ShallowDumpToString" "', argument " "1"" of type '" "Standard_Type *""'");  }
+   arg1 = reinterpret_cast< Standard_Type * >(argp1); { try { result = Standard_Type_ShallowDumpToString(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_std_string(static_cast< std::string >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Type_PrintToString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Type *arg1 = (Standard_Type *) 0 ; std::string result; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_Type_PrintToString",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Type, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Type_PrintToString" "', argument " "1"" of type '" "Standard_Type *""'");  }
+   arg1 = reinterpret_cast< Standard_Type * >(argp1); { try { result = Standard_Type_PrintToString(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_std_string(static_cast< std::string >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Type_DynamicType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Type *arg1 = (Standard_Type *) 0 ; Handle_Standard_Type *result = 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_Type_DynamicType",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Type, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Type_DynamicType" "', argument " "1"" of type '" "Standard_Type const *""'");  }
+   arg1 = reinterpret_cast< Standard_Type * >(argp1); { try { {
+        Handle_Standard_Type const &_result_ref = ((Standard_Type const *)arg1)->DynamicType();
+        result = (Handle_Standard_Type *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Type, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Type_GetHandle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Type *arg1 = (Standard_Type *) 0 ; Handle_Standard_Type result; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_Type_GetHandle",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Type, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Type_GetHandle" "', argument " "1"" of type '" "Standard_Type *""'");  }
+   arg1 = reinterpret_cast< Standard_Type * >(argp1); { try { result = Standard_Type_GetHandle(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_Type(static_cast< const Handle_Standard_Type& >(result))), SWIGTYPE_p_Handle_Standard_Type, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Type___hash__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Type *arg1 = (Standard_Type *) 0 ; Standard_Integer result; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Type___hash__",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Type, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Type___hash__" "', argument " "1"" of type '" "Standard_Type *""'");  }
+   arg1 = reinterpret_cast< Standard_Type * >(argp1); { try { result = (Standard_Integer)Standard_Type___hash__(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_Type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Type *arg1 = (Standard_Type *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_Type",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Type, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_Type" "', argument " "1"" of type '" "Standard_Type *""'");  }
+   arg1 = reinterpret_cast< Standard_Type * >(argp1); { try { delete_Standard_Type(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_Type_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_Type, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_Standard_ErrorHandlerCallback_RegisterCallback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ErrorHandlerCallback *arg1 = (Standard_ErrorHandlerCallback *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_ErrorHandlerCallback_RegisterCallback",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ErrorHandlerCallback, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_ErrorHandlerCallback_RegisterCallback" "', argument " "1"" of type '" "Standard_ErrorHandlerCallback *""'");  }
+   arg1 = reinterpret_cast< Standard_ErrorHandlerCallback * >(argp1); { try { (arg1)->RegisterCallback(); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_ErrorHandlerCallback_UnregisterCallback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ErrorHandlerCallback *arg1 = (Standard_ErrorHandlerCallback *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_ErrorHandlerCallback_UnregisterCallback",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ErrorHandlerCallback, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_ErrorHandlerCallback_UnregisterCallback" "', argument " "1"" of type '" "Standard_ErrorHandlerCallback *""'");  }
+   arg1 = reinterpret_cast< Standard_ErrorHandlerCallback * >(argp1); { try { (arg1)->UnregisterCallback(); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_ErrorHandlerCallback_DestroyCallback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ErrorHandlerCallback *arg1 = (Standard_ErrorHandlerCallback *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_ErrorHandlerCallback_DestroyCallback",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ErrorHandlerCallback, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_ErrorHandlerCallback_DestroyCallback" "', argument " "1"" of type '" "Standard_ErrorHandlerCallback *""'");  }
+   arg1 = reinterpret_cast< Standard_ErrorHandlerCallback * >(argp1); { try { (arg1)->DestroyCallback(); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_ErrorHandlerCallback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ErrorHandlerCallback *arg1 = (Standard_ErrorHandlerCallback *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_ErrorHandlerCallback",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ErrorHandlerCallback, SWIG_POINTER_DISOWN |  0 );
+  if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_ErrorHandlerCallback" "', argument " "1"" of type '" "Standard_ErrorHandlerCallback *""'");  }
+   arg1 = reinterpret_cast< Standard_ErrorHandlerCallback * >(argp1); { try { delete_Standard_ErrorHandlerCallback(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_ErrorHandlerCallback_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_ErrorHandlerCallback, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Standard_NegativeValue__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NegativeValue *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_NegativeValue",0,0)) SWIG_fail; { try {
+      result = (Standard_NegativeValue *)new Standard_NegativeValue(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_NegativeValue, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_NegativeValue__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; char *arg1 = (char *) 0 ; Standard_NegativeValue *result = 0 ; int res1 ; char *buf1 = 0 ;
+  int alloc1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Standard_NegativeValue",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_NegativeValue" "', argument " "1"" of type '" "char const *""'"); }
+   arg1 = reinterpret_cast< char * >(buf1); { try {
+      result = (Standard_NegativeValue *)new Standard_NegativeValue((char const *)arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_NegativeValue, SWIG_POINTER_NEW |  0 );
+  if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return resultobj; fail: if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_NegativeValue(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Standard_NegativeValue__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Standard_NegativeValue__SWIG_1(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Standard_NegativeValue'.\n  Possible C/C++ prototypes are:\n""    Standard_NegativeValue()\n""    Standard_NegativeValue(char const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NegativeValue_Raise__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NegativeValue *arg1 = (Standard_NegativeValue *) 0 ; char *arg2 = (char *) 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_NegativeValue_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NegativeValue, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NegativeValue_Raise" "', argument " "1"" of type '" "Standard_NegativeValue *""'");  }
+   arg1 = reinterpret_cast< Standard_NegativeValue * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_NegativeValue_Raise" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { (arg1)->Raise((char const *)arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NegativeValue_Raise__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NegativeValue *arg1 = (Standard_NegativeValue *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_NegativeValue_Raise",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NegativeValue, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NegativeValue_Raise" "', argument " "1"" of type '" "Standard_NegativeValue *""'");  }
+   arg1 = reinterpret_cast< Standard_NegativeValue * >(argp1); { try { (arg1)->Raise(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NegativeValue_Raise__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NegativeValue *arg1 = (Standard_NegativeValue *) 0 ; Standard_SStream *arg2 = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_NegativeValue_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NegativeValue, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NegativeValue_Raise" "', argument " "1"" of type '" "Standard_NegativeValue *""'");  }
+   arg1 = reinterpret_cast< Standard_NegativeValue * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Standard_SStream,  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_NegativeValue_Raise" "', argument " "2"" of type '" "Standard_SStream &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_NegativeValue_Raise" "', argument " "2"" of type '" "Standard_SStream &""'"); }
+   arg2 = reinterpret_cast< Standard_SStream * >(argp2); { try { (arg1)->Raise(*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NegativeValue_Raise(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_NegativeValue, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_Standard_NegativeValue_Raise__SWIG_1(self, args);}  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_NegativeValue, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_SStream, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Standard_NegativeValue_Raise__SWIG_2(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_NegativeValue, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Standard_NegativeValue_Raise__SWIG_0(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Standard_NegativeValue_Raise'.\n  Possible C/C++ prototypes are:\n""    Raise(Standard_NegativeValue *,char const *)\n""    Raise(Standard_NegativeValue *)\n""    Raise(Standard_NegativeValue *,Standard_SStream &)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NegativeValue_NewInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NegativeValue *arg1 = (Standard_NegativeValue *) 0 ; char *arg2 = (char *) 0 ;
+  Handle_Standard_NegativeValue result; void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ;
+  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_NegativeValue_NewInstance",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NegativeValue, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NegativeValue_NewInstance" "', argument " "1"" of type '" "Standard_NegativeValue *""'");  }
+   arg1 = reinterpret_cast< Standard_NegativeValue * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_NegativeValue_NewInstance" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { result = (arg1)->NewInstance((char const *)arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_NegativeValue(static_cast< const Handle_Standard_NegativeValue& >(result))), SWIGTYPE_p_Handle_Standard_NegativeValue, SWIG_POINTER_OWN |  0 );
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NegativeValue_DynamicType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NegativeValue *arg1 = (Standard_NegativeValue *) 0 ; Handle_Standard_Type *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_NegativeValue_DynamicType",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NegativeValue, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NegativeValue_DynamicType" "', argument " "1"" of type '" "Standard_NegativeValue const *""'");  }
+   arg1 = reinterpret_cast< Standard_NegativeValue * >(argp1); { try { {
+        Handle_Standard_Type const &_result_ref = ((Standard_NegativeValue const *)arg1)->DynamicType();
+        result = (Handle_Standard_Type *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Type, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NegativeValue_GetHandle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NegativeValue *arg1 = (Standard_NegativeValue *) 0 ; Handle_Standard_NegativeValue result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_NegativeValue_GetHandle",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NegativeValue, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NegativeValue_GetHandle" "', argument " "1"" of type '" "Standard_NegativeValue *""'");  }
+   arg1 = reinterpret_cast< Standard_NegativeValue * >(argp1); { try { result = Standard_NegativeValue_GetHandle(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_NegativeValue(static_cast< const Handle_Standard_NegativeValue& >(result))), SWIGTYPE_p_Handle_Standard_NegativeValue, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NegativeValue___hash__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NegativeValue *arg1 = (Standard_NegativeValue *) 0 ; Standard_Integer result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_NegativeValue___hash__",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NegativeValue, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NegativeValue___hash__" "', argument " "1"" of type '" "Standard_NegativeValue *""'");  }
+   arg1 = reinterpret_cast< Standard_NegativeValue * >(argp1); { try {
+      result = (Standard_Integer)Standard_NegativeValue___hash__(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_NegativeValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NegativeValue *arg1 = (Standard_NegativeValue *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_NegativeValue",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NegativeValue, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_NegativeValue" "', argument " "1"" of type '" "Standard_NegativeValue *""'");  }
+   arg1 = reinterpret_cast< Standard_NegativeValue * >(argp1); { try { delete_Standard_NegativeValue(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_NegativeValue_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_NegativeValue, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Standard_DivideByZero__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DivideByZero *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_DivideByZero",0,0)) SWIG_fail; { try {
+      result = (Standard_DivideByZero *)new Standard_DivideByZero(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_DivideByZero, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_DivideByZero__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; char *arg1 = (char *) 0 ; Standard_DivideByZero *result = 0 ; int res1 ; char *buf1 = 0 ;
+  int alloc1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Standard_DivideByZero",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_DivideByZero" "', argument " "1"" of type '" "char const *""'"); }
+   arg1 = reinterpret_cast< char * >(buf1); { try {
+      result = (Standard_DivideByZero *)new Standard_DivideByZero((char const *)arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_DivideByZero, SWIG_POINTER_NEW |  0 );
+  if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return resultobj; fail: if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_DivideByZero(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Standard_DivideByZero__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Standard_DivideByZero__SWIG_1(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Standard_DivideByZero'.\n  Possible C/C++ prototypes are:\n""    Standard_DivideByZero()\n""    Standard_DivideByZero(char const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_DivideByZero_Raise__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DivideByZero *arg1 = (Standard_DivideByZero *) 0 ; char *arg2 = (char *) 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_DivideByZero_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DivideByZero, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_DivideByZero_Raise" "', argument " "1"" of type '" "Standard_DivideByZero *""'");  }
+   arg1 = reinterpret_cast< Standard_DivideByZero * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_DivideByZero_Raise" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { (arg1)->Raise((char const *)arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_DivideByZero_Raise__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DivideByZero *arg1 = (Standard_DivideByZero *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_DivideByZero_Raise",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DivideByZero, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_DivideByZero_Raise" "', argument " "1"" of type '" "Standard_DivideByZero *""'");  }
+   arg1 = reinterpret_cast< Standard_DivideByZero * >(argp1); { try { (arg1)->Raise(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_DivideByZero_Raise__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DivideByZero *arg1 = (Standard_DivideByZero *) 0 ; Standard_SStream *arg2 = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_DivideByZero_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DivideByZero, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_DivideByZero_Raise" "', argument " "1"" of type '" "Standard_DivideByZero *""'");  }
+   arg1 = reinterpret_cast< Standard_DivideByZero * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Standard_SStream,  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_DivideByZero_Raise" "', argument " "2"" of type '" "Standard_SStream &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_DivideByZero_Raise" "', argument " "2"" of type '" "Standard_SStream &""'"); }
+   arg2 = reinterpret_cast< Standard_SStream * >(argp2); { try { (arg1)->Raise(*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_DivideByZero_Raise(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_DivideByZero, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_Standard_DivideByZero_Raise__SWIG_1(self, args);}  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_DivideByZero, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_SStream, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Standard_DivideByZero_Raise__SWIG_2(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_DivideByZero, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Standard_DivideByZero_Raise__SWIG_0(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Standard_DivideByZero_Raise'.\n  Possible C/C++ prototypes are:\n""    Raise(Standard_DivideByZero *,char const *)\n""    Raise(Standard_DivideByZero *)\n""    Raise(Standard_DivideByZero *,Standard_SStream &)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_DivideByZero_NewInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DivideByZero *arg1 = (Standard_DivideByZero *) 0 ; char *arg2 = (char *) 0 ;
+  Handle_Standard_DivideByZero result; void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ;
+  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_DivideByZero_NewInstance",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DivideByZero, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_DivideByZero_NewInstance" "', argument " "1"" of type '" "Standard_DivideByZero *""'");  }
+   arg1 = reinterpret_cast< Standard_DivideByZero * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_DivideByZero_NewInstance" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { result = (arg1)->NewInstance((char const *)arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_DivideByZero(static_cast< const Handle_Standard_DivideByZero& >(result))), SWIGTYPE_p_Handle_Standard_DivideByZero, SWIG_POINTER_OWN |  0 );
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_DivideByZero_DynamicType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DivideByZero *arg1 = (Standard_DivideByZero *) 0 ; Handle_Standard_Type *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_DivideByZero_DynamicType",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DivideByZero, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_DivideByZero_DynamicType" "', argument " "1"" of type '" "Standard_DivideByZero const *""'");  }
+   arg1 = reinterpret_cast< Standard_DivideByZero * >(argp1); { try { {
+        Handle_Standard_Type const &_result_ref = ((Standard_DivideByZero const *)arg1)->DynamicType();
+        result = (Handle_Standard_Type *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Type, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_DivideByZero_GetHandle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DivideByZero *arg1 = (Standard_DivideByZero *) 0 ; Handle_Standard_DivideByZero result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_DivideByZero_GetHandle",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DivideByZero, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_DivideByZero_GetHandle" "', argument " "1"" of type '" "Standard_DivideByZero *""'");  }
+   arg1 = reinterpret_cast< Standard_DivideByZero * >(argp1); { try { result = Standard_DivideByZero_GetHandle(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_DivideByZero(static_cast< const Handle_Standard_DivideByZero& >(result))), SWIGTYPE_p_Handle_Standard_DivideByZero, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_DivideByZero___hash__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DivideByZero *arg1 = (Standard_DivideByZero *) 0 ; Standard_Integer result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_DivideByZero___hash__",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DivideByZero, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_DivideByZero___hash__" "', argument " "1"" of type '" "Standard_DivideByZero *""'");  }
+   arg1 = reinterpret_cast< Standard_DivideByZero * >(argp1); { try {
+      result = (Standard_Integer)Standard_DivideByZero___hash__(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_DivideByZero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_DivideByZero *arg1 = (Standard_DivideByZero *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_DivideByZero",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_DivideByZero, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_DivideByZero" "', argument " "1"" of type '" "Standard_DivideByZero *""'");  }
+   arg1 = reinterpret_cast< Standard_DivideByZero * >(argp1); { try { delete_Standard_DivideByZero(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_DivideByZero_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_DivideByZero, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Standard_ImmutableObject__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ImmutableObject *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_ImmutableObject",0,0)) SWIG_fail; { try {
+      result = (Standard_ImmutableObject *)new Standard_ImmutableObject(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_ImmutableObject, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_ImmutableObject__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; char *arg1 = (char *) 0 ; Standard_ImmutableObject *result = 0 ; int res1 ; char *buf1 = 0 ;
+  int alloc1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_ImmutableObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_ImmutableObject" "', argument " "1"" of type '" "char const *""'"); }
+   arg1 = reinterpret_cast< char * >(buf1); { try {
+      result = (Standard_ImmutableObject *)new Standard_ImmutableObject((char const *)arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_ImmutableObject, SWIG_POINTER_NEW |  0 );
+  if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return resultobj; fail: if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_ImmutableObject(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Standard_ImmutableObject__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Standard_ImmutableObject__SWIG_1(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Standard_ImmutableObject'.\n  Possible C/C++ prototypes are:\n""    Standard_ImmutableObject()\n""    Standard_ImmutableObject(char const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_ImmutableObject_Raise__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ImmutableObject *arg1 = (Standard_ImmutableObject *) 0 ; char *arg2 = (char *) 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_ImmutableObject_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ImmutableObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_ImmutableObject_Raise" "', argument " "1"" of type '" "Standard_ImmutableObject *""'");  }
+   arg1 = reinterpret_cast< Standard_ImmutableObject * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_ImmutableObject_Raise" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { (arg1)->Raise((char const *)arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_ImmutableObject_Raise__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ImmutableObject *arg1 = (Standard_ImmutableObject *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_ImmutableObject_Raise",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ImmutableObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_ImmutableObject_Raise" "', argument " "1"" of type '" "Standard_ImmutableObject *""'");  }
+   arg1 = reinterpret_cast< Standard_ImmutableObject * >(argp1); { try { (arg1)->Raise(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_ImmutableObject_Raise__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ImmutableObject *arg1 = (Standard_ImmutableObject *) 0 ; Standard_SStream *arg2 = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_ImmutableObject_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ImmutableObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_ImmutableObject_Raise" "', argument " "1"" of type '" "Standard_ImmutableObject *""'");  }
+   arg1 = reinterpret_cast< Standard_ImmutableObject * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Standard_SStream,  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_ImmutableObject_Raise" "', argument " "2"" of type '" "Standard_SStream &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_ImmutableObject_Raise" "', argument " "2"" of type '" "Standard_SStream &""'"); }
+   arg2 = reinterpret_cast< Standard_SStream * >(argp2); { try { (arg1)->Raise(*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_ImmutableObject_Raise(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_ImmutableObject, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_Standard_ImmutableObject_Raise__SWIG_1(self, args);}  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_ImmutableObject, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_SStream, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Standard_ImmutableObject_Raise__SWIG_2(self, args);}  }  }  if (argc == 2) { int _v;
+    void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_ImmutableObject, 0);
+    _v = SWIG_CheckState(res); if (_v) { int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Standard_ImmutableObject_Raise__SWIG_0(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Standard_ImmutableObject_Raise'.\n  Possible C/C++ prototypes are:\n""    Raise(Standard_ImmutableObject *,char const *)\n""    Raise(Standard_ImmutableObject *)\n""    Raise(Standard_ImmutableObject *,Standard_SStream &)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_ImmutableObject_NewInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ImmutableObject *arg1 = (Standard_ImmutableObject *) 0 ; char *arg2 = (char *) 0 ;
+  Handle_Standard_ImmutableObject result; void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ;
+  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_ImmutableObject_NewInstance",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ImmutableObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_ImmutableObject_NewInstance" "', argument " "1"" of type '" "Standard_ImmutableObject *""'");  }
+   arg1 = reinterpret_cast< Standard_ImmutableObject * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_ImmutableObject_NewInstance" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { result = (arg1)->NewInstance((char const *)arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_ImmutableObject(static_cast< const Handle_Standard_ImmutableObject& >(result))), SWIGTYPE_p_Handle_Standard_ImmutableObject, SWIG_POINTER_OWN |  0 );
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_ImmutableObject_DynamicType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ImmutableObject *arg1 = (Standard_ImmutableObject *) 0 ; Handle_Standard_Type *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_ImmutableObject_DynamicType",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ImmutableObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_ImmutableObject_DynamicType" "', argument " "1"" of type '" "Standard_ImmutableObject const *""'");  }
+   arg1 = reinterpret_cast< Standard_ImmutableObject * >(argp1); { try { {
+        Handle_Standard_Type const &_result_ref = ((Standard_ImmutableObject const *)arg1)->DynamicType();
+        result = (Handle_Standard_Type *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Type, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_ImmutableObject_GetHandle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ImmutableObject *arg1 = (Standard_ImmutableObject *) 0 ;
+  Handle_Standard_ImmutableObject result; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_ImmutableObject_GetHandle",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ImmutableObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_ImmutableObject_GetHandle" "', argument " "1"" of type '" "Standard_ImmutableObject *""'");  }
+   arg1 = reinterpret_cast< Standard_ImmutableObject * >(argp1); { try { result = Standard_ImmutableObject_GetHandle(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_ImmutableObject(static_cast< const Handle_Standard_ImmutableObject& >(result))), SWIGTYPE_p_Handle_Standard_ImmutableObject, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_ImmutableObject___hash__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ImmutableObject *arg1 = (Standard_ImmutableObject *) 0 ; Standard_Integer result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_ImmutableObject___hash__",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ImmutableObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_ImmutableObject___hash__" "', argument " "1"" of type '" "Standard_ImmutableObject *""'");  }
+   arg1 = reinterpret_cast< Standard_ImmutableObject * >(argp1); { try {
+      result = (Standard_Integer)Standard_ImmutableObject___hash__(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_ImmutableObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ImmutableObject *arg1 = (Standard_ImmutableObject *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_ImmutableObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ImmutableObject, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_ImmutableObject" "', argument " "1"" of type '" "Standard_ImmutableObject *""'");  }
+   arg1 = reinterpret_cast< Standard_ImmutableObject * >(argp1); { try { delete_Standard_ImmutableObject(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_ImmutableObject_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_ImmutableObject, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Standard_AbortiveTransaction__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_AbortiveTransaction *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_AbortiveTransaction",0,0)) SWIG_fail; { try {
+      result = (Standard_AbortiveTransaction *)new Standard_AbortiveTransaction(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_AbortiveTransaction, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_AbortiveTransaction__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; char *arg1 = (char *) 0 ; Standard_AbortiveTransaction *result = 0 ; int res1 ; char *buf1 = 0 ;
+  int alloc1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_AbortiveTransaction",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_AbortiveTransaction" "', argument " "1"" of type '" "char const *""'"); }
+   arg1 = reinterpret_cast< char * >(buf1); { try {
+      result = (Standard_AbortiveTransaction *)new Standard_AbortiveTransaction((char const *)arg1); }   catch(Standard_Failure)
+    { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_AbortiveTransaction, SWIG_POINTER_NEW |  0 );
+  if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return resultobj; fail: if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_AbortiveTransaction(PyObject *self, PyObject *args) { int argc; PyObject *argv[2];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Standard_AbortiveTransaction__SWIG_0(self, args);}
+   if (argc == 1) { int _v; int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Standard_AbortiveTransaction__SWIG_1(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Standard_AbortiveTransaction'.\n  Possible C/C++ prototypes are:\n""    Standard_AbortiveTransaction()\n""    Standard_AbortiveTransaction(char const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_AbortiveTransaction_Raise__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_AbortiveTransaction *arg1 = (Standard_AbortiveTransaction *) 0 ; char *arg2 = (char *) 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_AbortiveTransaction_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_AbortiveTransaction, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_AbortiveTransaction_Raise" "', argument " "1"" of type '" "Standard_AbortiveTransaction *""'");  }
+   arg1 = reinterpret_cast< Standard_AbortiveTransaction * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_AbortiveTransaction_Raise" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { (arg1)->Raise((char const *)arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_AbortiveTransaction_Raise__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_AbortiveTransaction *arg1 = (Standard_AbortiveTransaction *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_AbortiveTransaction_Raise",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_AbortiveTransaction, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_AbortiveTransaction_Raise" "', argument " "1"" of type '" "Standard_AbortiveTransaction *""'");  }
+   arg1 = reinterpret_cast< Standard_AbortiveTransaction * >(argp1); { try { (arg1)->Raise(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_AbortiveTransaction_Raise__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_AbortiveTransaction *arg1 = (Standard_AbortiveTransaction *) 0 ;
+  Standard_SStream *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ;
+  PyObject * obj1 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_AbortiveTransaction_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_AbortiveTransaction, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_AbortiveTransaction_Raise" "', argument " "1"" of type '" "Standard_AbortiveTransaction *""'");  }
+   arg1 = reinterpret_cast< Standard_AbortiveTransaction * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Standard_SStream,  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_AbortiveTransaction_Raise" "', argument " "2"" of type '" "Standard_SStream &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_AbortiveTransaction_Raise" "', argument " "2"" of type '" "Standard_SStream &""'"); }
+   arg2 = reinterpret_cast< Standard_SStream * >(argp2); { try { (arg1)->Raise(*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_AbortiveTransaction_Raise(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
+  int ii; if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_AbortiveTransaction, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_Standard_AbortiveTransaction_Raise__SWIG_1(self, args);}  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_AbortiveTransaction, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_SStream, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Standard_AbortiveTransaction_Raise__SWIG_2(self, args);}  }  }  if (argc == 2) { int _v;
+    void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_AbortiveTransaction, 0);
+    _v = SWIG_CheckState(res); if (_v) { int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Standard_AbortiveTransaction_Raise__SWIG_0(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Standard_AbortiveTransaction_Raise'.\n  Possible C/C++ prototypes are:\n""    Raise(Standard_AbortiveTransaction *,char const *)\n""    Raise(Standard_AbortiveTransaction *)\n""    Raise(Standard_AbortiveTransaction *,Standard_SStream &)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_AbortiveTransaction_NewInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_AbortiveTransaction *arg1 = (Standard_AbortiveTransaction *) 0 ; char *arg2 = (char *) 0 ;
+  Handle_Standard_AbortiveTransaction result; void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ;
+  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_AbortiveTransaction_NewInstance",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_AbortiveTransaction, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_AbortiveTransaction_NewInstance" "', argument " "1"" of type '" "Standard_AbortiveTransaction *""'");  }
+   arg1 = reinterpret_cast< Standard_AbortiveTransaction * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_AbortiveTransaction_NewInstance" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { result = (arg1)->NewInstance((char const *)arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_AbortiveTransaction(static_cast< const Handle_Standard_AbortiveTransaction& >(result))), SWIGTYPE_p_Handle_Standard_AbortiveTransaction, SWIG_POINTER_OWN |  0 );
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_AbortiveTransaction_DynamicType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_AbortiveTransaction *arg1 = (Standard_AbortiveTransaction *) 0 ;
+  Handle_Standard_Type *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_AbortiveTransaction_DynamicType",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_AbortiveTransaction, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_AbortiveTransaction_DynamicType" "', argument " "1"" of type '" "Standard_AbortiveTransaction const *""'");  }
+   arg1 = reinterpret_cast< Standard_AbortiveTransaction * >(argp1); { try { {
+        Handle_Standard_Type const &_result_ref = ((Standard_AbortiveTransaction const *)arg1)->DynamicType();
+        result = (Handle_Standard_Type *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Type, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_AbortiveTransaction_GetHandle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_AbortiveTransaction *arg1 = (Standard_AbortiveTransaction *) 0 ;
+  Handle_Standard_AbortiveTransaction result; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_AbortiveTransaction_GetHandle",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_AbortiveTransaction, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_AbortiveTransaction_GetHandle" "', argument " "1"" of type '" "Standard_AbortiveTransaction *""'");  }
+   arg1 = reinterpret_cast< Standard_AbortiveTransaction * >(argp1); { try {
+      result = Standard_AbortiveTransaction_GetHandle(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_AbortiveTransaction(static_cast< const Handle_Standard_AbortiveTransaction& >(result))), SWIGTYPE_p_Handle_Standard_AbortiveTransaction, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_AbortiveTransaction___hash__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_AbortiveTransaction *arg1 = (Standard_AbortiveTransaction *) 0 ; Standard_Integer result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_AbortiveTransaction___hash__",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_AbortiveTransaction, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_AbortiveTransaction___hash__" "', argument " "1"" of type '" "Standard_AbortiveTransaction *""'");  }
+   arg1 = reinterpret_cast< Standard_AbortiveTransaction * >(argp1); { try {
+      result = (Standard_Integer)Standard_AbortiveTransaction___hash__(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_AbortiveTransaction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_AbortiveTransaction *arg1 = (Standard_AbortiveTransaction *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_AbortiveTransaction",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_AbortiveTransaction, SWIG_POINTER_DISOWN |  0 );
+  if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_AbortiveTransaction" "', argument " "1"" of type '" "Standard_AbortiveTransaction *""'");  }
+   arg1 = reinterpret_cast< Standard_AbortiveTransaction * >(argp1); { try { delete_Standard_AbortiveTransaction(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_AbortiveTransaction_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_AbortiveTransaction, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Standard_AncestorIterator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_AncestorIterator *arg1 = 0 ; Standard_AncestorIterator *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Standard_AncestorIterator",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Standard_AncestorIterator,  0  | 0); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_AncestorIterator" "', argument " "1"" of type '" "Standard_AncestorIterator const &""'");  }
+   if (!argp1) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Standard_AncestorIterator" "', argument " "1"" of type '" "Standard_AncestorIterator const &""'"); }
+   arg1 = reinterpret_cast< Standard_AncestorIterator * >(argp1); { try {
+      result = (Standard_AncestorIterator *)new Standard_AncestorIterator((Standard_AncestorIterator const &)*arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_AncestorIterator, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_AncestorIterator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Handle_Standard_Type *arg1 = 0 ; Standard_AncestorIterator *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Standard_AncestorIterator",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Handle_Standard_Type,  0  | 0); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_AncestorIterator" "', argument " "1"" of type '" "Handle_Standard_Type const &""'");  }
+   if (!argp1) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Standard_AncestorIterator" "', argument " "1"" of type '" "Handle_Standard_Type const &""'"); }
+   arg1 = reinterpret_cast< Handle_Standard_Type * >(argp1); { try {
+      result = (Standard_AncestorIterator *)new Standard_AncestorIterator((Handle_Standard_Type const &)*arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_AncestorIterator, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_AncestorIterator(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 1) { int _v;
+    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Standard_AncestorIterator, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Standard_AncestorIterator__SWIG_0(self, args);}  }  if (argc == 1) { int _v;
+    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Handle_Standard_Type, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Standard_AncestorIterator__SWIG_1(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Standard_AncestorIterator'.\n  Possible C/C++ prototypes are:\n""    Standard_AncestorIterator(Standard_AncestorIterator const &)\n""    Standard_AncestorIterator(Handle_Standard_Type const &)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_AncestorIterator_Assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_AncestorIterator *arg1 = (Standard_AncestorIterator *) 0 ;
+  Standard_AncestorIterator *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ;
+  PyObject * obj1 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_AncestorIterator_Assign",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_AncestorIterator, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_AncestorIterator_Assign" "', argument " "1"" of type '" "Standard_AncestorIterator *""'");  }
+   arg1 = reinterpret_cast< Standard_AncestorIterator * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Standard_AncestorIterator,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_AncestorIterator_Assign" "', argument " "2"" of type '" "Standard_AncestorIterator const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_AncestorIterator_Assign" "', argument " "2"" of type '" "Standard_AncestorIterator const &""'"); }
+   arg2 = reinterpret_cast< Standard_AncestorIterator * >(argp2); { try {
+      (arg1)->Assign((Standard_AncestorIterator const &)*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_AncestorIterator_Set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_AncestorIterator *arg1 = (Standard_AncestorIterator *) 0 ;
+  Standard_AncestorIterator *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ;
+  PyObject * obj1 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_AncestorIterator_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_AncestorIterator, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_AncestorIterator_Set" "', argument " "1"" of type '" "Standard_AncestorIterator *""'");  }
+   arg1 = reinterpret_cast< Standard_AncestorIterator * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Standard_AncestorIterator,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_AncestorIterator_Set" "', argument " "2"" of type '" "Standard_AncestorIterator const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_AncestorIterator_Set" "', argument " "2"" of type '" "Standard_AncestorIterator const &""'"); }
+   arg2 = reinterpret_cast< Standard_AncestorIterator * >(argp2); { try {
+      (arg1)->operator =((Standard_AncestorIterator const &)*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_AncestorIterator_More(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_AncestorIterator *arg1 = (Standard_AncestorIterator *) 0 ; Standard_Boolean result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_AncestorIterator_More",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_AncestorIterator, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_AncestorIterator_More" "', argument " "1"" of type '" "Standard_AncestorIterator const *""'");  }
+   arg1 = reinterpret_cast< Standard_AncestorIterator * >(argp1); { try {
+      result = (Standard_Boolean)((Standard_AncestorIterator const *)arg1)->More(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_AncestorIterator_Next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_AncestorIterator *arg1 = (Standard_AncestorIterator *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_AncestorIterator_Next",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_AncestorIterator, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_AncestorIterator_Next" "', argument " "1"" of type '" "Standard_AncestorIterator *""'");  }
+   arg1 = reinterpret_cast< Standard_AncestorIterator * >(argp1); { try { (arg1)->Next(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_AncestorIterator_Iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_AncestorIterator *arg1 = (Standard_AncestorIterator *) 0 ;
+  SwigValueWrapper< Standard_AncestorIterator > result; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_AncestorIterator_Iterator",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_AncestorIterator, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_AncestorIterator_Iterator" "', argument " "1"" of type '" "Standard_AncestorIterator const *""'");  }
+   arg1 = reinterpret_cast< Standard_AncestorIterator * >(argp1); { try {
+      result = ((Standard_AncestorIterator const *)arg1)->Iterator(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Standard_AncestorIterator(static_cast< const Standard_AncestorIterator& >(result))), SWIGTYPE_p_Standard_AncestorIterator, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_AncestorIterator_Value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_AncestorIterator *arg1 = (Standard_AncestorIterator *) 0 ; Handle_Standard_Type result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_AncestorIterator_Value",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_AncestorIterator, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_AncestorIterator_Value" "', argument " "1"" of type '" "Standard_AncestorIterator const *""'");  }
+   arg1 = reinterpret_cast< Standard_AncestorIterator * >(argp1); { try {
+      result = ((Standard_AncestorIterator const *)arg1)->Value(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_Type(static_cast< const Handle_Standard_Type& >(result))), SWIGTYPE_p_Handle_Standard_Type, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_AncestorIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_AncestorIterator *arg1 = (Standard_AncestorIterator *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_AncestorIterator",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_AncestorIterator, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_AncestorIterator" "', argument " "1"" of type '" "Standard_AncestorIterator *""'");  }
+   arg1 = reinterpret_cast< Standard_AncestorIterator * >(argp1); { try { delete_Standard_AncestorIterator(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_AncestorIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_AncestorIterator, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Standard_OutOfMemory__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_OutOfMemory *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_OutOfMemory",0,0)) SWIG_fail; { try {
+      result = (Standard_OutOfMemory *)new Standard_OutOfMemory(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_OutOfMemory, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_OutOfMemory__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; char *arg1 = (char *) 0 ; Standard_OutOfMemory *result = 0 ; int res1 ; char *buf1 = 0 ;
+  int alloc1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Standard_OutOfMemory",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_OutOfMemory" "', argument " "1"" of type '" "char const *""'"); }
+   arg1 = reinterpret_cast< char * >(buf1); { try {
+      result = (Standard_OutOfMemory *)new Standard_OutOfMemory((char const *)arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_OutOfMemory, SWIG_POINTER_NEW |  0 );
+  if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return resultobj; fail: if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_OutOfMemory(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Standard_OutOfMemory__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Standard_OutOfMemory__SWIG_1(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Standard_OutOfMemory'.\n  Possible C/C++ prototypes are:\n""    Standard_OutOfMemory()\n""    Standard_OutOfMemory(char const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_OutOfMemory_Raise__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_OutOfMemory *arg1 = (Standard_OutOfMemory *) 0 ; char *arg2 = (char *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_OutOfMemory_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_OutOfMemory, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_OutOfMemory_Raise" "', argument " "1"" of type '" "Standard_OutOfMemory *""'");  }
+   arg1 = reinterpret_cast< Standard_OutOfMemory * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_OutOfMemory_Raise" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { (arg1)->Raise((char const *)arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_OutOfMemory_Raise__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_OutOfMemory *arg1 = (Standard_OutOfMemory *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_OutOfMemory_Raise",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_OutOfMemory, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_OutOfMemory_Raise" "', argument " "1"" of type '" "Standard_OutOfMemory *""'");  }
+   arg1 = reinterpret_cast< Standard_OutOfMemory * >(argp1); { try { (arg1)->Raise(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_OutOfMemory_Raise__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_OutOfMemory *arg1 = (Standard_OutOfMemory *) 0 ; Standard_SStream *arg2 = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_OutOfMemory_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_OutOfMemory, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_OutOfMemory_Raise" "', argument " "1"" of type '" "Standard_OutOfMemory *""'");  }
+   arg1 = reinterpret_cast< Standard_OutOfMemory * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Standard_SStream,  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_OutOfMemory_Raise" "', argument " "2"" of type '" "Standard_SStream &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_OutOfMemory_Raise" "', argument " "2"" of type '" "Standard_SStream &""'"); }
+   arg2 = reinterpret_cast< Standard_SStream * >(argp2); { try { (arg1)->Raise(*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_OutOfMemory_Raise(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_OutOfMemory, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_Standard_OutOfMemory_Raise__SWIG_1(self, args);}  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_OutOfMemory, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_SStream, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Standard_OutOfMemory_Raise__SWIG_2(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_OutOfMemory, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Standard_OutOfMemory_Raise__SWIG_0(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Standard_OutOfMemory_Raise'.\n  Possible C/C++ prototypes are:\n""    Raise(Standard_OutOfMemory *,char const *)\n""    Raise(Standard_OutOfMemory *)\n""    Raise(Standard_OutOfMemory *,Standard_SStream &)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_OutOfMemory_NewInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_OutOfMemory *arg1 = (Standard_OutOfMemory *) 0 ; char *arg2 = (char *) 0 ;
+  Handle_Standard_OutOfMemory result; void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ;
+  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_OutOfMemory_NewInstance",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_OutOfMemory, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_OutOfMemory_NewInstance" "', argument " "1"" of type '" "Standard_OutOfMemory *""'");  }
+   arg1 = reinterpret_cast< Standard_OutOfMemory * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_OutOfMemory_NewInstance" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { result = (arg1)->NewInstance((char const *)arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_OutOfMemory(static_cast< const Handle_Standard_OutOfMemory& >(result))), SWIGTYPE_p_Handle_Standard_OutOfMemory, SWIG_POINTER_OWN |  0 );
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_OutOfMemory_DynamicType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_OutOfMemory *arg1 = (Standard_OutOfMemory *) 0 ; Handle_Standard_Type *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_OutOfMemory_DynamicType",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_OutOfMemory, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_OutOfMemory_DynamicType" "', argument " "1"" of type '" "Standard_OutOfMemory const *""'");  }
+   arg1 = reinterpret_cast< Standard_OutOfMemory * >(argp1); { try { {
+        Handle_Standard_Type const &_result_ref = ((Standard_OutOfMemory const *)arg1)->DynamicType();
+        result = (Handle_Standard_Type *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Type, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_OutOfMemory_GetHandle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_OutOfMemory *arg1 = (Standard_OutOfMemory *) 0 ; Handle_Standard_OutOfMemory result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_OutOfMemory_GetHandle",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_OutOfMemory, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_OutOfMemory_GetHandle" "', argument " "1"" of type '" "Standard_OutOfMemory *""'");  }
+   arg1 = reinterpret_cast< Standard_OutOfMemory * >(argp1); { try { result = Standard_OutOfMemory_GetHandle(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_OutOfMemory(static_cast< const Handle_Standard_OutOfMemory& >(result))), SWIGTYPE_p_Handle_Standard_OutOfMemory, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_OutOfMemory___hash__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_OutOfMemory *arg1 = (Standard_OutOfMemory *) 0 ; Standard_Integer result; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_OutOfMemory___hash__",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_OutOfMemory, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_OutOfMemory___hash__" "', argument " "1"" of type '" "Standard_OutOfMemory *""'");  }
+   arg1 = reinterpret_cast< Standard_OutOfMemory * >(argp1); { try {
+      result = (Standard_Integer)Standard_OutOfMemory___hash__(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_OutOfMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_OutOfMemory *arg1 = (Standard_OutOfMemory *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_OutOfMemory",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_OutOfMemory, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_OutOfMemory" "', argument " "1"" of type '" "Standard_OutOfMemory *""'");  }
+   arg1 = reinterpret_cast< Standard_OutOfMemory * >(argp1); { try { delete_Standard_OutOfMemory(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_OutOfMemory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_OutOfMemory, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Standard_MultiplyDefined__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_MultiplyDefined *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_MultiplyDefined",0,0)) SWIG_fail; { try {
+      result = (Standard_MultiplyDefined *)new Standard_MultiplyDefined(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_MultiplyDefined, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_MultiplyDefined__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; char *arg1 = (char *) 0 ; Standard_MultiplyDefined *result = 0 ; int res1 ; char *buf1 = 0 ;
+  int alloc1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_MultiplyDefined",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_MultiplyDefined" "', argument " "1"" of type '" "char const *""'"); }
+   arg1 = reinterpret_cast< char * >(buf1); { try {
+      result = (Standard_MultiplyDefined *)new Standard_MultiplyDefined((char const *)arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_MultiplyDefined, SWIG_POINTER_NEW |  0 );
+  if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return resultobj; fail: if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_MultiplyDefined(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Standard_MultiplyDefined__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Standard_MultiplyDefined__SWIG_1(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Standard_MultiplyDefined'.\n  Possible C/C++ prototypes are:\n""    Standard_MultiplyDefined()\n""    Standard_MultiplyDefined(char const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_MultiplyDefined_Raise__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_MultiplyDefined *arg1 = (Standard_MultiplyDefined *) 0 ; char *arg2 = (char *) 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_MultiplyDefined_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_MultiplyDefined, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_MultiplyDefined_Raise" "', argument " "1"" of type '" "Standard_MultiplyDefined *""'");  }
+   arg1 = reinterpret_cast< Standard_MultiplyDefined * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_MultiplyDefined_Raise" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { (arg1)->Raise((char const *)arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_MultiplyDefined_Raise__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_MultiplyDefined *arg1 = (Standard_MultiplyDefined *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_MultiplyDefined_Raise",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_MultiplyDefined, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_MultiplyDefined_Raise" "', argument " "1"" of type '" "Standard_MultiplyDefined *""'");  }
+   arg1 = reinterpret_cast< Standard_MultiplyDefined * >(argp1); { try { (arg1)->Raise(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_MultiplyDefined_Raise__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_MultiplyDefined *arg1 = (Standard_MultiplyDefined *) 0 ; Standard_SStream *arg2 = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_MultiplyDefined_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_MultiplyDefined, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_MultiplyDefined_Raise" "', argument " "1"" of type '" "Standard_MultiplyDefined *""'");  }
+   arg1 = reinterpret_cast< Standard_MultiplyDefined * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Standard_SStream,  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_MultiplyDefined_Raise" "', argument " "2"" of type '" "Standard_SStream &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_MultiplyDefined_Raise" "', argument " "2"" of type '" "Standard_SStream &""'"); }
+   arg2 = reinterpret_cast< Standard_SStream * >(argp2); { try { (arg1)->Raise(*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_MultiplyDefined_Raise(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_MultiplyDefined, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_Standard_MultiplyDefined_Raise__SWIG_1(self, args);}  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_MultiplyDefined, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_SStream, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Standard_MultiplyDefined_Raise__SWIG_2(self, args);}  }  }  if (argc == 2) { int _v;
+    void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_MultiplyDefined, 0);
+    _v = SWIG_CheckState(res); if (_v) { int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Standard_MultiplyDefined_Raise__SWIG_0(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Standard_MultiplyDefined_Raise'.\n  Possible C/C++ prototypes are:\n""    Raise(Standard_MultiplyDefined *,char const *)\n""    Raise(Standard_MultiplyDefined *)\n""    Raise(Standard_MultiplyDefined *,Standard_SStream &)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_MultiplyDefined_NewInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_MultiplyDefined *arg1 = (Standard_MultiplyDefined *) 0 ; char *arg2 = (char *) 0 ;
+  Handle_Standard_MultiplyDefined result; void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ;
+  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_MultiplyDefined_NewInstance",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_MultiplyDefined, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_MultiplyDefined_NewInstance" "', argument " "1"" of type '" "Standard_MultiplyDefined *""'");  }
+   arg1 = reinterpret_cast< Standard_MultiplyDefined * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_MultiplyDefined_NewInstance" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { result = (arg1)->NewInstance((char const *)arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_MultiplyDefined(static_cast< const Handle_Standard_MultiplyDefined& >(result))), SWIGTYPE_p_Handle_Standard_MultiplyDefined, SWIG_POINTER_OWN |  0 );
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_MultiplyDefined_DynamicType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_MultiplyDefined *arg1 = (Standard_MultiplyDefined *) 0 ; Handle_Standard_Type *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_MultiplyDefined_DynamicType",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_MultiplyDefined, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_MultiplyDefined_DynamicType" "', argument " "1"" of type '" "Standard_MultiplyDefined const *""'");  }
+   arg1 = reinterpret_cast< Standard_MultiplyDefined * >(argp1); { try { {
+        Handle_Standard_Type const &_result_ref = ((Standard_MultiplyDefined const *)arg1)->DynamicType();
+        result = (Handle_Standard_Type *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Type, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_MultiplyDefined_GetHandle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_MultiplyDefined *arg1 = (Standard_MultiplyDefined *) 0 ;
+  Handle_Standard_MultiplyDefined result; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_MultiplyDefined_GetHandle",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_MultiplyDefined, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_MultiplyDefined_GetHandle" "', argument " "1"" of type '" "Standard_MultiplyDefined *""'");  }
+   arg1 = reinterpret_cast< Standard_MultiplyDefined * >(argp1); { try { result = Standard_MultiplyDefined_GetHandle(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_MultiplyDefined(static_cast< const Handle_Standard_MultiplyDefined& >(result))), SWIGTYPE_p_Handle_Standard_MultiplyDefined, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_MultiplyDefined___hash__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_MultiplyDefined *arg1 = (Standard_MultiplyDefined *) 0 ; Standard_Integer result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_MultiplyDefined___hash__",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_MultiplyDefined, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_MultiplyDefined___hash__" "', argument " "1"" of type '" "Standard_MultiplyDefined *""'");  }
+   arg1 = reinterpret_cast< Standard_MultiplyDefined * >(argp1); { try {
+      result = (Standard_Integer)Standard_MultiplyDefined___hash__(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_MultiplyDefined(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_MultiplyDefined *arg1 = (Standard_MultiplyDefined *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_MultiplyDefined",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_MultiplyDefined, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_MultiplyDefined" "', argument " "1"" of type '" "Standard_MultiplyDefined *""'");  }
+   arg1 = reinterpret_cast< Standard_MultiplyDefined * >(argp1); { try { delete_Standard_MultiplyDefined(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_MultiplyDefined_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_MultiplyDefined, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Standard_LicenseNotFound__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_LicenseNotFound *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_LicenseNotFound",0,0)) SWIG_fail; { try {
+      result = (Standard_LicenseNotFound *)new Standard_LicenseNotFound(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_LicenseNotFound, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_LicenseNotFound__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; char *arg1 = (char *) 0 ; Standard_LicenseNotFound *result = 0 ; int res1 ; char *buf1 = 0 ;
+  int alloc1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_LicenseNotFound",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_LicenseNotFound" "', argument " "1"" of type '" "char const *""'"); }
+   arg1 = reinterpret_cast< char * >(buf1); { try {
+      result = (Standard_LicenseNotFound *)new Standard_LicenseNotFound((char const *)arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_LicenseNotFound, SWIG_POINTER_NEW |  0 );
+  if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return resultobj; fail: if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_LicenseNotFound(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Standard_LicenseNotFound__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Standard_LicenseNotFound__SWIG_1(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Standard_LicenseNotFound'.\n  Possible C/C++ prototypes are:\n""    Standard_LicenseNotFound()\n""    Standard_LicenseNotFound(char const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_LicenseNotFound_Raise__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_LicenseNotFound *arg1 = (Standard_LicenseNotFound *) 0 ; char *arg2 = (char *) 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_LicenseNotFound_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_LicenseNotFound, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_LicenseNotFound_Raise" "', argument " "1"" of type '" "Standard_LicenseNotFound *""'");  }
+   arg1 = reinterpret_cast< Standard_LicenseNotFound * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_LicenseNotFound_Raise" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { (arg1)->Raise((char const *)arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_LicenseNotFound_Raise__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_LicenseNotFound *arg1 = (Standard_LicenseNotFound *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_LicenseNotFound_Raise",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_LicenseNotFound, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_LicenseNotFound_Raise" "', argument " "1"" of type '" "Standard_LicenseNotFound *""'");  }
+   arg1 = reinterpret_cast< Standard_LicenseNotFound * >(argp1); { try { (arg1)->Raise(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_LicenseNotFound_Raise__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_LicenseNotFound *arg1 = (Standard_LicenseNotFound *) 0 ; Standard_SStream *arg2 = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_LicenseNotFound_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_LicenseNotFound, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_LicenseNotFound_Raise" "', argument " "1"" of type '" "Standard_LicenseNotFound *""'");  }
+   arg1 = reinterpret_cast< Standard_LicenseNotFound * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Standard_SStream,  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_LicenseNotFound_Raise" "', argument " "2"" of type '" "Standard_SStream &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_LicenseNotFound_Raise" "', argument " "2"" of type '" "Standard_SStream &""'"); }
+   arg2 = reinterpret_cast< Standard_SStream * >(argp2); { try { (arg1)->Raise(*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_LicenseNotFound_Raise(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_LicenseNotFound, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_Standard_LicenseNotFound_Raise__SWIG_1(self, args);}  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_LicenseNotFound, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_SStream, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Standard_LicenseNotFound_Raise__SWIG_2(self, args);}  }  }  if (argc == 2) { int _v;
+    void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_LicenseNotFound, 0);
+    _v = SWIG_CheckState(res); if (_v) { int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Standard_LicenseNotFound_Raise__SWIG_0(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Standard_LicenseNotFound_Raise'.\n  Possible C/C++ prototypes are:\n""    Raise(Standard_LicenseNotFound *,char const *)\n""    Raise(Standard_LicenseNotFound *)\n""    Raise(Standard_LicenseNotFound *,Standard_SStream &)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_LicenseNotFound_NewInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_LicenseNotFound *arg1 = (Standard_LicenseNotFound *) 0 ; char *arg2 = (char *) 0 ;
+  Handle_Standard_LicenseNotFound result; void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ;
+  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_LicenseNotFound_NewInstance",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_LicenseNotFound, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_LicenseNotFound_NewInstance" "', argument " "1"" of type '" "Standard_LicenseNotFound *""'");  }
+   arg1 = reinterpret_cast< Standard_LicenseNotFound * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_LicenseNotFound_NewInstance" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { result = (arg1)->NewInstance((char const *)arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_LicenseNotFound(static_cast< const Handle_Standard_LicenseNotFound& >(result))), SWIGTYPE_p_Handle_Standard_LicenseNotFound, SWIG_POINTER_OWN |  0 );
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_LicenseNotFound_DynamicType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_LicenseNotFound *arg1 = (Standard_LicenseNotFound *) 0 ; Handle_Standard_Type *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_LicenseNotFound_DynamicType",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_LicenseNotFound, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_LicenseNotFound_DynamicType" "', argument " "1"" of type '" "Standard_LicenseNotFound const *""'");  }
+   arg1 = reinterpret_cast< Standard_LicenseNotFound * >(argp1); { try { {
+        Handle_Standard_Type const &_result_ref = ((Standard_LicenseNotFound const *)arg1)->DynamicType();
+        result = (Handle_Standard_Type *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Type, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_LicenseNotFound_GetHandle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_LicenseNotFound *arg1 = (Standard_LicenseNotFound *) 0 ;
+  Handle_Standard_LicenseNotFound result; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_LicenseNotFound_GetHandle",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_LicenseNotFound, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_LicenseNotFound_GetHandle" "', argument " "1"" of type '" "Standard_LicenseNotFound *""'");  }
+   arg1 = reinterpret_cast< Standard_LicenseNotFound * >(argp1); { try { result = Standard_LicenseNotFound_GetHandle(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_LicenseNotFound(static_cast< const Handle_Standard_LicenseNotFound& >(result))), SWIGTYPE_p_Handle_Standard_LicenseNotFound, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_LicenseNotFound___hash__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_LicenseNotFound *arg1 = (Standard_LicenseNotFound *) 0 ; Standard_Integer result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_LicenseNotFound___hash__",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_LicenseNotFound, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_LicenseNotFound___hash__" "', argument " "1"" of type '" "Standard_LicenseNotFound *""'");  }
+   arg1 = reinterpret_cast< Standard_LicenseNotFound * >(argp1); { try {
+      result = (Standard_Integer)Standard_LicenseNotFound___hash__(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_LicenseNotFound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_LicenseNotFound *arg1 = (Standard_LicenseNotFound *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_LicenseNotFound",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_LicenseNotFound, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_LicenseNotFound" "', argument " "1"" of type '" "Standard_LicenseNotFound *""'");  }
+   arg1 = reinterpret_cast< Standard_LicenseNotFound * >(argp1); { try { delete_Standard_LicenseNotFound(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_LicenseNotFound_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_LicenseNotFound, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Standard(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard *result = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Standard",0,0)) SWIG_fail; { try {
+      result = (Standard *)new Standard(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Allocate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard *arg1 = (Standard *) 0 ; Standard_Size arg2 ; Standard_Address result; void *argp1 = 0 ; int res1 = 0 ; size_t val2 ;
+  int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Allocate",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Allocate" "', argument " "1"" of type '" "Standard *""'");  }
+   arg1 = reinterpret_cast< Standard * >(argp1); ecode2 = SWIG_AsVal_size_t(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Standard_Allocate" "', argument " "2"" of type '" "Standard_Size""'"); }
+    arg2 = static_cast< Standard_Size >(val2); { try { result = (Standard_Address)(arg1)->Allocate(arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 ); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Free(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard *arg1 = (Standard *) 0 ; Standard_Address *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
+  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Free",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Free" "', argument " "1"" of type '" "Standard *""'");  } 
+  arg1 = reinterpret_cast< Standard * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_p_void,  0 );
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_Free" "', argument " "2"" of type '" "Standard_Address &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_Free" "', argument " "2"" of type '" "Standard_Address &""'"); }
+   arg2 = reinterpret_cast< Standard_Address * >(argp2); { try { (arg1)->Free(*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Reallocate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard *arg1 = (Standard *) 0 ; Standard_Address *arg2 = 0 ; Standard_Size arg3 ; Standard_Address result; void *argp1 = 0 ;
+  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; size_t val3 ; int ecode3 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  PyObject * obj2 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_Reallocate",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Reallocate" "', argument " "1"" of type '" "Standard *""'");  }
+   arg1 = reinterpret_cast< Standard * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_p_void,  0 );
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_Reallocate" "', argument " "2"" of type '" "Standard_Address &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_Reallocate" "', argument " "2"" of type '" "Standard_Address &""'"); }
+   arg2 = reinterpret_cast< Standard_Address * >(argp2); ecode3 = SWIG_AsVal_size_t(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Standard_Reallocate" "', argument " "3"" of type '" "Standard_Size""'"); }
+    arg3 = static_cast< Standard_Size >(val3); { try { result = (Standard_Address)(arg1)->Reallocate(*arg2,arg3); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 ); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Purge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard *arg1 = (Standard *) 0 ; Standard_Integer result; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Purge",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Purge" "', argument " "1"" of type '" "Standard *""'");  } 
+  arg1 = reinterpret_cast< Standard * >(argp1); { try { result = (Standard_Integer)(arg1)->Purge(); }   catch(Standard_Failure)
+    { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_IsReentrant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard *arg1 = (Standard *) 0 ; Standard_Boolean result; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_IsReentrant",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_IsReentrant" "', argument " "1"" of type '" "Standard *""'");  }
+   arg1 = reinterpret_cast< Standard * >(argp1); { try { result = (Standard_Boolean)(arg1)->IsReentrant(); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_SetReentrant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard *arg1 = (Standard *) 0 ; Standard_Boolean arg2 ; void *argp1 = 0 ; int res1 = 0 ; unsigned int val2 ;
+  int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_SetReentrant",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_SetReentrant" "', argument " "1"" of type '" "Standard *""'");  }
+   arg1 = reinterpret_cast< Standard * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Standard_SetReentrant" "', argument " "2"" of type '" "Standard_Boolean""'"); }
+    arg2 = static_cast< Standard_Boolean >(val2); { try { (arg1)->SetReentrant(arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard *arg1 = (Standard *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Standard",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard" "', argument " "1"" of type '" "Standard *""'");  }
+   arg1 = reinterpret_cast< Standard * >(argp1); { try { delete_Standard(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Standard_Underflow__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Underflow *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_Underflow",0,0)) SWIG_fail; { try {
+      result = (Standard_Underflow *)new Standard_Underflow(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_Underflow, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_Underflow__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; char *arg1 = (char *) 0 ; Standard_Underflow *result = 0 ; int res1 ; char *buf1 = 0 ;
+  int alloc1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Standard_Underflow",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_Underflow" "', argument " "1"" of type '" "char const *""'"); }
+   arg1 = reinterpret_cast< char * >(buf1); { try { result = (Standard_Underflow *)new Standard_Underflow((char const *)arg1); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_Underflow, SWIG_POINTER_NEW |  0 );
+  if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return resultobj; fail: if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_Underflow(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Standard_Underflow__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Standard_Underflow__SWIG_1(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Standard_Underflow'.\n  Possible C/C++ prototypes are:\n""    Standard_Underflow()\n""    Standard_Underflow(char const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Underflow_Raise__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Underflow *arg1 = (Standard_Underflow *) 0 ; char *arg2 = (char *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Underflow_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Underflow, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Underflow_Raise" "', argument " "1"" of type '" "Standard_Underflow *""'");  }
+   arg1 = reinterpret_cast< Standard_Underflow * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_Underflow_Raise" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { (arg1)->Raise((char const *)arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Underflow_Raise__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Underflow *arg1 = (Standard_Underflow *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_Underflow_Raise",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Underflow, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Underflow_Raise" "', argument " "1"" of type '" "Standard_Underflow *""'");  }
+   arg1 = reinterpret_cast< Standard_Underflow * >(argp1); { try { (arg1)->Raise(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Underflow_Raise__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Underflow *arg1 = (Standard_Underflow *) 0 ; Standard_SStream *arg2 = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Underflow_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Underflow, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Underflow_Raise" "', argument " "1"" of type '" "Standard_Underflow *""'");  }
+   arg1 = reinterpret_cast< Standard_Underflow * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Standard_SStream,  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_Underflow_Raise" "', argument " "2"" of type '" "Standard_SStream &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_Underflow_Raise" "', argument " "2"" of type '" "Standard_SStream &""'"); }
+   arg2 = reinterpret_cast< Standard_SStream * >(argp2); { try { (arg1)->Raise(*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Underflow_Raise(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_Underflow, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_Standard_Underflow_Raise__SWIG_1(self, args);}  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_Underflow, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_SStream, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Standard_Underflow_Raise__SWIG_2(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_Underflow, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Standard_Underflow_Raise__SWIG_0(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Standard_Underflow_Raise'.\n  Possible C/C++ prototypes are:\n""    Raise(Standard_Underflow *,char const *)\n""    Raise(Standard_Underflow *)\n""    Raise(Standard_Underflow *,Standard_SStream &)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Underflow_NewInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Underflow *arg1 = (Standard_Underflow *) 0 ; char *arg2 = (char *) 0 ;
+  Handle_Standard_Underflow result; void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ;
+  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Underflow_NewInstance",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Underflow, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Underflow_NewInstance" "', argument " "1"" of type '" "Standard_Underflow *""'");  }
+   arg1 = reinterpret_cast< Standard_Underflow * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_Underflow_NewInstance" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { result = (arg1)->NewInstance((char const *)arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_Underflow(static_cast< const Handle_Standard_Underflow& >(result))), SWIGTYPE_p_Handle_Standard_Underflow, SWIG_POINTER_OWN |  0 );
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Underflow_DynamicType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Underflow *arg1 = (Standard_Underflow *) 0 ; Handle_Standard_Type *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Underflow_DynamicType",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Underflow, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Underflow_DynamicType" "', argument " "1"" of type '" "Standard_Underflow const *""'");  }
+   arg1 = reinterpret_cast< Standard_Underflow * >(argp1); { try { {
+        Handle_Standard_Type const &_result_ref = ((Standard_Underflow const *)arg1)->DynamicType();
+        result = (Handle_Standard_Type *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Type, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Underflow_GetHandle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Underflow *arg1 = (Standard_Underflow *) 0 ; Handle_Standard_Underflow result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Underflow_GetHandle",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Underflow, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Underflow_GetHandle" "', argument " "1"" of type '" "Standard_Underflow *""'");  }
+   arg1 = reinterpret_cast< Standard_Underflow * >(argp1); { try { result = Standard_Underflow_GetHandle(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_Underflow(static_cast< const Handle_Standard_Underflow& >(result))), SWIGTYPE_p_Handle_Standard_Underflow, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Underflow___hash__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Underflow *arg1 = (Standard_Underflow *) 0 ; Standard_Integer result; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_Underflow___hash__",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Underflow, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Underflow___hash__" "', argument " "1"" of type '" "Standard_Underflow *""'");  }
+   arg1 = reinterpret_cast< Standard_Underflow * >(argp1); { try {
+      result = (Standard_Integer)Standard_Underflow___hash__(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_Underflow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Underflow *arg1 = (Standard_Underflow *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_Underflow",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Underflow, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_Underflow" "', argument " "1"" of type '" "Standard_Underflow *""'");  }
+   arg1 = reinterpret_cast< Standard_Underflow * >(argp1); { try { delete_Standard_Underflow(arg1); }   catch(Standard_Failure)
+    { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_Underflow_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_Underflow, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Standard_Overflow__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Overflow *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_Overflow",0,0)) SWIG_fail; { try {
+      result = (Standard_Overflow *)new Standard_Overflow(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_Overflow, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_Overflow__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; char *arg1 = (char *) 0 ; Standard_Overflow *result = 0 ; int res1 ; char *buf1 = 0 ;
+  int alloc1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Standard_Overflow",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_Overflow" "', argument " "1"" of type '" "char const *""'"); }
+   arg1 = reinterpret_cast< char * >(buf1); { try { result = (Standard_Overflow *)new Standard_Overflow((char const *)arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_Overflow, SWIG_POINTER_NEW |  0 );
+  if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return resultobj; fail: if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_Overflow(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Standard_Overflow__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Standard_Overflow__SWIG_1(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Standard_Overflow'.\n  Possible C/C++ prototypes are:\n""    Standard_Overflow()\n""    Standard_Overflow(char const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Overflow_Raise__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Overflow *arg1 = (Standard_Overflow *) 0 ; char *arg2 = (char *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Overflow_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Overflow, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Overflow_Raise" "', argument " "1"" of type '" "Standard_Overflow *""'");  }
+   arg1 = reinterpret_cast< Standard_Overflow * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_Overflow_Raise" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { (arg1)->Raise((char const *)arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Overflow_Raise__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Overflow *arg1 = (Standard_Overflow *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_Overflow_Raise",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Overflow, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Overflow_Raise" "', argument " "1"" of type '" "Standard_Overflow *""'");  }
+   arg1 = reinterpret_cast< Standard_Overflow * >(argp1); { try { (arg1)->Raise(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Overflow_Raise__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Overflow *arg1 = (Standard_Overflow *) 0 ; Standard_SStream *arg2 = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Overflow_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Overflow, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Overflow_Raise" "', argument " "1"" of type '" "Standard_Overflow *""'");  }
+   arg1 = reinterpret_cast< Standard_Overflow * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Standard_SStream,  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_Overflow_Raise" "', argument " "2"" of type '" "Standard_SStream &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_Overflow_Raise" "', argument " "2"" of type '" "Standard_SStream &""'"); }
+   arg2 = reinterpret_cast< Standard_SStream * >(argp2); { try { (arg1)->Raise(*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Overflow_Raise(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_Overflow, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_Standard_Overflow_Raise__SWIG_1(self, args);}  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_Overflow, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_SStream, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Standard_Overflow_Raise__SWIG_2(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_Overflow, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Standard_Overflow_Raise__SWIG_0(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Standard_Overflow_Raise'.\n  Possible C/C++ prototypes are:\n""    Raise(Standard_Overflow *,char const *)\n""    Raise(Standard_Overflow *)\n""    Raise(Standard_Overflow *,Standard_SStream &)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Overflow_NewInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Overflow *arg1 = (Standard_Overflow *) 0 ; char *arg2 = (char *) 0 ;
+  Handle_Standard_Overflow result; void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ;
+  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Overflow_NewInstance",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Overflow, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Overflow_NewInstance" "', argument " "1"" of type '" "Standard_Overflow *""'");  }
+   arg1 = reinterpret_cast< Standard_Overflow * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_Overflow_NewInstance" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { result = (arg1)->NewInstance((char const *)arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_Overflow(static_cast< const Handle_Standard_Overflow& >(result))), SWIGTYPE_p_Handle_Standard_Overflow, SWIG_POINTER_OWN |  0 );
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Overflow_DynamicType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Overflow *arg1 = (Standard_Overflow *) 0 ; Handle_Standard_Type *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Overflow_DynamicType",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Overflow, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Overflow_DynamicType" "', argument " "1"" of type '" "Standard_Overflow const *""'");  }
+   arg1 = reinterpret_cast< Standard_Overflow * >(argp1); { try { {
+        Handle_Standard_Type const &_result_ref = ((Standard_Overflow const *)arg1)->DynamicType();
+        result = (Handle_Standard_Type *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Type, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Overflow_GetHandle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Overflow *arg1 = (Standard_Overflow *) 0 ; Handle_Standard_Overflow result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Overflow_GetHandle",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Overflow, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Overflow_GetHandle" "', argument " "1"" of type '" "Standard_Overflow *""'");  }
+   arg1 = reinterpret_cast< Standard_Overflow * >(argp1); { try { result = Standard_Overflow_GetHandle(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_Overflow(static_cast< const Handle_Standard_Overflow& >(result))), SWIGTYPE_p_Handle_Standard_Overflow, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Overflow___hash__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Overflow *arg1 = (Standard_Overflow *) 0 ; Standard_Integer result; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_Overflow___hash__",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Overflow, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Overflow___hash__" "', argument " "1"" of type '" "Standard_Overflow *""'");  }
+   arg1 = reinterpret_cast< Standard_Overflow * >(argp1); { try { result = (Standard_Integer)Standard_Overflow___hash__(arg1); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_Overflow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Overflow *arg1 = (Standard_Overflow *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_Overflow",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Overflow, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_Overflow" "', argument " "1"" of type '" "Standard_Overflow *""'");  }
+   arg1 = reinterpret_cast< Standard_Overflow * >(argp1); { try { delete_Standard_Overflow(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_Overflow_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_Overflow, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Standard_TooManyUsers__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_TooManyUsers *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_TooManyUsers",0,0)) SWIG_fail; { try {
+      result = (Standard_TooManyUsers *)new Standard_TooManyUsers(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_TooManyUsers, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_TooManyUsers__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; char *arg1 = (char *) 0 ; Standard_TooManyUsers *result = 0 ; int res1 ; char *buf1 = 0 ;
+  int alloc1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Standard_TooManyUsers",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_TooManyUsers" "', argument " "1"" of type '" "char const *""'"); }
+   arg1 = reinterpret_cast< char * >(buf1); { try {
+      result = (Standard_TooManyUsers *)new Standard_TooManyUsers((char const *)arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_TooManyUsers, SWIG_POINTER_NEW |  0 );
+  if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return resultobj; fail: if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_TooManyUsers(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Standard_TooManyUsers__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Standard_TooManyUsers__SWIG_1(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Standard_TooManyUsers'.\n  Possible C/C++ prototypes are:\n""    Standard_TooManyUsers()\n""    Standard_TooManyUsers(char const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_TooManyUsers_Raise__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_TooManyUsers *arg1 = (Standard_TooManyUsers *) 0 ; char *arg2 = (char *) 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_TooManyUsers_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_TooManyUsers, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_TooManyUsers_Raise" "', argument " "1"" of type '" "Standard_TooManyUsers *""'");  }
+   arg1 = reinterpret_cast< Standard_TooManyUsers * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_TooManyUsers_Raise" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { (arg1)->Raise((char const *)arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_TooManyUsers_Raise__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_TooManyUsers *arg1 = (Standard_TooManyUsers *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_TooManyUsers_Raise",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_TooManyUsers, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_TooManyUsers_Raise" "', argument " "1"" of type '" "Standard_TooManyUsers *""'");  }
+   arg1 = reinterpret_cast< Standard_TooManyUsers * >(argp1); { try { (arg1)->Raise(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_TooManyUsers_Raise__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_TooManyUsers *arg1 = (Standard_TooManyUsers *) 0 ; Standard_SStream *arg2 = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_TooManyUsers_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_TooManyUsers, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_TooManyUsers_Raise" "', argument " "1"" of type '" "Standard_TooManyUsers *""'");  }
+   arg1 = reinterpret_cast< Standard_TooManyUsers * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Standard_SStream,  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_TooManyUsers_Raise" "', argument " "2"" of type '" "Standard_SStream &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_TooManyUsers_Raise" "', argument " "2"" of type '" "Standard_SStream &""'"); }
+   arg2 = reinterpret_cast< Standard_SStream * >(argp2); { try { (arg1)->Raise(*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_TooManyUsers_Raise(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_TooManyUsers, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_Standard_TooManyUsers_Raise__SWIG_1(self, args);}  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_TooManyUsers, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_SStream, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Standard_TooManyUsers_Raise__SWIG_2(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_TooManyUsers, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Standard_TooManyUsers_Raise__SWIG_0(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Standard_TooManyUsers_Raise'.\n  Possible C/C++ prototypes are:\n""    Raise(Standard_TooManyUsers *,char const *)\n""    Raise(Standard_TooManyUsers *)\n""    Raise(Standard_TooManyUsers *,Standard_SStream &)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_TooManyUsers_NewInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_TooManyUsers *arg1 = (Standard_TooManyUsers *) 0 ; char *arg2 = (char *) 0 ;
+  Handle_Standard_TooManyUsers result; void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ;
+  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_TooManyUsers_NewInstance",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_TooManyUsers, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_TooManyUsers_NewInstance" "', argument " "1"" of type '" "Standard_TooManyUsers *""'");  }
+   arg1 = reinterpret_cast< Standard_TooManyUsers * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_TooManyUsers_NewInstance" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { result = (arg1)->NewInstance((char const *)arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_TooManyUsers(static_cast< const Handle_Standard_TooManyUsers& >(result))), SWIGTYPE_p_Handle_Standard_TooManyUsers, SWIG_POINTER_OWN |  0 );
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_TooManyUsers_DynamicType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_TooManyUsers *arg1 = (Standard_TooManyUsers *) 0 ; Handle_Standard_Type *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_TooManyUsers_DynamicType",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_TooManyUsers, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_TooManyUsers_DynamicType" "', argument " "1"" of type '" "Standard_TooManyUsers const *""'");  }
+   arg1 = reinterpret_cast< Standard_TooManyUsers * >(argp1); { try { {
+        Handle_Standard_Type const &_result_ref = ((Standard_TooManyUsers const *)arg1)->DynamicType();
+        result = (Handle_Standard_Type *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Type, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_TooManyUsers_GetHandle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_TooManyUsers *arg1 = (Standard_TooManyUsers *) 0 ; Handle_Standard_TooManyUsers result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_TooManyUsers_GetHandle",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_TooManyUsers, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_TooManyUsers_GetHandle" "', argument " "1"" of type '" "Standard_TooManyUsers *""'");  }
+   arg1 = reinterpret_cast< Standard_TooManyUsers * >(argp1); { try { result = Standard_TooManyUsers_GetHandle(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_TooManyUsers(static_cast< const Handle_Standard_TooManyUsers& >(result))), SWIGTYPE_p_Handle_Standard_TooManyUsers, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_TooManyUsers___hash__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_TooManyUsers *arg1 = (Standard_TooManyUsers *) 0 ; Standard_Integer result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_TooManyUsers___hash__",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_TooManyUsers, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_TooManyUsers___hash__" "', argument " "1"" of type '" "Standard_TooManyUsers *""'");  }
+   arg1 = reinterpret_cast< Standard_TooManyUsers * >(argp1); { try {
+      result = (Standard_Integer)Standard_TooManyUsers___hash__(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_TooManyUsers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_TooManyUsers *arg1 = (Standard_TooManyUsers *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_TooManyUsers",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_TooManyUsers, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_TooManyUsers" "', argument " "1"" of type '" "Standard_TooManyUsers *""'");  }
+   arg1 = reinterpret_cast< Standard_TooManyUsers * >(argp1); { try { delete_Standard_TooManyUsers(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_TooManyUsers_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_TooManyUsers, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Standard_NullObject__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NullObject *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_NullObject",0,0)) SWIG_fail; { try {
+      result = (Standard_NullObject *)new Standard_NullObject(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_NullObject, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_NullObject__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; char *arg1 = (char *) 0 ; Standard_NullObject *result = 0 ; int res1 ; char *buf1 = 0 ;
+  int alloc1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Standard_NullObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_NullObject" "', argument " "1"" of type '" "char const *""'"); }
+   arg1 = reinterpret_cast< char * >(buf1); { try {
+      result = (Standard_NullObject *)new Standard_NullObject((char const *)arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_NullObject, SWIG_POINTER_NEW |  0 );
+  if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return resultobj; fail: if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_NullObject(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Standard_NullObject__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Standard_NullObject__SWIG_1(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Standard_NullObject'.\n  Possible C/C++ prototypes are:\n""    Standard_NullObject()\n""    Standard_NullObject(char const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NullObject_Raise__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NullObject *arg1 = (Standard_NullObject *) 0 ; char *arg2 = (char *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_NullObject_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NullObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NullObject_Raise" "', argument " "1"" of type '" "Standard_NullObject *""'");  }
+   arg1 = reinterpret_cast< Standard_NullObject * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_NullObject_Raise" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { (arg1)->Raise((char const *)arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NullObject_Raise__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NullObject *arg1 = (Standard_NullObject *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_NullObject_Raise",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NullObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NullObject_Raise" "', argument " "1"" of type '" "Standard_NullObject *""'");  }
+   arg1 = reinterpret_cast< Standard_NullObject * >(argp1); { try { (arg1)->Raise(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NullObject_Raise__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NullObject *arg1 = (Standard_NullObject *) 0 ; Standard_SStream *arg2 = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_NullObject_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NullObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NullObject_Raise" "', argument " "1"" of type '" "Standard_NullObject *""'");  }
+   arg1 = reinterpret_cast< Standard_NullObject * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Standard_SStream,  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_NullObject_Raise" "', argument " "2"" of type '" "Standard_SStream &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_NullObject_Raise" "', argument " "2"" of type '" "Standard_SStream &""'"); }
+   arg2 = reinterpret_cast< Standard_SStream * >(argp2); { try { (arg1)->Raise(*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NullObject_Raise(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_NullObject, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_Standard_NullObject_Raise__SWIG_1(self, args);}  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_NullObject, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_SStream, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Standard_NullObject_Raise__SWIG_2(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_NullObject, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Standard_NullObject_Raise__SWIG_0(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Standard_NullObject_Raise'.\n  Possible C/C++ prototypes are:\n""    Raise(Standard_NullObject *,char const *)\n""    Raise(Standard_NullObject *)\n""    Raise(Standard_NullObject *,Standard_SStream &)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NullObject_NewInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NullObject *arg1 = (Standard_NullObject *) 0 ; char *arg2 = (char *) 0 ;
+  Handle_Standard_NullObject result; void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ;
+  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_NullObject_NewInstance",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NullObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NullObject_NewInstance" "', argument " "1"" of type '" "Standard_NullObject *""'");  }
+   arg1 = reinterpret_cast< Standard_NullObject * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_NullObject_NewInstance" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { result = (arg1)->NewInstance((char const *)arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_NullObject(static_cast< const Handle_Standard_NullObject& >(result))), SWIGTYPE_p_Handle_Standard_NullObject, SWIG_POINTER_OWN |  0 );
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NullObject_DynamicType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NullObject *arg1 = (Standard_NullObject *) 0 ; Handle_Standard_Type *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_NullObject_DynamicType",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NullObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NullObject_DynamicType" "', argument " "1"" of type '" "Standard_NullObject const *""'");  }
+   arg1 = reinterpret_cast< Standard_NullObject * >(argp1); { try { {
+        Handle_Standard_Type const &_result_ref = ((Standard_NullObject const *)arg1)->DynamicType();
+        result = (Handle_Standard_Type *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Type, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NullObject_GetHandle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NullObject *arg1 = (Standard_NullObject *) 0 ; Handle_Standard_NullObject result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_NullObject_GetHandle",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NullObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NullObject_GetHandle" "', argument " "1"" of type '" "Standard_NullObject *""'");  }
+   arg1 = reinterpret_cast< Standard_NullObject * >(argp1); { try { result = Standard_NullObject_GetHandle(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_NullObject(static_cast< const Handle_Standard_NullObject& >(result))), SWIGTYPE_p_Handle_Standard_NullObject, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_NullObject___hash__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_NullObject *arg1 = (Standard_NullObject *) 0 ; Standard_Integer result; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_NullObject___hash__",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NullObject, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_NullObject___hash__" "', argument " "1"" of type '" "Standard_NullObject *""'");  }
+   arg1 = reinterpret_cast< Standard_NullObject * >(argp1); { try {
+      result = (Standard_Integer)Standard_NullObject___hash__(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_NullObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_NullObject *arg1 = (Standard_NullObject *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_NullObject",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_NullObject, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_NullObject" "', argument " "1"" of type '" "Standard_NullObject *""'");  }
+   arg1 = reinterpret_cast< Standard_NullObject * >(argp1); { try { delete_Standard_NullObject(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_NullObject_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_NullObject, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Standard_GUID__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_GUID *result = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Standard_GUID",0,0)) SWIG_fail; { try {
+      result = (Standard_GUID *)new Standard_GUID(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_GUID, SWIG_POINTER_NEW |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_GUID__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  char *arg1 = (char *) 0 ; Standard_GUID *result = 0 ; int res1 ; char *buf1 = 0 ; int alloc1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_GUID",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_GUID" "', argument " "1"" of type '" "char const *""'"); }
+   arg1 = reinterpret_cast< char * >(buf1); { try { result = (Standard_GUID *)new Standard_GUID((char const *)arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_GUID, SWIG_POINTER_NEW |  0 );
+  if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return resultobj; fail: if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_GUID__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_ExtString arg1 = (Standard_ExtString) (Standard_ExtString)0 ; Standard_GUID *result = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Standard_GUID",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_short, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_GUID" "', argument " "1"" of type '" "Standard_ExtString const""'");  }
+   arg1 = reinterpret_cast< Standard_ExtString >(argp1); { try { result = (Standard_GUID *)new Standard_GUID(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_GUID, SWIG_POINTER_NEW |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_GUID__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Integer arg1 ; Standard_ExtCharacter arg2 ; Standard_ExtCharacter arg3 ; Standard_ExtCharacter arg4 ;
+  Standard_Byte arg5 ; Standard_Byte arg6 ; Standard_Byte arg7 ; Standard_Byte arg8 ; Standard_Byte arg9 ; Standard_Byte arg10 ;
+  Standard_GUID *result = 0 ; int val1 ; int ecode1 = 0 ; short val2 ; int ecode2 = 0 ; short val3 ; int ecode3 = 0 ;
+  short val4 ; int ecode4 = 0 ; unsigned char val5 ; int ecode5 = 0 ; unsigned char val6 ; int ecode6 = 0 ; unsigned char val7 ;
+  int ecode7 = 0 ; unsigned char val8 ; int ecode8 = 0 ; unsigned char val9 ; int ecode9 = 0 ; unsigned char val10 ;
+  int ecode10 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ; PyObject * obj2 = 0 ; PyObject * obj3 = 0 ;
+  PyObject * obj4 = 0 ; PyObject * obj5 = 0 ; PyObject * obj6 = 0 ; PyObject * obj7 = 0 ; PyObject * obj8 = 0 ;
+  PyObject * obj9 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_GUID",10,10,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
+  ecode1 = SWIG_AsVal_int(obj0, &val1); if (!SWIG_IsOK(ecode1)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Standard_GUID" "', argument " "1"" of type '" "Standard_Integer""'"); }
+    arg1 = static_cast< Standard_Integer >(val1); ecode2 = SWIG_AsVal_short(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Standard_GUID" "', argument " "2"" of type '" "Standard_ExtCharacter""'"); }
+    arg2 = static_cast< Standard_ExtCharacter >(val2); ecode3 = SWIG_AsVal_short(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Standard_GUID" "', argument " "3"" of type '" "Standard_ExtCharacter""'"); }
+    arg3 = static_cast< Standard_ExtCharacter >(val3); ecode4 = SWIG_AsVal_short(obj3, &val4); if (!SWIG_IsOK(ecode4)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Standard_GUID" "', argument " "4"" of type '" "Standard_ExtCharacter""'"); }
+    arg4 = static_cast< Standard_ExtCharacter >(val4); ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
+  if (!SWIG_IsOK(ecode5)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Standard_GUID" "', argument " "5"" of type '" "Standard_Byte""'"); }
+    arg5 = static_cast< Standard_Byte >(val5); ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6); if (!SWIG_IsOK(ecode6)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_Standard_GUID" "', argument " "6"" of type '" "Standard_Byte""'"); }
+    arg6 = static_cast< Standard_Byte >(val6); ecode7 = SWIG_AsVal_unsigned_SS_char(obj6, &val7); if (!SWIG_IsOK(ecode7)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_Standard_GUID" "', argument " "7"" of type '" "Standard_Byte""'"); }
+    arg7 = static_cast< Standard_Byte >(val7); ecode8 = SWIG_AsVal_unsigned_SS_char(obj7, &val8); if (!SWIG_IsOK(ecode8)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_Standard_GUID" "', argument " "8"" of type '" "Standard_Byte""'"); }
+    arg8 = static_cast< Standard_Byte >(val8); ecode9 = SWIG_AsVal_unsigned_SS_char(obj8, &val9); if (!SWIG_IsOK(ecode9)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_Standard_GUID" "', argument " "9"" of type '" "Standard_Byte""'"); }
+    arg9 = static_cast< Standard_Byte >(val9); ecode10 = SWIG_AsVal_unsigned_SS_char(obj9, &val10); if (!SWIG_IsOK(ecode10)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "new_Standard_GUID" "', argument " "10"" of type '" "Standard_Byte""'"); }
+    arg10 = static_cast< Standard_Byte >(val10); { try {
+      result = (Standard_GUID *)new Standard_GUID(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_GUID, SWIG_POINTER_NEW |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_GUID__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_UUID *arg1 = 0 ; Standard_GUID *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_GUID",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GUID,  0  | 0); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_GUID" "', argument " "1"" of type '" "Standard_UUID const &""'");  }
+   if (!argp1) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Standard_GUID" "', argument " "1"" of type '" "Standard_UUID const &""'"); }
+   arg1 = reinterpret_cast< Standard_UUID * >(argp1); { try {
+      result = (Standard_GUID *)new Standard_GUID((Standard_UUID const &)*arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_GUID, SWIG_POINTER_NEW |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_GUID__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_GUID *arg1 = 0 ; Standard_GUID *result = 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_GUID",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Standard_GUID,  0  | 0); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_GUID" "', argument " "1"" of type '" "Standard_GUID const &""'");  }
+   if (!argp1) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Standard_GUID" "', argument " "1"" of type '" "Standard_GUID const &""'"); }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); { try {
+      result = (Standard_GUID *)new Standard_GUID((Standard_GUID const &)*arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_GUID, SWIG_POINTER_NEW |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_GUID(PyObject *self, PyObject *args) { int argc; PyObject *argv[11]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 10); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Standard_GUID__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; void *vptr = 0; int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_short, 0);
+    _v = SWIG_CheckState(res); if (_v) { return _wrap_new_Standard_GUID__SWIG_2(self, args);}  }  if (argc == 1) { int _v;
+    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GUID, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Standard_GUID__SWIG_4(self, args);}  }  if (argc == 1) { int _v;
+    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Standard_GUID, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Standard_GUID__SWIG_5(self, args);}  }  if (argc == 1) { int _v;
+    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Standard_GUID__SWIG_1(self, args);}  }  if (argc == 10) { int _v; {
+      int res = SWIG_AsVal_int(argv[0], NULL); _v = SWIG_CheckState(res); }  if (_v) { {
+        int res = SWIG_AsVal_short(argv[1], NULL); _v = SWIG_CheckState(res); }  if (_v) { {
+          int res = SWIG_AsVal_short(argv[2], NULL); _v = SWIG_CheckState(res); }  if (_v) { {
+            int res = SWIG_AsVal_short(argv[3], NULL); _v = SWIG_CheckState(res); }  if (_v) { {
+              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL); _v = SWIG_CheckState(res); }  if (_v) { {
+                int res = SWIG_AsVal_unsigned_SS_char(argv[5], NULL); _v = SWIG_CheckState(res); }  if (_v) { {
+                  int res = SWIG_AsVal_unsigned_SS_char(argv[6], NULL); _v = SWIG_CheckState(res); }  if (_v) { {
+                    int res = SWIG_AsVal_unsigned_SS_char(argv[7], NULL); _v = SWIG_CheckState(res); }  if (_v) { {
+                      int res = SWIG_AsVal_unsigned_SS_char(argv[8], NULL); _v = SWIG_CheckState(res); }  if (_v) { {
+                        int res = SWIG_AsVal_unsigned_SS_char(argv[9], NULL); _v = SWIG_CheckState(res); }  if (_v) {
+                        return _wrap_new_Standard_GUID__SWIG_3(self, args);}  }  }  }  }  }  }  }  }  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Standard_GUID'.\n  Possible C/C++ prototypes are:\n""    Standard_GUID()\n""    Standard_GUID(char const *)\n""    Standard_GUID(Standard_ExtString const)\n""    Standard_GUID(Standard_Integer const,Standard_ExtCharacter const,Standard_ExtCharacter const,Standard_ExtCharacter const,Standard_Byte const,Standard_Byte const,Standard_Byte const,Standard_Byte const,Standard_Byte const,Standard_Byte const)\n""    Standard_GUID(Standard_UUID const &)\n""    Standard_GUID(Standard_GUID const &)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID_ToUUID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_GUID *arg1 = (Standard_GUID *) 0 ; Standard_UUID result; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID_ToUUID",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID_ToUUID" "', argument " "1"" of type '" "Standard_GUID const *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); { try { result = ((Standard_GUID const *)arg1)->ToUUID(); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Standard_UUID(static_cast< const Standard_UUID& >(result))), SWIGTYPE_p_GUID, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID_ToCString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_GUID *arg1 = (Standard_GUID *) 0 ; Standard_PCharacter arg2 = (Standard_PCharacter) (Standard_PCharacter)0 ;
+  void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID_ToCString",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID_ToCString" "', argument " "1"" of type '" "Standard_GUID const *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_GUID_ToCString" "', argument " "2"" of type '" "Standard_PCharacter const""'"); }
+   arg2 = reinterpret_cast< Standard_PCharacter >(buf2); { try { ((Standard_GUID const *)arg1)->ToCString(arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail:
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID_ToExtString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_GUID *arg1 = (Standard_GUID *) 0 ; Standard_PExtCharacter arg2 = (Standard_PExtCharacter) (Standard_PExtCharacter)0 ;
+  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID_ToExtString",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID_ToExtString" "', argument " "1"" of type '" "Standard_GUID const *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_short, 0 |  0 );
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_GUID_ToExtString" "', argument " "2"" of type '" "Standard_PExtCharacter const""'");  }
+   arg2 = reinterpret_cast< Standard_PExtCharacter >(argp2); { try { ((Standard_GUID const *)arg1)->ToExtString(arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID_IsSame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_GUID *arg1 = (Standard_GUID *) 0 ; Standard_GUID *arg2 = 0 ; Standard_Boolean result; void *argp1 = 0 ;
+  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID_IsSame",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID_IsSame" "', argument " "1"" of type '" "Standard_GUID const *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Standard_GUID,  0  | 0);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_GUID_IsSame" "', argument " "2"" of type '" "Standard_GUID const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_GUID_IsSame" "', argument " "2"" of type '" "Standard_GUID const &""'"); }
+   arg2 = reinterpret_cast< Standard_GUID * >(argp2); { try {
+      result = (Standard_Boolean)((Standard_GUID const *)arg1)->IsSame((Standard_GUID const &)*arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_GUID *arg1 = (Standard_GUID *) 0 ; Standard_GUID *arg2 = 0 ; Standard_Boolean result; void *argp1 = 0 ;
+  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID___eq__",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID___eq__" "', argument " "1"" of type '" "Standard_GUID const *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Standard_GUID,  0  | 0);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_GUID___eq__" "', argument " "2"" of type '" "Standard_GUID const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_GUID___eq__" "', argument " "2"" of type '" "Standard_GUID const &""'"); }
+   arg2 = reinterpret_cast< Standard_GUID * >(argp2); { try {
+      result = (Standard_Boolean)((Standard_GUID const *)arg1)->operator ==((Standard_GUID const &)*arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID_IsNotSame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_GUID *arg1 = (Standard_GUID *) 0 ; Standard_GUID *arg2 = 0 ; Standard_Boolean result; void *argp1 = 0 ;
+  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID_IsNotSame",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID_IsNotSame" "', argument " "1"" of type '" "Standard_GUID const *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Standard_GUID,  0  | 0);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_GUID_IsNotSame" "', argument " "2"" of type '" "Standard_GUID const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_GUID_IsNotSame" "', argument " "2"" of type '" "Standard_GUID const &""'"); }
+   arg2 = reinterpret_cast< Standard_GUID * >(argp2); { try {
+      result = (Standard_Boolean)((Standard_GUID const *)arg1)->IsNotSame((Standard_GUID const &)*arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_GUID *arg1 = (Standard_GUID *) 0 ; Standard_GUID *arg2 = 0 ; Standard_Boolean result; void *argp1 = 0 ;
+  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID___ne__",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID___ne__" "', argument " "1"" of type '" "Standard_GUID const *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Standard_GUID,  0  | 0);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_GUID___ne__" "', argument " "2"" of type '" "Standard_GUID const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_GUID___ne__" "', argument " "2"" of type '" "Standard_GUID const &""'"); }
+   arg2 = reinterpret_cast< Standard_GUID * >(argp2); { try {
+      result = (Standard_Boolean)((Standard_GUID const *)arg1)->operator !=((Standard_GUID const &)*arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID_Assign__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_GUID *arg1 = (Standard_GUID *) 0 ; Standard_GUID *arg2 = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID_Assign",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID_Assign" "', argument " "1"" of type '" "Standard_GUID *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Standard_GUID,  0  | 0);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_GUID_Assign" "', argument " "2"" of type '" "Standard_GUID const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_GUID_Assign" "', argument " "2"" of type '" "Standard_GUID const &""'"); }
+   arg2 = reinterpret_cast< Standard_GUID * >(argp2); { try { (arg1)->Assign((Standard_GUID const &)*arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID_Set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_GUID *arg1 = (Standard_GUID *) 0 ; Standard_GUID *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
+  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID_Set" "', argument " "1"" of type '" "Standard_GUID *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Standard_GUID,  0  | 0);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_GUID_Set" "', argument " "2"" of type '" "Standard_GUID const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_GUID_Set" "', argument " "2"" of type '" "Standard_GUID const &""'"); }
+   arg2 = reinterpret_cast< Standard_GUID * >(argp2); { try { (arg1)->operator =((Standard_GUID const &)*arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID_Assign__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_GUID *arg1 = (Standard_GUID *) 0 ; Standard_UUID *arg2 = 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID_Assign",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID_Assign" "', argument " "1"" of type '" "Standard_GUID *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GUID,  0  | 0);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_GUID_Assign" "', argument " "2"" of type '" "Standard_UUID const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_GUID_Assign" "', argument " "2"" of type '" "Standard_UUID const &""'"); }
+   arg2 = reinterpret_cast< Standard_UUID * >(argp2); { try { (arg1)->Assign((Standard_UUID const &)*arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID_Assign(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_GUID, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Standard_GUID, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Standard_GUID_Assign__SWIG_0(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_GUID, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GUID, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Standard_GUID_Assign__SWIG_1(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Standard_GUID_Assign'.\n  Possible C/C++ prototypes are:\n""    Assign(Standard_GUID *,Standard_GUID const &)\n""    Assign(Standard_GUID *,Standard_UUID const &)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID_Set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_GUID *arg1 = (Standard_GUID *) 0 ; Standard_UUID *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
+  int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID_Set",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID_Set" "', argument " "1"" of type '" "Standard_GUID *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GUID,  0  | 0);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_GUID_Set" "', argument " "2"" of type '" "Standard_UUID const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_GUID_Set" "', argument " "2"" of type '" "Standard_UUID const &""'"); }
+   arg2 = reinterpret_cast< Standard_UUID * >(argp2); { try { (arg1)->operator =((Standard_UUID const &)*arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID_Set(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_GUID, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Standard_GUID, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Standard_GUID_Set__SWIG_0(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_GUID, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GUID, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Standard_GUID_Set__SWIG_1(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Standard_GUID_Set'.\n  Possible C/C++ prototypes are:\n""    operator =(Standard_GUID *,Standard_GUID const &)\n""    operator =(Standard_GUID *,Standard_UUID const &)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID_ShallowDumpToString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_GUID *arg1 = (Standard_GUID *) 0 ; std::string result; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID_ShallowDumpToString",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID_ShallowDumpToString" "', argument " "1"" of type '" "Standard_GUID *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); { try { result = Standard_GUID_ShallowDumpToString(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_std_string(static_cast< std::string >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID_CheckGUIDFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_GUID *arg1 = (Standard_GUID *) 0 ; char *arg2 = (char *) 0 ; Standard_Boolean result;
+  void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID_CheckGUIDFormat",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID_CheckGUIDFormat" "', argument " "1"" of type '" "Standard_GUID *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_GUID_CheckGUIDFormat" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { result = (Standard_Boolean)(arg1)->CheckGUIDFormat((char const *)arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)); if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
+  return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID_Hash(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_GUID *arg1 = (Standard_GUID *) 0 ; Standard_Integer arg2 ; Standard_Integer result; void *argp1 = 0 ; int res1 = 0 ;
+  int val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID_Hash",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID_Hash" "', argument " "1"" of type '" "Standard_GUID const *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); ecode2 = SWIG_AsVal_int(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Standard_GUID_Hash" "', argument " "2"" of type '" "Standard_Integer""'"); }
+    arg2 = static_cast< Standard_Integer >(val2); { try { result = (Standard_Integer)((Standard_GUID const *)arg1)->Hash(arg2); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID_HashCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_GUID *arg1 = (Standard_GUID *) 0 ; Standard_GUID *arg2 = 0 ; Standard_Integer arg3 ; Standard_Integer result;
+  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; int val3 ; int ecode3 = 0 ; PyObject * obj0 = 0 ;
+  PyObject * obj1 = 0 ; PyObject * obj2 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID_HashCode",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID_HashCode" "', argument " "1"" of type '" "Standard_GUID *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Standard_GUID,  0  | 0);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_GUID_HashCode" "', argument " "2"" of type '" "Standard_GUID const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_GUID_HashCode" "', argument " "2"" of type '" "Standard_GUID const &""'"); }
+   arg2 = reinterpret_cast< Standard_GUID * >(argp2); ecode3 = SWIG_AsVal_int(obj2, &val3); if (!SWIG_IsOK(ecode3)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Standard_GUID_HashCode" "', argument " "3"" of type '" "Standard_Integer""'"); }
+    arg3 = static_cast< Standard_Integer >(val3); { try {
+      result = (Standard_Integer)(arg1)->HashCode((Standard_GUID const &)*arg2,arg3); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID_IsEqual(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_GUID *arg1 = (Standard_GUID *) 0 ; Standard_GUID *arg2 = 0 ; Standard_GUID *arg3 = 0 ; Standard_Boolean result;
+  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; PyObject * obj0 = 0 ;
+  PyObject * obj1 = 0 ; PyObject * obj2 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID_IsEqual",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID_IsEqual" "', argument " "1"" of type '" "Standard_GUID *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Standard_GUID,  0  | 0);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_GUID_IsEqual" "', argument " "2"" of type '" "Standard_GUID const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_GUID_IsEqual" "', argument " "2"" of type '" "Standard_GUID const &""'"); }
+   arg2 = reinterpret_cast< Standard_GUID * >(argp2); res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Standard_GUID,  0  | 0);
+  if (!SWIG_IsOK(res3)) {
+    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Standard_GUID_IsEqual" "', argument " "3"" of type '" "Standard_GUID const &""'");  }
+   if (!argp3) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_GUID_IsEqual" "', argument " "3"" of type '" "Standard_GUID const &""'"); }
+   arg3 = reinterpret_cast< Standard_GUID * >(argp3); { try {
+      result = (Standard_Boolean)(arg1)->IsEqual((Standard_GUID const &)*arg2,(Standard_GUID const &)*arg3); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID__CSFDB_GetStandard_GUIDmy32b(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_GUID *arg1 = (Standard_GUID *) 0 ; Standard_Integer result; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID__CSFDB_GetStandard_GUIDmy32b",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID__CSFDB_GetStandard_GUIDmy32b" "', argument " "1"" of type '" "Standard_GUID const *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); { try {
+      result = (Standard_Integer)((Standard_GUID const *)arg1)->_CSFDB_GetStandard_GUIDmy32b(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID__CSFDB_SetStandard_GUIDmy32b(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_GUID *arg1 = (Standard_GUID *) 0 ; Standard_Integer arg2 ; void *argp1 = 0 ; int res1 = 0 ;
+  int val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID__CSFDB_SetStandard_GUIDmy32b",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID__CSFDB_SetStandard_GUIDmy32b" "', argument " "1"" of type '" "Standard_GUID *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); ecode2 = SWIG_AsVal_int(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Standard_GUID__CSFDB_SetStandard_GUIDmy32b" "', argument " "2"" of type '" "Standard_Integer""'"); }
+    arg2 = static_cast< Standard_Integer >(val2); { try { (arg1)->_CSFDB_SetStandard_GUIDmy32b(arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID__CSFDB_GetStandard_GUIDmy16b1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_GUID *arg1 = (Standard_GUID *) 0 ; Standard_ExtCharacter result; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID__CSFDB_GetStandard_GUIDmy16b1",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID__CSFDB_GetStandard_GUIDmy16b1" "', argument " "1"" of type '" "Standard_GUID const *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); { try {
+      result = (Standard_ExtCharacter)((Standard_GUID const *)arg1)->_CSFDB_GetStandard_GUIDmy16b1(); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_short(static_cast< short >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID__CSFDB_SetStandard_GUIDmy16b1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_GUID *arg1 = (Standard_GUID *) 0 ; Standard_ExtCharacter arg2 ; void *argp1 = 0 ;
+  int res1 = 0 ; short val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID__CSFDB_SetStandard_GUIDmy16b1",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID__CSFDB_SetStandard_GUIDmy16b1" "', argument " "1"" of type '" "Standard_GUID *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); ecode2 = SWIG_AsVal_short(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Standard_GUID__CSFDB_SetStandard_GUIDmy16b1" "', argument " "2"" of type '" "Standard_ExtCharacter""'"); }
+    arg2 = static_cast< Standard_ExtCharacter >(val2); { try { (arg1)->_CSFDB_SetStandard_GUIDmy16b1(arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID__CSFDB_GetStandard_GUIDmy16b2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_GUID *arg1 = (Standard_GUID *) 0 ; Standard_ExtCharacter result; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID__CSFDB_GetStandard_GUIDmy16b2",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID__CSFDB_GetStandard_GUIDmy16b2" "', argument " "1"" of type '" "Standard_GUID const *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); { try {
+      result = (Standard_ExtCharacter)((Standard_GUID const *)arg1)->_CSFDB_GetStandard_GUIDmy16b2(); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_short(static_cast< short >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID__CSFDB_SetStandard_GUIDmy16b2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_GUID *arg1 = (Standard_GUID *) 0 ; Standard_ExtCharacter arg2 ; void *argp1 = 0 ;
+  int res1 = 0 ; short val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID__CSFDB_SetStandard_GUIDmy16b2",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID__CSFDB_SetStandard_GUIDmy16b2" "', argument " "1"" of type '" "Standard_GUID *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); ecode2 = SWIG_AsVal_short(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Standard_GUID__CSFDB_SetStandard_GUIDmy16b2" "', argument " "2"" of type '" "Standard_ExtCharacter""'"); }
+    arg2 = static_cast< Standard_ExtCharacter >(val2); { try { (arg1)->_CSFDB_SetStandard_GUIDmy16b2(arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID__CSFDB_GetStandard_GUIDmy16b3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_GUID *arg1 = (Standard_GUID *) 0 ; Standard_ExtCharacter result; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID__CSFDB_GetStandard_GUIDmy16b3",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID__CSFDB_GetStandard_GUIDmy16b3" "', argument " "1"" of type '" "Standard_GUID const *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); { try {
+      result = (Standard_ExtCharacter)((Standard_GUID const *)arg1)->_CSFDB_GetStandard_GUIDmy16b3(); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_short(static_cast< short >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID__CSFDB_SetStandard_GUIDmy16b3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_GUID *arg1 = (Standard_GUID *) 0 ; Standard_ExtCharacter arg2 ; void *argp1 = 0 ;
+  int res1 = 0 ; short val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID__CSFDB_SetStandard_GUIDmy16b3",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID__CSFDB_SetStandard_GUIDmy16b3" "', argument " "1"" of type '" "Standard_GUID *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); ecode2 = SWIG_AsVal_short(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Standard_GUID__CSFDB_SetStandard_GUIDmy16b3" "', argument " "2"" of type '" "Standard_ExtCharacter""'"); }
+    arg2 = static_cast< Standard_ExtCharacter >(val2); { try { (arg1)->_CSFDB_SetStandard_GUIDmy16b3(arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID__CSFDB_GetStandard_GUIDmy8b1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_GUID *arg1 = (Standard_GUID *) 0 ; Standard_Byte result; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID__CSFDB_GetStandard_GUIDmy8b1",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID__CSFDB_GetStandard_GUIDmy8b1" "', argument " "1"" of type '" "Standard_GUID const *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); { try {
+      result = (Standard_Byte)((Standard_GUID const *)arg1)->_CSFDB_GetStandard_GUIDmy8b1(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID__CSFDB_SetStandard_GUIDmy8b1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_GUID *arg1 = (Standard_GUID *) 0 ; Standard_Byte arg2 ; void *argp1 = 0 ; int res1 = 0 ;
+  unsigned char val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID__CSFDB_SetStandard_GUIDmy8b1",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID__CSFDB_SetStandard_GUIDmy8b1" "', argument " "1"" of type '" "Standard_GUID *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
+  if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Standard_GUID__CSFDB_SetStandard_GUIDmy8b1" "', argument " "2"" of type '" "Standard_Byte""'"); }
+    arg2 = static_cast< Standard_Byte >(val2); { try { (arg1)->_CSFDB_SetStandard_GUIDmy8b1(arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID__CSFDB_GetStandard_GUIDmy8b2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_GUID *arg1 = (Standard_GUID *) 0 ; Standard_Byte result; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID__CSFDB_GetStandard_GUIDmy8b2",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID__CSFDB_GetStandard_GUIDmy8b2" "', argument " "1"" of type '" "Standard_GUID const *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); { try {
+      result = (Standard_Byte)((Standard_GUID const *)arg1)->_CSFDB_GetStandard_GUIDmy8b2(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID__CSFDB_SetStandard_GUIDmy8b2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_GUID *arg1 = (Standard_GUID *) 0 ; Standard_Byte arg2 ; void *argp1 = 0 ; int res1 = 0 ;
+  unsigned char val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID__CSFDB_SetStandard_GUIDmy8b2",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID__CSFDB_SetStandard_GUIDmy8b2" "', argument " "1"" of type '" "Standard_GUID *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
+  if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Standard_GUID__CSFDB_SetStandard_GUIDmy8b2" "', argument " "2"" of type '" "Standard_Byte""'"); }
+    arg2 = static_cast< Standard_Byte >(val2); { try { (arg1)->_CSFDB_SetStandard_GUIDmy8b2(arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID__CSFDB_GetStandard_GUIDmy8b3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_GUID *arg1 = (Standard_GUID *) 0 ; Standard_Byte result; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID__CSFDB_GetStandard_GUIDmy8b3",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID__CSFDB_GetStandard_GUIDmy8b3" "', argument " "1"" of type '" "Standard_GUID const *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); { try {
+      result = (Standard_Byte)((Standard_GUID const *)arg1)->_CSFDB_GetStandard_GUIDmy8b3(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID__CSFDB_SetStandard_GUIDmy8b3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_GUID *arg1 = (Standard_GUID *) 0 ; Standard_Byte arg2 ; void *argp1 = 0 ; int res1 = 0 ;
+  unsigned char val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID__CSFDB_SetStandard_GUIDmy8b3",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID__CSFDB_SetStandard_GUIDmy8b3" "', argument " "1"" of type '" "Standard_GUID *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
+  if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Standard_GUID__CSFDB_SetStandard_GUIDmy8b3" "', argument " "2"" of type '" "Standard_Byte""'"); }
+    arg2 = static_cast< Standard_Byte >(val2); { try { (arg1)->_CSFDB_SetStandard_GUIDmy8b3(arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID__CSFDB_GetStandard_GUIDmy8b4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_GUID *arg1 = (Standard_GUID *) 0 ; Standard_Byte result; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID__CSFDB_GetStandard_GUIDmy8b4",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID__CSFDB_GetStandard_GUIDmy8b4" "', argument " "1"" of type '" "Standard_GUID const *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); { try {
+      result = (Standard_Byte)((Standard_GUID const *)arg1)->_CSFDB_GetStandard_GUIDmy8b4(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID__CSFDB_SetStandard_GUIDmy8b4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_GUID *arg1 = (Standard_GUID *) 0 ; Standard_Byte arg2 ; void *argp1 = 0 ; int res1 = 0 ;
+  unsigned char val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID__CSFDB_SetStandard_GUIDmy8b4",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID__CSFDB_SetStandard_GUIDmy8b4" "', argument " "1"" of type '" "Standard_GUID *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
+  if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Standard_GUID__CSFDB_SetStandard_GUIDmy8b4" "', argument " "2"" of type '" "Standard_Byte""'"); }
+    arg2 = static_cast< Standard_Byte >(val2); { try { (arg1)->_CSFDB_SetStandard_GUIDmy8b4(arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID__CSFDB_GetStandard_GUIDmy8b5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_GUID *arg1 = (Standard_GUID *) 0 ; Standard_Byte result; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID__CSFDB_GetStandard_GUIDmy8b5",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID__CSFDB_GetStandard_GUIDmy8b5" "', argument " "1"" of type '" "Standard_GUID const *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); { try {
+      result = (Standard_Byte)((Standard_GUID const *)arg1)->_CSFDB_GetStandard_GUIDmy8b5(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID__CSFDB_SetStandard_GUIDmy8b5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_GUID *arg1 = (Standard_GUID *) 0 ; Standard_Byte arg2 ; void *argp1 = 0 ; int res1 = 0 ;
+  unsigned char val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID__CSFDB_SetStandard_GUIDmy8b5",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID__CSFDB_SetStandard_GUIDmy8b5" "', argument " "1"" of type '" "Standard_GUID *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
+  if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Standard_GUID__CSFDB_SetStandard_GUIDmy8b5" "', argument " "2"" of type '" "Standard_Byte""'"); }
+    arg2 = static_cast< Standard_Byte >(val2); { try { (arg1)->_CSFDB_SetStandard_GUIDmy8b5(arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID__CSFDB_GetStandard_GUIDmy8b6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_GUID *arg1 = (Standard_GUID *) 0 ; Standard_Byte result; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID__CSFDB_GetStandard_GUIDmy8b6",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID__CSFDB_GetStandard_GUIDmy8b6" "', argument " "1"" of type '" "Standard_GUID const *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); { try {
+      result = (Standard_Byte)((Standard_GUID const *)arg1)->_CSFDB_GetStandard_GUIDmy8b6(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID__CSFDB_SetStandard_GUIDmy8b6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_GUID *arg1 = (Standard_GUID *) 0 ; Standard_Byte arg2 ; void *argp1 = 0 ; int res1 = 0 ;
+  unsigned char val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID__CSFDB_SetStandard_GUIDmy8b6",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID__CSFDB_SetStandard_GUIDmy8b6" "', argument " "1"" of type '" "Standard_GUID *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
+  if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Standard_GUID__CSFDB_SetStandard_GUIDmy8b6" "', argument " "2"" of type '" "Standard_Byte""'"); }
+    arg2 = static_cast< Standard_Byte >(val2); { try { (arg1)->_CSFDB_SetStandard_GUIDmy8b6(arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_GUID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_GUID *arg1 = (Standard_GUID *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_GUID",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_GUID" "', argument " "1"" of type '" "Standard_GUID *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); { try { delete_Standard_GUID(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_GUID_ToString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_GUID *arg1 = (Standard_GUID *) 0 ; Standard_PCharacter result; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_GUID_ToString",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_GUID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_GUID_ToString" "', argument " "1"" of type '" "Standard_GUID *""'");  }
+   arg1 = reinterpret_cast< Standard_GUID * >(argp1); { try { result = (Standard_PCharacter)Standard_GUID_ToString(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_FromCharPtr((const char *)result); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_GUID_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_GUID, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Standard_ErrorHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_ErrorHandler *result = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Standard_ErrorHandler",0,0)) SWIG_fail; { try {
+      result = (Standard_ErrorHandler *)new Standard_ErrorHandler(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_ErrorHandler, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_ErrorHandler_Destroy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ErrorHandler *arg1 = (Standard_ErrorHandler *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_ErrorHandler_Destroy",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ErrorHandler, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_ErrorHandler_Destroy" "', argument " "1"" of type '" "Standard_ErrorHandler *""'");  }
+   arg1 = reinterpret_cast< Standard_ErrorHandler * >(argp1); { try { (arg1)->Destroy(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_ErrorHandler_Unlink(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ErrorHandler *arg1 = (Standard_ErrorHandler *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_ErrorHandler_Unlink",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ErrorHandler, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_ErrorHandler_Unlink" "', argument " "1"" of type '" "Standard_ErrorHandler *""'");  }
+   arg1 = reinterpret_cast< Standard_ErrorHandler * >(argp1); { try { (arg1)->Unlink(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_ErrorHandler_Catches(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ErrorHandler *arg1 = (Standard_ErrorHandler *) 0 ; Handle_Standard_Type *arg2 = 0 ;
+  Standard_Boolean result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ;
+  PyObject * obj1 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_ErrorHandler_Catches",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ErrorHandler, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_ErrorHandler_Catches" "', argument " "1"" of type '" "Standard_ErrorHandler *""'");  }
+   arg1 = reinterpret_cast< Standard_ErrorHandler * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Type,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_ErrorHandler_Catches" "', argument " "2"" of type '" "Handle_Standard_Type const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_ErrorHandler_Catches" "', argument " "2"" of type '" "Handle_Standard_Type const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Type * >(argp2); { try {
+      result = (Standard_Boolean)(arg1)->Catches((Handle_Standard_Type const &)*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_ErrorHandler_Error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ErrorHandler *arg1 = (Standard_ErrorHandler *) 0 ; Handle_Standard_Failure result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_ErrorHandler_Error",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ErrorHandler, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_ErrorHandler_Error" "', argument " "1"" of type '" "Standard_ErrorHandler const *""'");  }
+   arg1 = reinterpret_cast< Standard_ErrorHandler * >(argp1); { try { result = ((Standard_ErrorHandler const *)arg1)->Error(); }
+      catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_Failure(static_cast< const Handle_Standard_Failure& >(result))), SWIGTYPE_p_Handle_Standard_Failure, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_ErrorHandler_LastCaughtError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ErrorHandler *arg1 = (Standard_ErrorHandler *) 0 ; Handle_Standard_Failure result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_ErrorHandler_LastCaughtError",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ErrorHandler, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_ErrorHandler_LastCaughtError" "', argument " "1"" of type '" "Standard_ErrorHandler *""'");  }
+   arg1 = reinterpret_cast< Standard_ErrorHandler * >(argp1); { try { result = (arg1)->LastCaughtError(); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_Failure(static_cast< const Handle_Standard_Failure& >(result))), SWIGTYPE_p_Handle_Standard_Failure, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_ErrorHandler_IsInTryBlock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ErrorHandler *arg1 = (Standard_ErrorHandler *) 0 ; Standard_Boolean result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_ErrorHandler_IsInTryBlock",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ErrorHandler, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_ErrorHandler_IsInTryBlock" "', argument " "1"" of type '" "Standard_ErrorHandler *""'");  }
+   arg1 = reinterpret_cast< Standard_ErrorHandler * >(argp1); { try { result = (Standard_Boolean)(arg1)->IsInTryBlock(); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_ErrorHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_ErrorHandler *arg1 = (Standard_ErrorHandler *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_ErrorHandler",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_ErrorHandler, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_ErrorHandler" "', argument " "1"" of type '" "Standard_ErrorHandler *""'");  }
+   arg1 = reinterpret_cast< Standard_ErrorHandler * >(argp1); { try { delete_Standard_ErrorHandler(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_ErrorHandler_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_ErrorHandler, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Standard_Mutex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Mutex *result = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Standard_Mutex",0,0)) SWIG_fail; { try {
+      result = (Standard_Mutex *)new Standard_Mutex(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_Mutex, SWIG_POINTER_NEW |  0 ); return resultobj;
+  fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Mutex_Lock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Mutex *arg1 = (Standard_Mutex *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Mutex_Lock",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Mutex, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Mutex_Lock" "', argument " "1"" of type '" "Standard_Mutex *""'");  }
+   arg1 = reinterpret_cast< Standard_Mutex * >(argp1); { try { (arg1)->Lock(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Mutex_TryLock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Mutex *arg1 = (Standard_Mutex *) 0 ; Standard_Boolean result; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Mutex_TryLock",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Mutex, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Mutex_TryLock" "', argument " "1"" of type '" "Standard_Mutex *""'");  }
+   arg1 = reinterpret_cast< Standard_Mutex * >(argp1); { try { result = (Standard_Boolean)(arg1)->TryLock(); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Mutex_Unlock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Mutex *arg1 = (Standard_Mutex *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Mutex_Unlock",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Mutex, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Mutex_Unlock" "', argument " "1"" of type '" "Standard_Mutex *""'");  }
+   arg1 = reinterpret_cast< Standard_Mutex * >(argp1); { try { (arg1)->Unlock(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_Mutex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Mutex *arg1 = (Standard_Mutex *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_Mutex",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Mutex, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_Mutex" "', argument " "1"" of type '" "Standard_Mutex *""'");  }
+   arg1 = reinterpret_cast< Standard_Mutex * >(argp1); { try { delete_Standard_Mutex(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_Mutex_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_Mutex, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_Standard_Persistent_This(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Persistent *arg1 = (Standard_Persistent *) 0 ; Handle_Standard_Persistent result; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_Persistent_This",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Persistent, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Persistent_This" "', argument " "1"" of type '" "Standard_Persistent const *""'");  }
+   arg1 = reinterpret_cast< Standard_Persistent * >(argp1); { try { result = ((Standard_Persistent const *)arg1)->This(); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_Persistent(static_cast< const Handle_Standard_Persistent& >(result))), SWIGTYPE_p_Handle_Standard_Persistent, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Persistent_ShallowCopy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Persistent *arg1 = (Standard_Persistent *) 0 ; Handle_Standard_Persistent result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Persistent_ShallowCopy",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Persistent, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Persistent_ShallowCopy" "', argument " "1"" of type '" "Standard_Persistent const *""'");  }
+   arg1 = reinterpret_cast< Standard_Persistent * >(argp1); { try {
+      result = ((Standard_Persistent const *)arg1)->ShallowCopy(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_Persistent(static_cast< const Handle_Standard_Persistent& >(result))), SWIGTYPE_p_Handle_Standard_Persistent, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Persistent_Delete(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Persistent *arg1 = (Standard_Persistent *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Persistent_Delete",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Persistent, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Persistent_Delete" "', argument " "1"" of type '" "Standard_Persistent const *""'");  }
+   arg1 = reinterpret_cast< Standard_Persistent * >(argp1); { try { ((Standard_Persistent const *)arg1)->Delete(); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_Persistent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Persistent *result = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Standard_Persistent",0,0)) SWIG_fail; { try {
+      result = (Standard_Persistent *)new Standard_Persistent(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_Persistent, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Persistent_DynamicType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Persistent *arg1 = (Standard_Persistent *) 0 ; Handle_Standard_Type *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Persistent_DynamicType",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Persistent, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Persistent_DynamicType" "', argument " "1"" of type '" "Standard_Persistent const *""'");  }
+   arg1 = reinterpret_cast< Standard_Persistent * >(argp1); { try { {
+        Handle_Standard_Type const &_result_ref = ((Standard_Persistent const *)arg1)->DynamicType();
+        result = (Handle_Standard_Type *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Type, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Persistent_IsKind(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Persistent *arg1 = (Standard_Persistent *) 0 ; Handle_Standard_Type *arg2 = 0 ; Standard_Boolean result;
+  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Persistent_IsKind",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Persistent, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Persistent_IsKind" "', argument " "1"" of type '" "Standard_Persistent const *""'");  }
+   arg1 = reinterpret_cast< Standard_Persistent * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Type,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_Persistent_IsKind" "', argument " "2"" of type '" "Handle_Standard_Type const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_Persistent_IsKind" "', argument " "2"" of type '" "Handle_Standard_Type const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Type * >(argp2); { try {
+      result = (Standard_Boolean)((Standard_Persistent const *)arg1)->IsKind((Handle_Standard_Type const &)*arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Persistent_IsInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Persistent *arg1 = (Standard_Persistent *) 0 ; Handle_Standard_Type *arg2 = 0 ;
+  Standard_Boolean result; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ;
+  PyObject * obj1 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_Persistent_IsInstance",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Persistent, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Persistent_IsInstance" "', argument " "1"" of type '" "Standard_Persistent const *""'");  }
+   arg1 = reinterpret_cast< Standard_Persistent * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Handle_Standard_Type,  0  | 0); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_Persistent_IsInstance" "', argument " "2"" of type '" "Handle_Standard_Type const &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_Persistent_IsInstance" "', argument " "2"" of type '" "Handle_Standard_Type const &""'"); }
+   arg2 = reinterpret_cast< Handle_Standard_Type * >(argp2); { try {
+      result = (Standard_Boolean)((Standard_Persistent const *)arg1)->IsInstance((Handle_Standard_Type const &)*arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Persistent_HashCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Persistent *arg1 = (Standard_Persistent *) 0 ; Standard_Integer arg2 ;
+  Standard_Integer result; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ; PyObject * obj0 = 0 ;
+  PyObject * obj1 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_Persistent_HashCode",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Persistent, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Persistent_HashCode" "', argument " "1"" of type '" "Standard_Persistent const *""'");  }
+   arg1 = reinterpret_cast< Standard_Persistent * >(argp1); ecode2 = SWIG_AsVal_int(obj1, &val2); if (!SWIG_IsOK(ecode2)) {
+    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Standard_Persistent_HashCode" "', argument " "2"" of type '" "Standard_Integer""'"); }
+    arg2 = static_cast< Standard_Integer >(val2); { try {
+      result = (Standard_Integer)((Standard_Persistent const *)arg1)->HashCode(arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Persistent_ShallowDumpToString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Persistent *arg1 = (Standard_Persistent *) 0 ; std::string result; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Persistent_ShallowDumpToString",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Persistent, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Persistent_ShallowDumpToString" "', argument " "1"" of type '" "Standard_Persistent *""'");  }
+   arg1 = reinterpret_cast< Standard_Persistent * >(argp1); { try { result = Standard_Persistent_ShallowDumpToString(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_std_string(static_cast< std::string >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Persistent_GetHandle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Persistent *arg1 = (Standard_Persistent *) 0 ; Handle_Standard_Persistent result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_Persistent_GetHandle",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Persistent, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Persistent_GetHandle" "', argument " "1"" of type '" "Standard_Persistent *""'");  }
+   arg1 = reinterpret_cast< Standard_Persistent * >(argp1); { try { result = Standard_Persistent_GetHandle(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_Persistent(static_cast< const Handle_Standard_Persistent& >(result))), SWIGTYPE_p_Handle_Standard_Persistent, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_Persistent___hash__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_Persistent *arg1 = (Standard_Persistent *) 0 ; Standard_Integer result; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_Persistent___hash__",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Persistent, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_Persistent___hash__" "', argument " "1"" of type '" "Standard_Persistent *""'");  }
+   arg1 = reinterpret_cast< Standard_Persistent * >(argp1); { try {
+      result = (Standard_Integer)Standard_Persistent___hash__(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_Persistent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_Persistent *arg1 = (Standard_Persistent *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_Persistent",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_Persistent, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_Persistent" "', argument " "1"" of type '" "Standard_Persistent *""'");  }
+   arg1 = reinterpret_cast< Standard_Persistent * >(argp1); { try { delete_Standard_Persistent(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_Persistent_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_Persistent, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+SWIGINTERN PyObject *_wrap_new_Standard_OutOfRange__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_OutOfRange *result = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"new_Standard_OutOfRange",0,0)) SWIG_fail; { try {
+      result = (Standard_OutOfRange *)new Standard_OutOfRange(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_OutOfRange, SWIG_POINTER_NEW |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_OutOfRange__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; char *arg1 = (char *) 0 ; Standard_OutOfRange *result = 0 ; int res1 ; char *buf1 = 0 ;
+  int alloc1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"new_Standard_OutOfRange",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Standard_OutOfRange" "', argument " "1"" of type '" "char const *""'"); }
+   arg1 = reinterpret_cast< char * >(buf1); { try {
+      result = (Standard_OutOfRange *)new Standard_OutOfRange((char const *)arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Standard_OutOfRange, SWIG_POINTER_NEW |  0 );
+  if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return resultobj; fail: if (alloc1 == SWIG_NEWOBJ) delete[] buf1; return NULL; }
+SWIGINTERN PyObject *_wrap_new_Standard_OutOfRange(PyObject *self, PyObject *args) { int argc; PyObject *argv[2]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 1); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 0) { return _wrap_new_Standard_OutOfRange__SWIG_0(self, args);} 
+  if (argc == 1) { int _v; int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_new_Standard_OutOfRange__SWIG_1(self, args);}  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Standard_OutOfRange'.\n  Possible C/C++ prototypes are:\n""    Standard_OutOfRange()\n""    Standard_OutOfRange(char const *)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_OutOfRange_Raise__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_OutOfRange *arg1 = (Standard_OutOfRange *) 0 ; char *arg2 = (char *) 0 ; void *argp1 = 0 ;
+  int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_OutOfRange_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_OutOfRange, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_OutOfRange_Raise" "', argument " "1"" of type '" "Standard_OutOfRange *""'");  }
+   arg1 = reinterpret_cast< Standard_OutOfRange * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_OutOfRange_Raise" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { (arg1)->Raise((char const *)arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_OutOfRange_Raise__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_OutOfRange *arg1 = (Standard_OutOfRange *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
+  PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_OutOfRange_Raise",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_OutOfRange, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_OutOfRange_Raise" "', argument " "1"" of type '" "Standard_OutOfRange *""'");  }
+   arg1 = reinterpret_cast< Standard_OutOfRange * >(argp1); { try { (arg1)->Raise(); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_OutOfRange_Raise__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_OutOfRange *arg1 = (Standard_OutOfRange *) 0 ; Standard_SStream *arg2 = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_OutOfRange_Raise",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_OutOfRange, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_OutOfRange_Raise" "', argument " "1"" of type '" "Standard_OutOfRange *""'");  }
+   arg1 = reinterpret_cast< Standard_OutOfRange * >(argp1);
+  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Standard_SStream,  0 ); if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_OutOfRange_Raise" "', argument " "2"" of type '" "Standard_SStream &""'");  }
+   if (!argp2) {
+    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Standard_OutOfRange_Raise" "', argument " "2"" of type '" "Standard_SStream &""'"); }
+   arg2 = reinterpret_cast< Standard_SStream * >(argp2); { try { (arg1)->Raise(*arg2); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  }  resultobj = SWIG_Py_Void();
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_OutOfRange_Raise(PyObject *self, PyObject *args) { int argc; PyObject *argv[3]; int ii;
+  if (!PyTuple_Check(args)) SWIG_fail; argc = (int)PyObject_Length(args); for (ii = 0; (ii < argc) && (ii < 2); ii++) {
+    argv[ii] = PyTuple_GET_ITEM(args,ii); }  if (argc == 1) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_OutOfRange, 0); _v = SWIG_CheckState(res); if (_v) {
+      return _wrap_Standard_OutOfRange_Raise__SWIG_1(self, args);}  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_OutOfRange, 0); _v = SWIG_CheckState(res); if (_v) {
+      void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Standard_SStream, 0); _v = SWIG_CheckState(res);
+      if (_v) { return _wrap_Standard_OutOfRange_Raise__SWIG_2(self, args);}  }  }  if (argc == 2) { int _v; void *vptr = 0;
+    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Standard_OutOfRange, 0); _v = SWIG_CheckState(res); if (_v) {
+      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0); _v = SWIG_CheckState(res); if (_v) {
+        return _wrap_Standard_OutOfRange_Raise__SWIG_0(self, args);}  }  }  fail:
+  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Standard_OutOfRange_Raise'.\n  Possible C/C++ prototypes are:\n""    Raise(Standard_OutOfRange *,char const *)\n""    Raise(Standard_OutOfRange *)\n""    Raise(Standard_OutOfRange *,Standard_SStream &)\n");
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_OutOfRange_NewInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_OutOfRange *arg1 = (Standard_OutOfRange *) 0 ; char *arg2 = (char *) 0 ;
+  Handle_Standard_OutOfRange result; void *argp1 = 0 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ;
+  PyObject * obj0 = 0 ; PyObject * obj1 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_OutOfRange_NewInstance",2,2,&obj0,&obj1)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_OutOfRange, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_OutOfRange_NewInstance" "', argument " "1"" of type '" "Standard_OutOfRange *""'");  }
+   arg1 = reinterpret_cast< Standard_OutOfRange * >(argp1); res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
+  if (!SWIG_IsOK(res2)) {
+    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Standard_OutOfRange_NewInstance" "', argument " "2"" of type '" "char const *""'"); }
+   arg2 = reinterpret_cast< char * >(buf2); { try { result = (arg1)->NewInstance((char const *)arg2); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_OutOfRange(static_cast< const Handle_Standard_OutOfRange& >(result))), SWIGTYPE_p_Handle_Standard_OutOfRange, SWIG_POINTER_OWN |  0 );
+  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_OutOfRange_DynamicType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_OutOfRange *arg1 = (Standard_OutOfRange *) 0 ; Handle_Standard_Type *result = 0 ;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_OutOfRange_DynamicType",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_OutOfRange, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_OutOfRange_DynamicType" "', argument " "1"" of type '" "Standard_OutOfRange const *""'");  }
+   arg1 = reinterpret_cast< Standard_OutOfRange * >(argp1); { try { {
+        Handle_Standard_Type const &_result_ref = ((Standard_OutOfRange const *)arg1)->DynamicType();
+        result = (Handle_Standard_Type *) &_result_ref; }  }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Handle_Standard_Type, 0 |  0 ); return resultobj; fail:
+  return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_OutOfRange_GetHandle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_OutOfRange *arg1 = (Standard_OutOfRange *) 0 ; Handle_Standard_OutOfRange result;
+  void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"Standard_OutOfRange_GetHandle",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_OutOfRange, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_OutOfRange_GetHandle" "', argument " "1"" of type '" "Standard_OutOfRange *""'");  }
+   arg1 = reinterpret_cast< Standard_OutOfRange * >(argp1); { try { result = Standard_OutOfRange_GetHandle(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_NewPointerObj((new Handle_Standard_OutOfRange(static_cast< const Handle_Standard_OutOfRange& >(result))), SWIGTYPE_p_Handle_Standard_OutOfRange, SWIG_POINTER_OWN |  0 );
+  return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_Standard_OutOfRange___hash__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *resultobj = 0; Standard_OutOfRange *arg1 = (Standard_OutOfRange *) 0 ; Standard_Integer result; void *argp1 = 0 ;
+  int res1 = 0 ; PyObject * obj0 = 0 ; if(!PyArg_UnpackTuple(args,(char *)"Standard_OutOfRange___hash__",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_OutOfRange, 0 |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Standard_OutOfRange___hash__" "', argument " "1"" of type '" "Standard_OutOfRange *""'");  }
+   arg1 = reinterpret_cast< Standard_OutOfRange * >(argp1); { try {
+      result = (Standard_Integer)Standard_OutOfRange___hash__(arg1); }   catch(Standard_Failure) {
+      SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *_wrap_delete_Standard_OutOfRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
+  Standard_OutOfRange *arg1 = (Standard_OutOfRange *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject * obj0 = 0 ;
+  if(!PyArg_UnpackTuple(args,(char *)"delete_Standard_OutOfRange",1,1,&obj0)) SWIG_fail;
+  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Standard_OutOfRange, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
+    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Standard_OutOfRange" "', argument " "1"" of type '" "Standard_OutOfRange *""'");  }
+   arg1 = reinterpret_cast< Standard_OutOfRange * >(argp1); { try { delete_Standard_OutOfRange(arg1); }  
+    catch(Standard_Failure) { SWIG_exception(SWIG_RuntimeError,Standard_Failure::Caught()->DynamicType()->Name()); }  } 
+  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
+SWIGINTERN PyObject *Standard_OutOfRange_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
+  PyObject *obj;
+  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
+  SWIG_TypeNewClientData(SWIGTYPE_p_Standard_OutOfRange, SWIG_NewClientData(obj));
+  return SWIG_Py_Void();
+}
+
+static PyMethodDef SwigMethods[] = {
+	 { (char *)"delete_PySwigIterator", _wrap_delete_PySwigIterator, METH_VARARGS, NULL},
+	 { (char *)"PySwigIterator_value", _wrap_PySwigIterator_value, METH_VARARGS, NULL},
+	 { (char *)"PySwigIterator_incr", _wrap_PySwigIterator_incr, METH_VARARGS, NULL},
+	 { (char *)"PySwigIterator_decr", _wrap_PySwigIterator_decr, METH_VARARGS, NULL},
+	 { (char *)"PySwigIterator_distance", _wrap_PySwigIterator_distance, METH_VARARGS, NULL},
+	 { (char *)"PySwigIterator_equal", _wrap_PySwigIterator_equal, METH_VARARGS, NULL},
+	 { (char *)"PySwigIterator_copy", _wrap_PySwigIterator_copy, METH_VARARGS, NULL},
+	 { (char *)"PySwigIterator_next", _wrap_PySwigIterator_next, METH_VARARGS, NULL},
+	 { (char *)"PySwigIterator_previous", _wrap_PySwigIterator_previous, METH_VARARGS, NULL},
+	 { (char *)"PySwigIterator_advance", _wrap_PySwigIterator_advance, METH_VARARGS, NULL},
+	 { (char *)"PySwigIterator___eq__", _wrap_PySwigIterator___eq__, METH_VARARGS, NULL},
+	 { (char *)"PySwigIterator___ne__", _wrap_PySwigIterator___ne__, METH_VARARGS, NULL},
+	 { (char *)"PySwigIterator___iadd__", _wrap_PySwigIterator___iadd__, METH_VARARGS, NULL},
+	 { (char *)"PySwigIterator___isub__", _wrap_PySwigIterator___isub__, METH_VARARGS, NULL},
+	 { (char *)"PySwigIterator___add__", _wrap_PySwigIterator___add__, METH_VARARGS, NULL},
+	 { (char *)"PySwigIterator___sub__", _wrap_PySwigIterator___sub__, METH_VARARGS, NULL},
+	 { (char *)"PySwigIterator_swigregister", PySwigIterator_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Handle_Standard_Transient", _wrap_new_Handle_Standard_Transient, METH_VARARGS, (char *)"\n"
+		"Handle_Standard_Transient()\n"
+		"Handle_Standard_Transient(Standard_Transient anItem)\n"
+		"new_Handle_Standard_Transient(Handle_Standard_Transient aTid) -> Handle_Standard_Transient\n"
+		""},
+	 { (char *)"Handle_Standard_Transient_Set", _wrap_Handle_Standard_Transient_Set, METH_VARARGS, (char *)"\n"
+		"Set(Handle_Standard_Transient aHandle) -> Handle_Standard_Transient\n"
+		"Handle_Standard_Transient_Set(Handle_Standard_Transient self, Standard_Transient anItem) -> Handle_Standard_Transient\n"
+		""},
+	 { (char *)"Handle_Standard_Transient_Nullify", _wrap_Handle_Standard_Transient_Nullify, METH_VARARGS, (char *)"Handle_Standard_Transient_Nullify(Handle_Standard_Transient self)"},
+	 { (char *)"Handle_Standard_Transient_IsNull", _wrap_Handle_Standard_Transient_IsNull, METH_VARARGS, (char *)"Handle_Standard_Transient_IsNull(Handle_Standard_Transient self) -> Standard_Boolean"},
+	 { (char *)"Handle_Standard_Transient_Access", _wrap_Handle_Standard_Transient_Access, METH_VARARGS, (char *)"\n"
+		"Access() -> Standard_Transient\n"
+		"Handle_Standard_Transient_Access(Handle_Standard_Transient self) -> Standard_Transient\n"
+		""},
+	 { (char *)"Handle_Standard_Transient___eq__", _wrap_Handle_Standard_Transient___eq__, METH_VARARGS, (char *)"\n"
+		"__eq__(Handle_Standard_Transient right) -> int\n"
+		"Handle_Standard_Transient___eq__(Handle_Standard_Transient self, Standard_Transient right) -> int\n"
+		""},
+	 { (char *)"Handle_Standard_Transient___ne__", _wrap_Handle_Standard_Transient___ne__, METH_VARARGS, (char *)"\n"
+		"__ne__(Handle_Standard_Transient right) -> int\n"
+		"Handle_Standard_Transient___ne__(Handle_Standard_Transient self, Standard_Transient right) -> int\n"
+		""},
+	 { (char *)"Handle_Standard_Transient_DownCast", _wrap_Handle_Standard_Transient_DownCast, METH_VARARGS, (char *)"Handle_Standard_Transient_DownCast(Handle_Standard_Transient self, Handle_Standard_Transient AnObject) -> Handle_Standard_Transient"},
+	 { (char *)"Handle_Standard_Transient_DumpToString", _wrap_Handle_Standard_Transient_DumpToString, METH_VARARGS, (char *)"Handle_Standard_Transient_DumpToString(Handle_Standard_Transient self) -> string"},
+	 { (char *)"Handle_Standard_Transient_GetObject", _wrap_Handle_Standard_Transient_GetObject, METH_VARARGS, (char *)"Handle_Standard_Transient_GetObject(Handle_Standard_Transient self) -> Standard_Transient"},
+	 { (char *)"delete_Handle_Standard_Transient", _wrap_delete_Handle_Standard_Transient, METH_VARARGS, (char *)"delete_Handle_Standard_Transient(Handle_Standard_Transient self)"},
+	 { (char *)"Handle_Standard_Transient_swigregister", Handle_Standard_Transient_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Handle_Standard_Failure", _wrap_new_Handle_Standard_Failure, METH_VARARGS, (char *)"\n"
+		"Handle_Standard_Failure()\n"
+		"Handle_Standard_Failure(Handle_Standard_Failure aHandle)\n"
+		"new_Handle_Standard_Failure(Standard_Failure anItem) -> Handle_Standard_Failure\n"
+		""},
+	 { (char *)"Handle_Standard_Failure_Set", _wrap_Handle_Standard_Failure_Set, METH_VARARGS, (char *)"\n"
+		"Set(Handle_Standard_Failure aHandle) -> Handle_Standard_Failure\n"
+		"Handle_Standard_Failure_Set(Handle_Standard_Failure self, Standard_Failure anItem) -> Handle_Standard_Failure\n"
+		""},
+	 { (char *)"Handle_Standard_Failure_DownCast", _wrap_Handle_Standard_Failure_DownCast, METH_VARARGS, (char *)"Handle_Standard_Failure_DownCast(Handle_Standard_Failure self, Handle_Standard_Transient AnObject) -> Handle_Standard_Failure"},
+	 { (char *)"Handle_Standard_Failure_GetObject", _wrap_Handle_Standard_Failure_GetObject, METH_VARARGS, (char *)"Handle_Standard_Failure_GetObject(Handle_Standard_Failure self) -> Standard_Failure"},
+	 { (char *)"delete_Handle_Standard_Failure", _wrap_delete_Handle_Standard_Failure, METH_VARARGS, (char *)"delete_Handle_Standard_Failure(Handle_Standard_Failure self)"},
+	 { (char *)"Handle_Standard_Failure_swigregister", Handle_Standard_Failure_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Handle_Standard_DomainError", _wrap_new_Handle_Standard_DomainError, METH_VARARGS, (char *)"\n"
+		"Handle_Standard_DomainError()\n"
+		"Handle_Standard_DomainError(Handle_Standard_DomainError aHandle)\n"
+		"new_Handle_Standard_DomainError(Standard_DomainError anItem) -> Handle_Standard_DomainError\n"
+		""},
+	 { (char *)"Handle_Standard_DomainError_Set", _wrap_Handle_Standard_DomainError_Set, METH_VARARGS, (char *)"\n"
+		"Set(Handle_Standard_DomainError aHandle) -> Handle_Standard_DomainError\n"
+		"Handle_Standard_DomainError_Set(Handle_Standard_DomainError self, Standard_DomainError anItem) -> Handle_Standard_DomainError\n"
+		""},
+	 { (char *)"Handle_Standard_DomainError_DownCast", _wrap_Handle_Standard_DomainError_DownCast, METH_VARARGS, (char *)"Handle_Standard_DomainError_DownCast(Handle_Standard_DomainError self, Handle_Standard_Transient AnObject) -> Handle_Standard_DomainError"},
+	 { (char *)"Handle_Standard_DomainError_GetObject", _wrap_Handle_Standard_DomainError_GetObject, METH_VARARGS, (char *)"Handle_Standard_DomainError_GetObject(Handle_Standard_DomainError self) -> Standard_DomainError"},
+	 { (char *)"delete_Handle_Standard_DomainError", _wrap_delete_Handle_Standard_DomainError, METH_VARARGS, (char *)"delete_Handle_Standard_DomainError(Handle_Standard_DomainError self)"},
+	 { (char *)"Handle_Standard_DomainError_swigregister", Handle_Standard_DomainError_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Handle_Standard_RangeError", _wrap_new_Handle_Standard_RangeError, METH_VARARGS, (char *)"\n"
+		"Handle_Standard_RangeError()\n"
+		"Handle_Standard_RangeError(Handle_Standard_RangeError aHandle)\n"
+		"new_Handle_Standard_RangeError(Standard_RangeError anItem) -> Handle_Standard_RangeError\n"
+		""},
+	 { (char *)"Handle_Standard_RangeError_Set", _wrap_Handle_Standard_RangeError_Set, METH_VARARGS, (char *)"\n"
+		"Set(Handle_Standard_RangeError aHandle) -> Handle_Standard_RangeError\n"
+		"Handle_Standard_RangeError_Set(Handle_Standard_RangeError self, Standard_RangeError anItem) -> Handle_Standard_RangeError\n"
+		""},
+	 { (char *)"Handle_Standard_RangeError_DownCast", _wrap_Handle_Standard_RangeError_DownCast, METH_VARARGS, (char *)"Handle_Standard_RangeError_DownCast(Handle_Standard_RangeError self, Handle_Standard_Transient AnObject) -> Handle_Standard_RangeError"},
+	 { (char *)"Handle_Standard_RangeError_GetObject", _wrap_Handle_Standard_RangeError_GetObject, METH_VARARGS, (char *)"Handle_Standard_RangeError_GetObject(Handle_Standard_RangeError self) -> Standard_RangeError"},
+	 { (char *)"delete_Handle_Standard_RangeError", _wrap_delete_Handle_Standard_RangeError, METH_VARARGS, (char *)"delete_Handle_Standard_RangeError(Handle_Standard_RangeError self)"},
+	 { (char *)"Handle_Standard_RangeError_swigregister", Handle_Standard_RangeError_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Handle_Standard_NullValue", _wrap_new_Handle_Standard_NullValue, METH_VARARGS, (char *)"\n"
+		"Handle_Standard_NullValue()\n"
+		"Handle_Standard_NullValue(Handle_Standard_NullValue aHandle)\n"
+		"new_Handle_Standard_NullValue(Standard_NullValue anItem) -> Handle_Standard_NullValue\n"
+		""},
+	 { (char *)"Handle_Standard_NullValue_Set", _wrap_Handle_Standard_NullValue_Set, METH_VARARGS, (char *)"\n"
+		"Set(Handle_Standard_NullValue aHandle) -> Handle_Standard_NullValue\n"
+		"Handle_Standard_NullValue_Set(Handle_Standard_NullValue self, Standard_NullValue anItem) -> Handle_Standard_NullValue\n"
+		""},
+	 { (char *)"Handle_Standard_NullValue_DownCast", _wrap_Handle_Standard_NullValue_DownCast, METH_VARARGS, (char *)"Handle_Standard_NullValue_DownCast(Handle_Standard_NullValue self, Handle_Standard_Transient AnObject) -> Handle_Standard_NullValue"},
+	 { (char *)"Handle_Standard_NullValue_GetObject", _wrap_Handle_Standard_NullValue_GetObject, METH_VARARGS, (char *)"Handle_Standard_NullValue_GetObject(Handle_Standard_NullValue self) -> Standard_NullValue"},
+	 { (char *)"delete_Handle_Standard_NullValue", _wrap_delete_Handle_Standard_NullValue, METH_VARARGS, (char *)"delete_Handle_Standard_NullValue(Handle_Standard_NullValue self)"},
+	 { (char *)"Handle_Standard_NullValue_swigregister", Handle_Standard_NullValue_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Handle_Standard_TypeMismatch", _wrap_new_Handle_Standard_TypeMismatch, METH_VARARGS, (char *)"\n"
+		"Handle_Standard_TypeMismatch()\n"
+		"Handle_Standard_TypeMismatch(Handle_Standard_TypeMismatch aHandle)\n"
+		"new_Handle_Standard_TypeMismatch(Standard_TypeMismatch anItem) -> Handle_Standard_TypeMismatch\n"
+		""},
+	 { (char *)"Handle_Standard_TypeMismatch_Set", _wrap_Handle_Standard_TypeMismatch_Set, METH_VARARGS, (char *)"\n"
+		"Set(Handle_Standard_TypeMismatch aHandle) -> Handle_Standard_TypeMismatch\n"
+		"Handle_Standard_TypeMismatch_Set(Handle_Standard_TypeMismatch self, Standard_TypeMismatch anItem) -> Handle_Standard_TypeMismatch\n"
+		""},
+	 { (char *)"Handle_Standard_TypeMismatch_DownCast", _wrap_Handle_Standard_TypeMismatch_DownCast, METH_VARARGS, (char *)"Handle_Standard_TypeMismatch_DownCast(Handle_Standard_TypeMismatch self, Handle_Standard_Transient AnObject) -> Handle_Standard_TypeMismatch"},
+	 { (char *)"Handle_Standard_TypeMismatch_GetObject", _wrap_Handle_Standard_TypeMismatch_GetObject, METH_VARARGS, (char *)"Handle_Standard_TypeMismatch_GetObject(Handle_Standard_TypeMismatch self) -> Standard_TypeMismatch"},
+	 { (char *)"delete_Handle_Standard_TypeMismatch", _wrap_delete_Handle_Standard_TypeMismatch, METH_VARARGS, (char *)"delete_Handle_Standard_TypeMismatch(Handle_Standard_TypeMismatch self)"},
+	 { (char *)"Handle_Standard_TypeMismatch_swigregister", Handle_Standard_TypeMismatch_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Handle_Standard_Persistent", _wrap_new_Handle_Standard_Persistent, METH_VARARGS, (char *)"\n"
+		"Handle_Standard_Persistent()\n"
+		"Handle_Standard_Persistent(Handle_Standard_Persistent aTid)\n"
+		"new_Handle_Standard_Persistent(Standard_Persistent anItem) -> Handle_Standard_Persistent\n"
+		""},
+	 { (char *)"Handle_Standard_Persistent_DumpToString", _wrap_Handle_Standard_Persistent_DumpToString, METH_VARARGS, (char *)"Handle_Standard_Persistent_DumpToString(Handle_Standard_Persistent self) -> string"},
+	 { (char *)"Handle_Standard_Persistent___eq__", _wrap_Handle_Standard_Persistent___eq__, METH_VARARGS, (char *)"\n"
+		"__eq__(Handle_Standard_Persistent right) -> int\n"
+		"Handle_Standard_Persistent___eq__(Handle_Standard_Persistent self, Standard_Persistent right) -> int\n"
+		""},
+	 { (char *)"Handle_Standard_Persistent___ne__", _wrap_Handle_Standard_Persistent___ne__, METH_VARARGS, (char *)"\n"
+		"__ne__(Handle_Standard_Persistent right) -> int\n"
+		"Handle_Standard_Persistent___ne__(Handle_Standard_Persistent self, Standard_Persistent right) -> int\n"
+		""},
+	 { (char *)"Handle_Standard_Persistent_Nullify", _wrap_Handle_Standard_Persistent_Nullify, METH_VARARGS, (char *)"Handle_Standard_Persistent_Nullify(Handle_Standard_Persistent self)"},
+	 { (char *)"Handle_Standard_Persistent_IsNull", _wrap_Handle_Standard_Persistent_IsNull, METH_VARARGS, (char *)"Handle_Standard_Persistent_IsNull(Handle_Standard_Persistent self) -> Standard_Boolean"},
+	 { (char *)"Handle_Standard_Persistent_Access", _wrap_Handle_Standard_Persistent_Access, METH_VARARGS, (char *)"Handle_Standard_Persistent_Access(Handle_Standard_Persistent self) -> Standard_Persistent"},
+	 { (char *)"Handle_Standard_Persistent_Set", _wrap_Handle_Standard_Persistent_Set, METH_VARARGS, (char *)"\n"
+		"Set(Handle_Standard_Persistent aHandle) -> Handle_Standard_Persistent\n"
+		"Handle_Standard_Persistent_Set(Handle_Standard_Persistent self, Standard_Persistent anItem) -> Handle_Standard_Persistent\n"
+		""},
+	 { (char *)"Handle_Standard_Persistent_DownCast", _wrap_Handle_Standard_Persistent_DownCast, METH_VARARGS, (char *)"Handle_Standard_Persistent_DownCast(Handle_Standard_Persistent self, Handle_Standard_Persistent AnObject) -> Handle_Standard_Persistent"},
+	 { (char *)"Handle_Standard_Persistent_GetObject", _wrap_Handle_Standard_Persistent_GetObject, METH_VARARGS, (char *)"Handle_Standard_Persistent_GetObject(Handle_Standard_Persistent self) -> Standard_Persistent"},
+	 { (char *)"delete_Handle_Standard_Persistent", _wrap_delete_Handle_Standard_Persistent, METH_VARARGS, (char *)"delete_Handle_Standard_Persistent(Handle_Standard_Persistent self)"},
+	 { (char *)"Handle_Standard_Persistent_swigregister", Handle_Standard_Persistent_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Handle_Standard_OutOfRange", _wrap_new_Handle_Standard_OutOfRange, METH_VARARGS, (char *)"\n"
+		"Handle_Standard_OutOfRange()\n"
+		"Handle_Standard_OutOfRange(Handle_Standard_OutOfRange aHandle)\n"
+		"new_Handle_Standard_OutOfRange(Standard_OutOfRange anItem) -> Handle_Standard_OutOfRange\n"
+		""},
+	 { (char *)"Handle_Standard_OutOfRange_Set", _wrap_Handle_Standard_OutOfRange_Set, METH_VARARGS, (char *)"\n"
+		"Set(Handle_Standard_OutOfRange aHandle) -> Handle_Standard_OutOfRange\n"
+		"Handle_Standard_OutOfRange_Set(Handle_Standard_OutOfRange self, Standard_OutOfRange anItem) -> Handle_Standard_OutOfRange\n"
+		""},
+	 { (char *)"Handle_Standard_OutOfRange_DownCast", _wrap_Handle_Standard_OutOfRange_DownCast, METH_VARARGS, (char *)"Handle_Standard_OutOfRange_DownCast(Handle_Standard_OutOfRange self, Handle_Standard_Transient AnObject) -> Handle_Standard_OutOfRange"},
+	 { (char *)"Handle_Standard_OutOfRange_GetObject", _wrap_Handle_Standard_OutOfRange_GetObject, METH_VARARGS, (char *)"Handle_Standard_OutOfRange_GetObject(Handle_Standard_OutOfRange self) -> Standard_OutOfRange"},
+	 { (char *)"delete_Handle_Standard_OutOfRange", _wrap_delete_Handle_Standard_OutOfRange, METH_VARARGS, (char *)"delete_Handle_Standard_OutOfRange(Handle_Standard_OutOfRange self)"},
+	 { (char *)"Handle_Standard_OutOfRange_swigregister", Handle_Standard_OutOfRange_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Handle_Standard_NumericError", _wrap_new_Handle_Standard_NumericError, METH_VARARGS, (char *)"\n"
+		"Handle_Standard_NumericError()\n"
+		"Handle_Standard_NumericError(Handle_Standard_NumericError aHandle)\n"
+		"new_Handle_Standard_NumericError(Standard_NumericError anItem) -> Handle_Standard_NumericError\n"
+		""},
+	 { (char *)"Handle_Standard_NumericError_Set", _wrap_Handle_Standard_NumericError_Set, METH_VARARGS, (char *)"\n"
+		"Set(Handle_Standard_NumericError aHandle) -> Handle_Standard_NumericError\n"
+		"Handle_Standard_NumericError_Set(Handle_Standard_NumericError self, Standard_NumericError anItem) -> Handle_Standard_NumericError\n"
+		""},
+	 { (char *)"Handle_Standard_NumericError_DownCast", _wrap_Handle_Standard_NumericError_DownCast, METH_VARARGS, (char *)"Handle_Standard_NumericError_DownCast(Handle_Standard_NumericError self, Handle_Standard_Transient AnObject) -> Handle_Standard_NumericError"},
+	 { (char *)"Handle_Standard_NumericError_GetObject", _wrap_Handle_Standard_NumericError_GetObject, METH_VARARGS, (char *)"Handle_Standard_NumericError_GetObject(Handle_Standard_NumericError self) -> Standard_NumericError"},
+	 { (char *)"delete_Handle_Standard_NumericError", _wrap_delete_Handle_Standard_NumericError, METH_VARARGS, (char *)"delete_Handle_Standard_NumericError(Handle_Standard_NumericError self)"},
+	 { (char *)"Handle_Standard_NumericError_swigregister", Handle_Standard_NumericError_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Handle_Standard_DivideByZero", _wrap_new_Handle_Standard_DivideByZero, METH_VARARGS, (char *)"\n"
+		"Handle_Standard_DivideByZero()\n"
+		"Handle_Standard_DivideByZero(Handle_Standard_DivideByZero aHandle)\n"
+		"new_Handle_Standard_DivideByZero(Standard_DivideByZero anItem) -> Handle_Standard_DivideByZero\n"
+		""},
+	 { (char *)"Handle_Standard_DivideByZero_Set", _wrap_Handle_Standard_DivideByZero_Set, METH_VARARGS, (char *)"\n"
+		"Set(Handle_Standard_DivideByZero aHandle) -> Handle_Standard_DivideByZero\n"
+		"Handle_Standard_DivideByZero_Set(Handle_Standard_DivideByZero self, Standard_DivideByZero anItem) -> Handle_Standard_DivideByZero\n"
+		""},
+	 { (char *)"Handle_Standard_DivideByZero_DownCast", _wrap_Handle_Standard_DivideByZero_DownCast, METH_VARARGS, (char *)"Handle_Standard_DivideByZero_DownCast(Handle_Standard_DivideByZero self, Handle_Standard_Transient AnObject) -> Handle_Standard_DivideByZero"},
+	 { (char *)"Handle_Standard_DivideByZero_GetObject", _wrap_Handle_Standard_DivideByZero_GetObject, METH_VARARGS, (char *)"Handle_Standard_DivideByZero_GetObject(Handle_Standard_DivideByZero self) -> Standard_DivideByZero"},
+	 { (char *)"delete_Handle_Standard_DivideByZero", _wrap_delete_Handle_Standard_DivideByZero, METH_VARARGS, (char *)"delete_Handle_Standard_DivideByZero(Handle_Standard_DivideByZero self)"},
+	 { (char *)"Handle_Standard_DivideByZero_swigregister", Handle_Standard_DivideByZero_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Handle_Standard_NoMoreObject", _wrap_new_Handle_Standard_NoMoreObject, METH_VARARGS, (char *)"\n"
+		"Handle_Standard_NoMoreObject()\n"
+		"Handle_Standard_NoMoreObject(Handle_Standard_NoMoreObject aHandle)\n"
+		"new_Handle_Standard_NoMoreObject(Standard_NoMoreObject anItem) -> Handle_Standard_NoMoreObject\n"
+		""},
+	 { (char *)"Handle_Standard_NoMoreObject_Set", _wrap_Handle_Standard_NoMoreObject_Set, METH_VARARGS, (char *)"\n"
+		"Set(Handle_Standard_NoMoreObject aHandle) -> Handle_Standard_NoMoreObject\n"
+		"Handle_Standard_NoMoreObject_Set(Handle_Standard_NoMoreObject self, Standard_NoMoreObject anItem) -> Handle_Standard_NoMoreObject\n"
+		""},
+	 { (char *)"Handle_Standard_NoMoreObject_DownCast", _wrap_Handle_Standard_NoMoreObject_DownCast, METH_VARARGS, (char *)"Handle_Standard_NoMoreObject_DownCast(Handle_Standard_NoMoreObject self, Handle_Standard_Transient AnObject) -> Handle_Standard_NoMoreObject"},
+	 { (char *)"Handle_Standard_NoMoreObject_GetObject", _wrap_Handle_Standard_NoMoreObject_GetObject, METH_VARARGS, (char *)"Handle_Standard_NoMoreObject_GetObject(Handle_Standard_NoMoreObject self) -> Standard_NoMoreObject"},
+	 { (char *)"delete_Handle_Standard_NoMoreObject", _wrap_delete_Handle_Standard_NoMoreObject, METH_VARARGS, (char *)"delete_Handle_Standard_NoMoreObject(Handle_Standard_NoMoreObject self)"},
+	 { (char *)"Handle_Standard_NoMoreObject_swigregister", Handle_Standard_NoMoreObject_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Handle_Standard_ProgramError", _wrap_new_Handle_Standard_ProgramError, METH_VARARGS, (char *)"\n"
+		"Handle_Standard_ProgramError()\n"
+		"Handle_Standard_ProgramError(Handle_Standard_ProgramError aHandle)\n"
+		"new_Handle_Standard_ProgramError(Standard_ProgramError anItem) -> Handle_Standard_ProgramError\n"
+		""},
+	 { (char *)"Handle_Standard_ProgramError_Set", _wrap_Handle_Standard_ProgramError_Set, METH_VARARGS, (char *)"\n"
+		"Set(Handle_Standard_ProgramError aHandle) -> Handle_Standard_ProgramError\n"
+		"Handle_Standard_ProgramError_Set(Handle_Standard_ProgramError self, Standard_ProgramError anItem) -> Handle_Standard_ProgramError\n"
+		""},
+	 { (char *)"Handle_Standard_ProgramError_DownCast", _wrap_Handle_Standard_ProgramError_DownCast, METH_VARARGS, (char *)"Handle_Standard_ProgramError_DownCast(Handle_Standard_ProgramError self, Handle_Standard_Transient AnObject) -> Handle_Standard_ProgramError"},
+	 { (char *)"Handle_Standard_ProgramError_GetObject", _wrap_Handle_Standard_ProgramError_GetObject, METH_VARARGS, (char *)"Handle_Standard_ProgramError_GetObject(Handle_Standard_ProgramError self) -> Standard_ProgramError"},
+	 { (char *)"delete_Handle_Standard_ProgramError", _wrap_delete_Handle_Standard_ProgramError, METH_VARARGS, (char *)"delete_Handle_Standard_ProgramError(Handle_Standard_ProgramError self)"},
+	 { (char *)"Handle_Standard_ProgramError_swigregister", Handle_Standard_ProgramError_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Handle_Standard_NotImplemented", _wrap_new_Handle_Standard_NotImplemented, METH_VARARGS, (char *)"\n"
+		"Handle_Standard_NotImplemented()\n"
+		"Handle_Standard_NotImplemented(Handle_Standard_NotImplemented aHandle)\n"
+		"new_Handle_Standard_NotImplemented(Standard_NotImplemented anItem) -> Handle_Standard_NotImplemented\n"
+		""},
+	 { (char *)"Handle_Standard_NotImplemented_Set", _wrap_Handle_Standard_NotImplemented_Set, METH_VARARGS, (char *)"\n"
+		"Set(Handle_Standard_NotImplemented aHandle) -> Handle_Standard_NotImplemented\n"
+		"Handle_Standard_NotImplemented_Set(Handle_Standard_NotImplemented self, Standard_NotImplemented anItem) -> Handle_Standard_NotImplemented\n"
+		""},
+	 { (char *)"Handle_Standard_NotImplemented_DownCast", _wrap_Handle_Standard_NotImplemented_DownCast, METH_VARARGS, (char *)"Handle_Standard_NotImplemented_DownCast(Handle_Standard_NotImplemented self, Handle_Standard_Transient AnObject) -> Handle_Standard_NotImplemented"},
+	 { (char *)"Handle_Standard_NotImplemented_GetObject", _wrap_Handle_Standard_NotImplemented_GetObject, METH_VARARGS, (char *)"Handle_Standard_NotImplemented_GetObject(Handle_Standard_NotImplemented self) -> Standard_NotImplemented"},
+	 { (char *)"delete_Handle_Standard_NotImplemented", _wrap_delete_Handle_Standard_NotImplemented, METH_VARARGS, (char *)"delete_Handle_Standard_NotImplemented(Handle_Standard_NotImplemented self)"},
+	 { (char *)"Handle_Standard_NotImplemented_swigregister", Handle_Standard_NotImplemented_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Handle_Standard_NullObject", _wrap_new_Handle_Standard_NullObject, METH_VARARGS, (char *)"\n"
+		"Handle_Standard_NullObject()\n"
+		"Handle_Standard_NullObject(Handle_Standard_NullObject aHandle)\n"
+		"new_Handle_Standard_NullObject(Standard_NullObject anItem) -> Handle_Standard_NullObject\n"
+		""},
+	 { (char *)"Handle_Standard_NullObject_Set", _wrap_Handle_Standard_NullObject_Set, METH_VARARGS, (char *)"\n"
+		"Set(Handle_Standard_NullObject aHandle) -> Handle_Standard_NullObject\n"
+		"Handle_Standard_NullObject_Set(Handle_Standard_NullObject self, Standard_NullObject anItem) -> Handle_Standard_NullObject\n"
+		""},
+	 { (char *)"Handle_Standard_NullObject_DownCast", _wrap_Handle_Standard_NullObject_DownCast, METH_VARARGS, (char *)"Handle_Standard_NullObject_DownCast(Handle_Standard_NullObject self, Handle_Standard_Transient AnObject) -> Handle_Standard_NullObject"},
+	 { (char *)"Handle_Standard_NullObject_GetObject", _wrap_Handle_Standard_NullObject_GetObject, METH_VARARGS, (char *)"Handle_Standard_NullObject_GetObject(Handle_Standard_NullObject self) -> Standard_NullObject"},
+	 { (char *)"delete_Handle_Standard_NullObject", _wrap_delete_Handle_Standard_NullObject, METH_VARARGS, (char *)"delete_Handle_Standard_NullObject(Handle_Standard_NullObject self)"},
+	 { (char *)"Handle_Standard_NullObject_swigregister", Handle_Standard_NullObject_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Handle_Standard_AbortiveTransaction", _wrap_new_Handle_Standard_AbortiveTransaction, METH_VARARGS, (char *)"\n"
+		"Handle_Standard_AbortiveTransaction()\n"
+		"Handle_Standard_AbortiveTransaction(Handle_Standard_AbortiveTransaction aHandle)\n"
+		"new_Handle_Standard_AbortiveTransaction(Standard_AbortiveTransaction anItem) -> Handle_Standard_AbortiveTransaction\n"
+		""},
+	 { (char *)"Handle_Standard_AbortiveTransaction_Set", _wrap_Handle_Standard_AbortiveTransaction_Set, METH_VARARGS, (char *)"\n"
+		"Set(Handle_Standard_AbortiveTransaction aHandle) -> Handle_Standard_AbortiveTransaction\n"
+		"Handle_Standard_AbortiveTransaction_Set(Handle_Standard_AbortiveTransaction self, Standard_AbortiveTransaction anItem) -> Handle_Standard_AbortiveTransaction\n"
+		""},
+	 { (char *)"Handle_Standard_AbortiveTransaction_DownCast", _wrap_Handle_Standard_AbortiveTransaction_DownCast, METH_VARARGS, (char *)"Handle_Standard_AbortiveTransaction_DownCast(Handle_Standard_AbortiveTransaction self, Handle_Standard_Transient AnObject) -> Handle_Standard_AbortiveTransaction"},
+	 { (char *)"Handle_Standard_AbortiveTransaction_GetObject", _wrap_Handle_Standard_AbortiveTransaction_GetObject, METH_VARARGS, (char *)"Handle_Standard_AbortiveTransaction_GetObject(Handle_Standard_AbortiveTransaction self) -> Standard_AbortiveTransaction"},
+	 { (char *)"delete_Handle_Standard_AbortiveTransaction", _wrap_delete_Handle_Standard_AbortiveTransaction, METH_VARARGS, (char *)"delete_Handle_Standard_AbortiveTransaction(Handle_Standard_AbortiveTransaction self)"},
+	 { (char *)"Handle_Standard_AbortiveTransaction_swigregister", Handle_Standard_AbortiveTransaction_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Handle_Standard_DimensionError", _wrap_new_Handle_Standard_DimensionError, METH_VARARGS, (char *)"\n"
+		"Handle_Standard_DimensionError()\n"
+		"Handle_Standard_DimensionError(Handle_Standard_DimensionError aHandle)\n"
+		"new_Handle_Standard_DimensionError(Standard_DimensionError anItem) -> Handle_Standard_DimensionError\n"
+		""},
+	 { (char *)"Handle_Standard_DimensionError_Set", _wrap_Handle_Standard_DimensionError_Set, METH_VARARGS, (char *)"\n"
+		"Set(Handle_Standard_DimensionError aHandle) -> Handle_Standard_DimensionError\n"
+		"Handle_Standard_DimensionError_Set(Handle_Standard_DimensionError self, Standard_DimensionError anItem) -> Handle_Standard_DimensionError\n"
+		""},
+	 { (char *)"Handle_Standard_DimensionError_DownCast", _wrap_Handle_Standard_DimensionError_DownCast, METH_VARARGS, (char *)"Handle_Standard_DimensionError_DownCast(Handle_Standard_DimensionError self, Handle_Standard_Transient AnObject) -> Handle_Standard_DimensionError"},
+	 { (char *)"Handle_Standard_DimensionError_GetObject", _wrap_Handle_Standard_DimensionError_GetObject, METH_VARARGS, (char *)"Handle_Standard_DimensionError_GetObject(Handle_Standard_DimensionError self) -> Standard_DimensionError"},
+	 { (char *)"delete_Handle_Standard_DimensionError", _wrap_delete_Handle_Standard_DimensionError, METH_VARARGS, (char *)"delete_Handle_Standard_DimensionError(Handle_Standard_DimensionError self)"},
+	 { (char *)"Handle_Standard_DimensionError_swigregister", Handle_Standard_DimensionError_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Handle_Standard_LicenseError", _wrap_new_Handle_Standard_LicenseError, METH_VARARGS, (char *)"\n"
+		"Handle_Standard_LicenseError()\n"
+		"Handle_Standard_LicenseError(Handle_Standard_LicenseError aHandle)\n"
+		"new_Handle_Standard_LicenseError(Standard_LicenseError anItem) -> Handle_Standard_LicenseError\n"
+		""},
+	 { (char *)"Handle_Standard_LicenseError_Set", _wrap_Handle_Standard_LicenseError_Set, METH_VARARGS, (char *)"\n"
+		"Set(Handle_Standard_LicenseError aHandle) -> Handle_Standard_LicenseError\n"
+		"Handle_Standard_LicenseError_Set(Handle_Standard_LicenseError self, Standard_LicenseError anItem) -> Handle_Standard_LicenseError\n"
+		""},
+	 { (char *)"Handle_Standard_LicenseError_DownCast", _wrap_Handle_Standard_LicenseError_DownCast, METH_VARARGS, (char *)"Handle_Standard_LicenseError_DownCast(Handle_Standard_LicenseError self, Handle_Standard_Transient AnObject) -> Handle_Standard_LicenseError"},
+	 { (char *)"Handle_Standard_LicenseError_GetObject", _wrap_Handle_Standard_LicenseError_GetObject, METH_VARARGS, (char *)"Handle_Standard_LicenseError_GetObject(Handle_Standard_LicenseError self) -> Standard_LicenseError"},
+	 { (char *)"delete_Handle_Standard_LicenseError", _wrap_delete_Handle_Standard_LicenseError, METH_VARARGS, (char *)"delete_Handle_Standard_LicenseError(Handle_Standard_LicenseError self)"},
+	 { (char *)"Handle_Standard_LicenseError_swigregister", Handle_Standard_LicenseError_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Handle_Standard_NoSuchObject", _wrap_new_Handle_Standard_NoSuchObject, METH_VARARGS, (char *)"\n"
+		"Handle_Standard_NoSuchObject()\n"
+		"Handle_Standard_NoSuchObject(Handle_Standard_NoSuchObject aHandle)\n"
+		"new_Handle_Standard_NoSuchObject(Standard_NoSuchObject anItem) -> Handle_Standard_NoSuchObject\n"
+		""},
+	 { (char *)"Handle_Standard_NoSuchObject_Set", _wrap_Handle_Standard_NoSuchObject_Set, METH_VARARGS, (char *)"\n"
+		"Set(Handle_Standard_NoSuchObject aHandle) -> Handle_Standard_NoSuchObject\n"
+		"Handle_Standard_NoSuchObject_Set(Handle_Standard_NoSuchObject self, Standard_NoSuchObject anItem) -> Handle_Standard_NoSuchObject\n"
+		""},
+	 { (char *)"Handle_Standard_NoSuchObject_DownCast", _wrap_Handle_Standard_NoSuchObject_DownCast, METH_VARARGS, (char *)"Handle_Standard_NoSuchObject_DownCast(Handle_Standard_NoSuchObject self, Handle_Standard_Transient AnObject) -> Handle_Standard_NoSuchObject"},
+	 { (char *)"Handle_Standard_NoSuchObject_GetObject", _wrap_Handle_Standard_NoSuchObject_GetObject, METH_VARARGS, (char *)"Handle_Standard_NoSuchObject_GetObject(Handle_Standard_NoSuchObject self) -> Standard_NoSuchObject"},
+	 { (char *)"delete_Handle_Standard_NoSuchObject", _wrap_delete_Handle_Standard_NoSuchObject, METH_VARARGS, (char *)"delete_Handle_Standard_NoSuchObject(Handle_Standard_NoSuchObject self)"},
+	 { (char *)"Handle_Standard_NoSuchObject_swigregister", Handle_Standard_NoSuchObject_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Handle_Standard_DimensionMismatch", _wrap_new_Handle_Standard_DimensionMismatch, METH_VARARGS, (char *)"\n"
+		"Handle_Standard_DimensionMismatch()\n"
+		"Handle_Standard_DimensionMismatch(Handle_Standard_DimensionMismatch aHandle)\n"
+		"new_Handle_Standard_DimensionMismatch(Standard_DimensionMismatch anItem) -> Handle_Standard_DimensionMismatch\n"
+		""},
+	 { (char *)"Handle_Standard_DimensionMismatch_Set", _wrap_Handle_Standard_DimensionMismatch_Set, METH_VARARGS, (char *)"\n"
+		"Set(Handle_Standard_DimensionMismatch aHandle) -> Handle_Standard_DimensionMismatch\n"
+		"Handle_Standard_DimensionMismatch_Set(Handle_Standard_DimensionMismatch self, Standard_DimensionMismatch anItem) -> Handle_Standard_DimensionMismatch\n"
+		""},
+	 { (char *)"Handle_Standard_DimensionMismatch_DownCast", _wrap_Handle_Standard_DimensionMismatch_DownCast, METH_VARARGS, (char *)"Handle_Standard_DimensionMismatch_DownCast(Handle_Standard_DimensionMismatch self, Handle_Standard_Transient AnObject) -> Handle_Standard_DimensionMismatch"},
+	 { (char *)"Handle_Standard_DimensionMismatch_GetObject", _wrap_Handle_Standard_DimensionMismatch_GetObject, METH_VARARGS, (char *)"Handle_Standard_DimensionMismatch_GetObject(Handle_Standard_DimensionMismatch self) -> Standard_DimensionMismatch"},
+	 { (char *)"delete_Handle_Standard_DimensionMismatch", _wrap_delete_Handle_Standard_DimensionMismatch, METH_VARARGS, (char *)"delete_Handle_Standard_DimensionMismatch(Handle_Standard_DimensionMismatch self)"},
+	 { (char *)"Handle_Standard_DimensionMismatch_swigregister", Handle_Standard_DimensionMismatch_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Handle_Standard_OutOfMemory", _wrap_new_Handle_Standard_OutOfMemory, METH_VARARGS, (char *)"\n"
+		"Handle_Standard_OutOfMemory()\n"
+		"Handle_Standard_OutOfMemory(Handle_Standard_OutOfMemory aHandle)\n"
+		"new_Handle_Standard_OutOfMemory(Standard_OutOfMemory anItem) -> Handle_Standard_OutOfMemory\n"
+		""},
+	 { (char *)"Handle_Standard_OutOfMemory_Set", _wrap_Handle_Standard_OutOfMemory_Set, METH_VARARGS, (char *)"\n"
+		"Set(Handle_Standard_OutOfMemory aHandle) -> Handle_Standard_OutOfMemory\n"
+		"Handle_Standard_OutOfMemory_Set(Handle_Standard_OutOfMemory self, Standard_OutOfMemory anItem) -> Handle_Standard_OutOfMemory\n"
+		""},
+	 { (char *)"Handle_Standard_OutOfMemory_DownCast", _wrap_Handle_Standard_OutOfMemory_DownCast, METH_VARARGS, (char *)"Handle_Standard_OutOfMemory_DownCast(Handle_Standard_OutOfMemory self, Handle_Standard_Transient AnObject) -> Handle_Standard_OutOfMemory"},
+	 { (char *)"Handle_Standard_OutOfMemory_GetObject", _wrap_Handle_Standard_OutOfMemory_GetObject, METH_VARARGS, (char *)"Handle_Standard_OutOfMemory_GetObject(Handle_Standard_OutOfMemory self) -> Standard_OutOfMemory"},
+	 { (char *)"delete_Handle_Standard_OutOfMemory", _wrap_delete_Handle_Standard_OutOfMemory, METH_VARARGS, (char *)"delete_Handle_Standard_OutOfMemory(Handle_Standard_OutOfMemory self)"},
+	 { (char *)"Handle_Standard_OutOfMemory_swigregister", Handle_Standard_OutOfMemory_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Handle_Standard_Type", _wrap_new_Handle_Standard_Type, METH_VARARGS, (char *)"\n"
+		"Handle_Standard_Type()\n"
+		"Handle_Standard_Type(Handle_Standard_Type aHandle)\n"
+		"new_Handle_Standard_Type(Standard_Type anItem) -> Handle_Standard_Type\n"
+		""},
+	 { (char *)"Handle_Standard_Type_Set", _wrap_Handle_Standard_Type_Set, METH_VARARGS, (char *)"\n"
+		"Set(Handle_Standard_Type aHandle) -> Handle_Standard_Type\n"
+		"Handle_Standard_Type_Set(Handle_Standard_Type self, Standard_Type anItem) -> Handle_Standard_Type\n"
+		""},
+	 { (char *)"Handle_Standard_Type_DownCast", _wrap_Handle_Standard_Type_DownCast, METH_VARARGS, (char *)"Handle_Standard_Type_DownCast(Handle_Standard_Type self, Handle_Standard_Transient AnObject) -> Handle_Standard_Type"},
+	 { (char *)"Handle_Standard_Type_GetObject", _wrap_Handle_Standard_Type_GetObject, METH_VARARGS, (char *)"Handle_Standard_Type_GetObject(Handle_Standard_Type self) -> Standard_Type"},
+	 { (char *)"delete_Handle_Standard_Type", _wrap_delete_Handle_Standard_Type, METH_VARARGS, (char *)"delete_Handle_Standard_Type(Handle_Standard_Type self)"},
+	 { (char *)"Handle_Standard_Type_swigregister", Handle_Standard_Type_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Handle_Standard_Overflow", _wrap_new_Handle_Standard_Overflow, METH_VARARGS, (char *)"\n"
+		"Handle_Standard_Overflow()\n"
+		"Handle_Standard_Overflow(Handle_Standard_Overflow aHandle)\n"
+		"new_Handle_Standard_Overflow(Standard_Overflow anItem) -> Handle_Standard_Overflow\n"
+		""},
+	 { (char *)"Handle_Standard_Overflow_Set", _wrap_Handle_Standard_Overflow_Set, METH_VARARGS, (char *)"\n"
+		"Set(Handle_Standard_Overflow aHandle) -> Handle_Standard_Overflow\n"
+		"Handle_Standard_Overflow_Set(Handle_Standard_Overflow self, Standard_Overflow anItem) -> Handle_Standard_Overflow\n"
+		""},
+	 { (char *)"Handle_Standard_Overflow_DownCast", _wrap_Handle_Standard_Overflow_DownCast, METH_VARARGS, (char *)"Handle_Standard_Overflow_DownCast(Handle_Standard_Overflow self, Handle_Standard_Transient AnObject) -> Handle_Standard_Overflow"},
+	 { (char *)"Handle_Standard_Overflow_GetObject", _wrap_Handle_Standard_Overflow_GetObject, METH_VARARGS, (char *)"Handle_Standard_Overflow_GetObject(Handle_Standard_Overflow self) -> Standard_Overflow"},
+	 { (char *)"delete_Handle_Standard_Overflow", _wrap_delete_Handle_Standard_Overflow, METH_VARARGS, (char *)"delete_Handle_Standard_Overflow(Handle_Standard_Overflow self)"},
+	 { (char *)"Handle_Standard_Overflow_swigregister", Handle_Standard_Overflow_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Handle_Standard_NegativeValue", _wrap_new_Handle_Standard_NegativeValue, METH_VARARGS, (char *)"\n"
+		"Handle_Standard_NegativeValue()\n"
+		"Handle_Standard_NegativeValue(Handle_Standard_NegativeValue aHandle)\n"
+		"new_Handle_Standard_NegativeValue(Standard_NegativeValue anItem) -> Handle_Standard_NegativeValue\n"
+		""},
+	 { (char *)"Handle_Standard_NegativeValue_Set", _wrap_Handle_Standard_NegativeValue_Set, METH_VARARGS, (char *)"\n"
+		"Set(Handle_Standard_NegativeValue aHandle) -> Handle_Standard_NegativeValue\n"
+		"Handle_Standard_NegativeValue_Set(Handle_Standard_NegativeValue self, Standard_NegativeValue anItem) -> Handle_Standard_NegativeValue\n"
+		""},
+	 { (char *)"Handle_Standard_NegativeValue_DownCast", _wrap_Handle_Standard_NegativeValue_DownCast, METH_VARARGS, (char *)"Handle_Standard_NegativeValue_DownCast(Handle_Standard_NegativeValue self, Handle_Standard_Transient AnObject) -> Handle_Standard_NegativeValue"},
+	 { (char *)"Handle_Standard_NegativeValue_GetObject", _wrap_Handle_Standard_NegativeValue_GetObject, METH_VARARGS, (char *)"Handle_Standard_NegativeValue_GetObject(Handle_Standard_NegativeValue self) -> Standard_NegativeValue"},
+	 { (char *)"delete_Handle_Standard_NegativeValue", _wrap_delete_Handle_Standard_NegativeValue, METH_VARARGS, (char *)"delete_Handle_Standard_NegativeValue(Handle_Standard_NegativeValue self)"},
+	 { (char *)"Handle_Standard_NegativeValue_swigregister", Handle_Standard_NegativeValue_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Handle_Standard_ImmutableObject", _wrap_new_Handle_Standard_ImmutableObject, METH_VARARGS, (char *)"\n"
+		"Handle_Standard_ImmutableObject()\n"
+		"Handle_Standard_ImmutableObject(Handle_Standard_ImmutableObject aHandle)\n"
+		"new_Handle_Standard_ImmutableObject(Standard_ImmutableObject anItem) -> Handle_Standard_ImmutableObject\n"
+		""},
+	 { (char *)"Handle_Standard_ImmutableObject_Set", _wrap_Handle_Standard_ImmutableObject_Set, METH_VARARGS, (char *)"\n"
+		"Set(Handle_Standard_ImmutableObject aHandle) -> Handle_Standard_ImmutableObject\n"
+		"Handle_Standard_ImmutableObject_Set(Handle_Standard_ImmutableObject self, Standard_ImmutableObject anItem) -> Handle_Standard_ImmutableObject\n"
+		""},
+	 { (char *)"Handle_Standard_ImmutableObject_DownCast", _wrap_Handle_Standard_ImmutableObject_DownCast, METH_VARARGS, (char *)"Handle_Standard_ImmutableObject_DownCast(Handle_Standard_ImmutableObject self, Handle_Standard_Transient AnObject) -> Handle_Standard_ImmutableObject"},
+	 { (char *)"Handle_Standard_ImmutableObject_GetObject", _wrap_Handle_Standard_ImmutableObject_GetObject, METH_VARARGS, (char *)"Handle_Standard_ImmutableObject_GetObject(Handle_Standard_ImmutableObject self) -> Standard_ImmutableObject"},
+	 { (char *)"delete_Handle_Standard_ImmutableObject", _wrap_delete_Handle_Standard_ImmutableObject, METH_VARARGS, (char *)"delete_Handle_Standard_ImmutableObject(Handle_Standard_ImmutableObject self)"},
+	 { (char *)"Handle_Standard_ImmutableObject_swigregister", Handle_Standard_ImmutableObject_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Handle_Standard_Underflow", _wrap_new_Handle_Standard_Underflow, METH_VARARGS, (char *)"\n"
+		"Handle_Standard_Underflow()\n"
+		"Handle_Standard_Underflow(Handle_Standard_Underflow aHandle)\n"
+		"new_Handle_Standard_Underflow(Standard_Underflow anItem) -> Handle_Standard_Underflow\n"
+		""},
+	 { (char *)"Handle_Standard_Underflow_Set", _wrap_Handle_Standard_Underflow_Set, METH_VARARGS, (char *)"\n"
+		"Set(Handle_Standard_Underflow aHandle) -> Handle_Standard_Underflow\n"
+		"Handle_Standard_Underflow_Set(Handle_Standard_Underflow self, Standard_Underflow anItem) -> Handle_Standard_Underflow\n"
+		""},
+	 { (char *)"Handle_Standard_Underflow_DownCast", _wrap_Handle_Standard_Underflow_DownCast, METH_VARARGS, (char *)"Handle_Standard_Underflow_DownCast(Handle_Standard_Underflow self, Handle_Standard_Transient AnObject) -> Handle_Standard_Underflow"},
+	 { (char *)"Handle_Standard_Underflow_GetObject", _wrap_Handle_Standard_Underflow_GetObject, METH_VARARGS, (char *)"Handle_Standard_Underflow_GetObject(Handle_Standard_Underflow self) -> Standard_Underflow"},
+	 { (char *)"delete_Handle_Standard_Underflow", _wrap_delete_Handle_Standard_Underflow, METH_VARARGS, (char *)"delete_Handle_Standard_Underflow(Handle_Standard_Underflow self)"},
+	 { (char *)"Handle_Standard_Underflow_swigregister", Handle_Standard_Underflow_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Handle_Standard_ConstructionError", _wrap_new_Handle_Standard_ConstructionError, METH_VARARGS, (char *)"\n"
+		"Handle_Standard_ConstructionError()\n"
+		"Handle_Standard_ConstructionError(Handle_Standard_ConstructionError aHandle)\n"
+		"new_Handle_Standard_ConstructionError(Standard_ConstructionError anItem) -> Handle_Standard_ConstructionError\n"
+		""},
+	 { (char *)"Handle_Standard_ConstructionError_Set", _wrap_Handle_Standard_ConstructionError_Set, METH_VARARGS, (char *)"\n"
+		"Set(Handle_Standard_ConstructionError aHandle) -> Handle_Standard_ConstructionError\n"
+		"Handle_Standard_ConstructionError_Set(Handle_Standard_ConstructionError self, Standard_ConstructionError anItem) -> Handle_Standard_ConstructionError\n"
+		""},
+	 { (char *)"Handle_Standard_ConstructionError_DownCast", _wrap_Handle_Standard_ConstructionError_DownCast, METH_VARARGS, (char *)"Handle_Standard_ConstructionError_DownCast(Handle_Standard_ConstructionError self, Handle_Standard_Transient AnObject) -> Handle_Standard_ConstructionError"},
+	 { (char *)"Handle_Standard_ConstructionError_GetObject", _wrap_Handle_Standard_ConstructionError_GetObject, METH_VARARGS, (char *)"Handle_Standard_ConstructionError_GetObject(Handle_Standard_ConstructionError self) -> Standard_ConstructionError"},
+	 { (char *)"delete_Handle_Standard_ConstructionError", _wrap_delete_Handle_Standard_ConstructionError, METH_VARARGS, (char *)"delete_Handle_Standard_ConstructionError(Handle_Standard_ConstructionError self)"},
+	 { (char *)"Handle_Standard_ConstructionError_swigregister", Handle_Standard_ConstructionError_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Handle_Standard_LicenseNotFound", _wrap_new_Handle_Standard_LicenseNotFound, METH_VARARGS, (char *)"\n"
+		"Handle_Standard_LicenseNotFound()\n"
+		"Handle_Standard_LicenseNotFound(Handle_Standard_LicenseNotFound aHandle)\n"
+		"new_Handle_Standard_LicenseNotFound(Standard_LicenseNotFound anItem) -> Handle_Standard_LicenseNotFound\n"
+		""},
+	 { (char *)"Handle_Standard_LicenseNotFound_Set", _wrap_Handle_Standard_LicenseNotFound_Set, METH_VARARGS, (char *)"\n"
+		"Set(Handle_Standard_LicenseNotFound aHandle) -> Handle_Standard_LicenseNotFound\n"
+		"Handle_Standard_LicenseNotFound_Set(Handle_Standard_LicenseNotFound self, Standard_LicenseNotFound anItem) -> Handle_Standard_LicenseNotFound\n"
+		""},
+	 { (char *)"Handle_Standard_LicenseNotFound_DownCast", _wrap_Handle_Standard_LicenseNotFound_DownCast, METH_VARARGS, (char *)"Handle_Standard_LicenseNotFound_DownCast(Handle_Standard_LicenseNotFound self, Handle_Standard_Transient AnObject) -> Handle_Standard_LicenseNotFound"},
+	 { (char *)"Handle_Standard_LicenseNotFound_GetObject", _wrap_Handle_Standard_LicenseNotFound_GetObject, METH_VARARGS, (char *)"Handle_Standard_LicenseNotFound_GetObject(Handle_Standard_LicenseNotFound self) -> Standard_LicenseNotFound"},
+	 { (char *)"delete_Handle_Standard_LicenseNotFound", _wrap_delete_Handle_Standard_LicenseNotFound, METH_VARARGS, (char *)"delete_Handle_Standard_LicenseNotFound(Handle_Standard_LicenseNotFound self)"},
+	 { (char *)"Handle_Standard_LicenseNotFound_swigregister", Handle_Standard_LicenseNotFound_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Handle_Standard_MultiplyDefined", _wrap_new_Handle_Standard_MultiplyDefined, METH_VARARGS, (char *)"\n"
+		"Handle_Standard_MultiplyDefined()\n"
+		"Handle_Standard_MultiplyDefined(Handle_Standard_MultiplyDefined aHandle)\n"
+		"new_Handle_Standard_MultiplyDefined(Standard_MultiplyDefined anItem) -> Handle_Standard_MultiplyDefined\n"
+		""},
+	 { (char *)"Handle_Standard_MultiplyDefined_Set", _wrap_Handle_Standard_MultiplyDefined_Set, METH_VARARGS, (char *)"\n"
+		"Set(Handle_Standard_MultiplyDefined aHandle) -> Handle_Standard_MultiplyDefined\n"
+		"Handle_Standard_MultiplyDefined_Set(Handle_Standard_MultiplyDefined self, Standard_MultiplyDefined anItem) -> Handle_Standard_MultiplyDefined\n"
+		""},
+	 { (char *)"Handle_Standard_MultiplyDefined_DownCast", _wrap_Handle_Standard_MultiplyDefined_DownCast, METH_VARARGS, (char *)"Handle_Standard_MultiplyDefined_DownCast(Handle_Standard_MultiplyDefined self, Handle_Standard_Transient AnObject) -> Handle_Standard_MultiplyDefined"},
+	 { (char *)"Handle_Standard_MultiplyDefined_GetObject", _wrap_Handle_Standard_MultiplyDefined_GetObject, METH_VARARGS, (char *)"Handle_Standard_MultiplyDefined_GetObject(Handle_Standard_MultiplyDefined self) -> Standard_MultiplyDefined"},
+	 { (char *)"delete_Handle_Standard_MultiplyDefined", _wrap_delete_Handle_Standard_MultiplyDefined, METH_VARARGS, (char *)"delete_Handle_Standard_MultiplyDefined(Handle_Standard_MultiplyDefined self)"},
+	 { (char *)"Handle_Standard_MultiplyDefined_swigregister", Handle_Standard_MultiplyDefined_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Handle_Standard_TooManyUsers", _wrap_new_Handle_Standard_TooManyUsers, METH_VARARGS, (char *)"\n"
+		"Handle_Standard_TooManyUsers()\n"
+		"Handle_Standard_TooManyUsers(Handle_Standard_TooManyUsers aHandle)\n"
+		"new_Handle_Standard_TooManyUsers(Standard_TooManyUsers anItem) -> Handle_Standard_TooManyUsers\n"
+		""},
+	 { (char *)"Handle_Standard_TooManyUsers_Set", _wrap_Handle_Standard_TooManyUsers_Set, METH_VARARGS, (char *)"\n"
+		"Set(Handle_Standard_TooManyUsers aHandle) -> Handle_Standard_TooManyUsers\n"
+		"Handle_Standard_TooManyUsers_Set(Handle_Standard_TooManyUsers self, Standard_TooManyUsers anItem) -> Handle_Standard_TooManyUsers\n"
+		""},
+	 { (char *)"Handle_Standard_TooManyUsers_DownCast", _wrap_Handle_Standard_TooManyUsers_DownCast, METH_VARARGS, (char *)"Handle_Standard_TooManyUsers_DownCast(Handle_Standard_TooManyUsers self, Handle_Standard_Transient AnObject) -> Handle_Standard_TooManyUsers"},
+	 { (char *)"Handle_Standard_TooManyUsers_GetObject", _wrap_Handle_Standard_TooManyUsers_GetObject, METH_VARARGS, (char *)"Handle_Standard_TooManyUsers_GetObject(Handle_Standard_TooManyUsers self) -> Standard_TooManyUsers"},
+	 { (char *)"delete_Handle_Standard_TooManyUsers", _wrap_delete_Handle_Standard_TooManyUsers, METH_VARARGS, (char *)"delete_Handle_Standard_TooManyUsers(Handle_Standard_TooManyUsers self)"},
+	 { (char *)"Handle_Standard_TooManyUsers_swigregister", Handle_Standard_TooManyUsers_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Standard_Transient", _wrap_new_Standard_Transient, METH_VARARGS, (char *)"new_Standard_Transient() -> Standard_Transient"},
+	 { (char *)"Standard_Transient_Delete", _wrap_Standard_Transient_Delete, METH_VARARGS, (char *)"Standard_Transient_Delete(Standard_Transient self)"},
+	 { (char *)"Standard_Transient_HashCode", _wrap_Standard_Transient_HashCode, METH_VARARGS, (char *)"Standard_Transient_HashCode(Standard_Transient self, Standard_Integer Upper) -> Standard_Integer"},
+	 { (char *)"Standard_Transient_ShallowDumpToString", _wrap_Standard_Transient_ShallowDumpToString, METH_VARARGS, (char *)"Standard_Transient_ShallowDumpToString(Standard_Transient self) -> string"},
+	 { (char *)"Standard_Transient_DynamicType", _wrap_Standard_Transient_DynamicType, METH_VARARGS, (char *)"Standard_Transient_DynamicType(Standard_Transient self) -> Handle_Standard_Type"},
+	 { (char *)"Standard_Transient_IsInstance", _wrap_Standard_Transient_IsInstance, METH_VARARGS, (char *)"\n"
+		"IsInstance(Handle_Standard_Type theType) -> Standard_Boolean\n"
+		"Standard_Transient_IsInstance(Standard_Transient self, char theTypeName) -> Standard_Boolean\n"
+		""},
+	 { (char *)"Standard_Transient_IsKind", _wrap_Standard_Transient_IsKind, METH_VARARGS, (char *)"\n"
+		"IsKind(Handle_Standard_Type theType) -> Standard_Boolean\n"
+		"Standard_Transient_IsKind(Standard_Transient self, char theTypeName) -> Standard_Boolean\n"
+		""},
+	 { (char *)"Standard_Transient_This", _wrap_Standard_Transient_This, METH_VARARGS, (char *)"Standard_Transient_This(Standard_Transient self) -> Handle_Standard_Transient"},
+	 { (char *)"Standard_Transient_GetRefCount", _wrap_Standard_Transient_GetRefCount, METH_VARARGS, (char *)"Standard_Transient_GetRefCount(Standard_Transient self) -> Standard_Integer"},
+	 { (char *)"Standard_Transient_GetHandle", _wrap_Standard_Transient_GetHandle, METH_VARARGS, (char *)"Standard_Transient_GetHandle(Standard_Transient self) -> Handle_Standard_Transient"},
+	 { (char *)"Standard_Transient___hash__", _wrap_Standard_Transient___hash__, METH_VARARGS, (char *)"Standard_Transient___hash__(Standard_Transient self) -> Standard_Integer"},
+	 { (char *)"delete_Standard_Transient", _wrap_delete_Standard_Transient, METH_VARARGS, (char *)"delete_Standard_Transient(Standard_Transient self)"},
+	 { (char *)"Standard_Transient_swigregister", Standard_Transient_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Standard_Failure", _wrap_new_Standard_Failure, METH_VARARGS, (char *)"\n"
+		"Standard_Failure()\n"
+		"Standard_Failure(Standard_Failure f)\n"
+		"new_Standard_Failure(char aString) -> Standard_Failure\n"
+		""},
+	 { (char *)"Standard_Failure_Destroy", _wrap_Standard_Failure_Destroy, METH_VARARGS, (char *)"Standard_Failure_Destroy(Standard_Failure self)"},
+	 { (char *)"Standard_Failure_PrintToString", _wrap_Standard_Failure_PrintToString, METH_VARARGS, (char *)"Standard_Failure_PrintToString(Standard_Failure self) -> string"},
+	 { (char *)"Standard_Failure_GetMessageString", _wrap_Standard_Failure_GetMessageString, METH_VARARGS, (char *)"Standard_Failure_GetMessageString(Standard_Failure self) -> Standard_CString"},
+	 { (char *)"Standard_Failure_SetMessageString", _wrap_Standard_Failure_SetMessageString, METH_VARARGS, (char *)"Standard_Failure_SetMessageString(Standard_Failure self, char aMessage)"},
+	 { (char *)"Standard_Failure_Reraise", _wrap_Standard_Failure_Reraise, METH_VARARGS, (char *)"\n"
+		"Reraise()\n"
+		"Standard_Failure_Reraise(Standard_Failure self, char aMessage)\n"
+		""},
+	 { (char *)"Standard_Failure_Raise", _wrap_Standard_Failure_Raise, METH_VARARGS, (char *)"\n"
+		"Raise(char aMessage=\"\")\n"
+		"Raise()\n"
+		"Standard_Failure_Raise(Standard_Failure self, Standard_SStream aReason)\n"
+		""},
+	 { (char *)"Standard_Failure_NewInstance", _wrap_Standard_Failure_NewInstance, METH_VARARGS, (char *)"Standard_Failure_NewInstance(Standard_Failure self, char aMessage) -> Handle_Standard_Failure"},
+	 { (char *)"Standard_Failure_Jump", _wrap_Standard_Failure_Jump, METH_VARARGS, (char *)"Standard_Failure_Jump(Standard_Failure self)"},
+	 { (char *)"Standard_Failure_Caught", _wrap_Standard_Failure_Caught, METH_VARARGS, (char *)"Standard_Failure_Caught(Standard_Failure self) -> Handle_Standard_Failure"},
+	 { (char *)"Standard_Failure_GetHandle", _wrap_Standard_Failure_GetHandle, METH_VARARGS, (char *)"Standard_Failure_GetHandle(Standard_Failure self) -> Handle_Standard_Failure"},
+	 { (char *)"Standard_Failure___hash__", _wrap_Standard_Failure___hash__, METH_VARARGS, (char *)"Standard_Failure___hash__(Standard_Failure self) -> Standard_Integer"},
+	 { (char *)"delete_Standard_Failure", _wrap_delete_Standard_Failure, METH_VARARGS, (char *)"delete_Standard_Failure(Standard_Failure self)"},
+	 { (char *)"Standard_Failure_swigregister", Standard_Failure_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Standard_LicenseError", _wrap_new_Standard_LicenseError, METH_VARARGS, (char *)"\n"
+		"Standard_LicenseError()\n"
+		"new_Standard_LicenseError(char AString) -> Standard_LicenseError\n"
+		""},
+	 { (char *)"Standard_LicenseError_NewInstance", _wrap_Standard_LicenseError_NewInstance, METH_VARARGS, (char *)"Standard_LicenseError_NewInstance(Standard_LicenseError self, char aMessage) -> Handle_Standard_LicenseError"},
+	 { (char *)"Standard_LicenseError_GetHandle", _wrap_Standard_LicenseError_GetHandle, METH_VARARGS, (char *)"Standard_LicenseError_GetHandle(Standard_LicenseError self) -> Handle_Standard_LicenseError"},
+	 { (char *)"Standard_LicenseError___hash__", _wrap_Standard_LicenseError___hash__, METH_VARARGS, (char *)"Standard_LicenseError___hash__(Standard_LicenseError self) -> Standard_Integer"},
+	 { (char *)"delete_Standard_LicenseError", _wrap_delete_Standard_LicenseError, METH_VARARGS, (char *)"delete_Standard_LicenseError(Standard_LicenseError self)"},
+	 { (char *)"Standard_LicenseError_swigregister", Standard_LicenseError_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Standard_DomainError", _wrap_new_Standard_DomainError, METH_VARARGS, (char *)"\n"
+		"Standard_DomainError()\n"
+		"new_Standard_DomainError(char AString) -> Standard_DomainError\n"
+		""},
+	 { (char *)"Standard_DomainError_Raise", _wrap_Standard_DomainError_Raise, METH_VARARGS, (char *)"\n"
+		"Raise(char aMessage=\"\")\n"
+		"Raise()\n"
+		"Standard_DomainError_Raise(Standard_DomainError self, Standard_SStream aReason)\n"
+		""},
+	 { (char *)"Standard_DomainError_NewInstance", _wrap_Standard_DomainError_NewInstance, METH_VARARGS, (char *)"Standard_DomainError_NewInstance(Standard_DomainError self, char aMessage) -> Handle_Standard_DomainError"},
+	 { (char *)"Standard_DomainError_DynamicType", _wrap_Standard_DomainError_DynamicType, METH_VARARGS, (char *)"Standard_DomainError_DynamicType(Standard_DomainError self) -> Handle_Standard_Type"},
+	 { (char *)"Standard_DomainError_GetHandle", _wrap_Standard_DomainError_GetHandle, METH_VARARGS, (char *)"Standard_DomainError_GetHandle(Standard_DomainError self) -> Handle_Standard_DomainError"},
+	 { (char *)"Standard_DomainError___hash__", _wrap_Standard_DomainError___hash__, METH_VARARGS, (char *)"Standard_DomainError___hash__(Standard_DomainError self) -> Standard_Integer"},
+	 { (char *)"delete_Standard_DomainError", _wrap_delete_Standard_DomainError, METH_VARARGS, (char *)"delete_Standard_DomainError(Standard_DomainError self)"},
+	 { (char *)"Standard_DomainError_swigregister", Standard_DomainError_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Standard_NoSuchObject", _wrap_new_Standard_NoSuchObject, METH_VARARGS, (char *)"\n"
+		"Standard_NoSuchObject()\n"
+		"new_Standard_NoSuchObject(char AString) -> Standard_NoSuchObject\n"
+		""},
+	 { (char *)"Standard_NoSuchObject_NewInstance", _wrap_Standard_NoSuchObject_NewInstance, METH_VARARGS, (char *)"Standard_NoSuchObject_NewInstance(Standard_NoSuchObject self, char aMessage) -> Handle_Standard_NoSuchObject"},
+	 { (char *)"Standard_NoSuchObject_GetHandle", _wrap_Standard_NoSuchObject_GetHandle, METH_VARARGS, (char *)"Standard_NoSuchObject_GetHandle(Standard_NoSuchObject self) -> Handle_Standard_NoSuchObject"},
+	 { (char *)"Standard_NoSuchObject___hash__", _wrap_Standard_NoSuchObject___hash__, METH_VARARGS, (char *)"Standard_NoSuchObject___hash__(Standard_NoSuchObject self) -> Standard_Integer"},
+	 { (char *)"delete_Standard_NoSuchObject", _wrap_delete_Standard_NoSuchObject, METH_VARARGS, (char *)"delete_Standard_NoSuchObject(Standard_NoSuchObject self)"},
+	 { (char *)"Standard_NoSuchObject_swigregister", Standard_NoSuchObject_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Standard_RangeError", _wrap_new_Standard_RangeError, METH_VARARGS, (char *)"\n"
+		"Standard_RangeError()\n"
+		"new_Standard_RangeError(char AString) -> Standard_RangeError\n"
+		""},
+	 { (char *)"Standard_RangeError_Raise", _wrap_Standard_RangeError_Raise, METH_VARARGS, (char *)"\n"
+		"Raise(char aMessage=\"\")\n"
+		"Raise()\n"
+		"Standard_RangeError_Raise(Standard_RangeError self, Standard_SStream aReason)\n"
+		""},
+	 { (char *)"Standard_RangeError_NewInstance", _wrap_Standard_RangeError_NewInstance, METH_VARARGS, (char *)"Standard_RangeError_NewInstance(Standard_RangeError self, char aMessage) -> Handle_Standard_RangeError"},
+	 { (char *)"Standard_RangeError_DynamicType", _wrap_Standard_RangeError_DynamicType, METH_VARARGS, (char *)"Standard_RangeError_DynamicType(Standard_RangeError self) -> Handle_Standard_Type"},
+	 { (char *)"Standard_RangeError_GetHandle", _wrap_Standard_RangeError_GetHandle, METH_VARARGS, (char *)"Standard_RangeError_GetHandle(Standard_RangeError self) -> Handle_Standard_RangeError"},
+	 { (char *)"Standard_RangeError___hash__", _wrap_Standard_RangeError___hash__, METH_VARARGS, (char *)"Standard_RangeError___hash__(Standard_RangeError self) -> Standard_Integer"},
+	 { (char *)"delete_Standard_RangeError", _wrap_delete_Standard_RangeError, METH_VARARGS, (char *)"delete_Standard_RangeError(Standard_RangeError self)"},
+	 { (char *)"Standard_RangeError_swigregister", Standard_RangeError_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Standard_NullValue", _wrap_new_Standard_NullValue, METH_VARARGS, (char *)"\n"
+		"Standard_NullValue()\n"
+		"new_Standard_NullValue(char AString) -> Standard_NullValue\n"
+		""},
+	 { (char *)"Standard_NullValue_NewInstance", _wrap_Standard_NullValue_NewInstance, METH_VARARGS, (char *)"Standard_NullValue_NewInstance(Standard_NullValue self, char aMessage) -> Handle_Standard_NullValue"},
+	 { (char *)"Standard_NullValue_GetHandle", _wrap_Standard_NullValue_GetHandle, METH_VARARGS, (char *)"Standard_NullValue_GetHandle(Standard_NullValue self) -> Handle_Standard_NullValue"},
+	 { (char *)"Standard_NullValue___hash__", _wrap_Standard_NullValue___hash__, METH_VARARGS, (char *)"Standard_NullValue___hash__(Standard_NullValue self) -> Standard_Integer"},
+	 { (char *)"delete_Standard_NullValue", _wrap_delete_Standard_NullValue, METH_VARARGS, (char *)"delete_Standard_NullValue(Standard_NullValue self)"},
+	 { (char *)"Standard_NullValue_swigregister", Standard_NullValue_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Standard_ConstructionError", _wrap_new_Standard_ConstructionError, METH_VARARGS, (char *)"\n"
+		"Standard_ConstructionError()\n"
+		"new_Standard_ConstructionError(char AString) -> Standard_ConstructionError\n"
+		""},
+	 { (char *)"Standard_ConstructionError_Raise", _wrap_Standard_ConstructionError_Raise, METH_VARARGS, (char *)"\n"
+		"Raise(char aMessage=\"\")\n"
+		"Raise()\n"
+		"Standard_ConstructionError_Raise(Standard_ConstructionError self, Standard_SStream aReason)\n"
+		""},
+	 { (char *)"Standard_ConstructionError_NewInstance", _wrap_Standard_ConstructionError_NewInstance, METH_VARARGS, (char *)"Standard_ConstructionError_NewInstance(Standard_ConstructionError self, char aMessage) -> Handle_Standard_ConstructionError"},
+	 { (char *)"Standard_ConstructionError_DynamicType", _wrap_Standard_ConstructionError_DynamicType, METH_VARARGS, (char *)"Standard_ConstructionError_DynamicType(Standard_ConstructionError self) -> Handle_Standard_Type"},
+	 { (char *)"Standard_ConstructionError_GetHandle", _wrap_Standard_ConstructionError_GetHandle, METH_VARARGS, (char *)"Standard_ConstructionError_GetHandle(Standard_ConstructionError self) -> Handle_Standard_ConstructionError"},
+	 { (char *)"Standard_ConstructionError___hash__", _wrap_Standard_ConstructionError___hash__, METH_VARARGS, (char *)"Standard_ConstructionError___hash__(Standard_ConstructionError self) -> Standard_Integer"},
+	 { (char *)"delete_Standard_ConstructionError", _wrap_delete_Standard_ConstructionError, METH_VARARGS, (char *)"delete_Standard_ConstructionError(Standard_ConstructionError self)"},
+	 { (char *)"Standard_ConstructionError_swigregister", Standard_ConstructionError_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Standard_NumericError", _wrap_new_Standard_NumericError, METH_VARARGS, (char *)"\n"
+		"Standard_NumericError()\n"
+		"new_Standard_NumericError(char AString) -> Standard_NumericError\n"
+		""},
+	 { (char *)"Standard_NumericError_Raise", _wrap_Standard_NumericError_Raise, METH_VARARGS, (char *)"\n"
+		"Raise(char aMessage=\"\")\n"
+		"Raise()\n"
+		"Standard_NumericError_Raise(Standard_NumericError self, Standard_SStream aReason)\n"
+		""},
+	 { (char *)"Standard_NumericError_NewInstance", _wrap_Standard_NumericError_NewInstance, METH_VARARGS, (char *)"Standard_NumericError_NewInstance(Standard_NumericError self, char aMessage) -> Handle_Standard_NumericError"},
+	 { (char *)"Standard_NumericError_DynamicType", _wrap_Standard_NumericError_DynamicType, METH_VARARGS, (char *)"Standard_NumericError_DynamicType(Standard_NumericError self) -> Handle_Standard_Type"},
+	 { (char *)"Standard_NumericError_GetHandle", _wrap_Standard_NumericError_GetHandle, METH_VARARGS, (char *)"Standard_NumericError_GetHandle(Standard_NumericError self) -> Handle_Standard_NumericError"},
+	 { (char *)"Standard_NumericError___hash__", _wrap_Standard_NumericError___hash__, METH_VARARGS, (char *)"Standard_NumericError___hash__(Standard_NumericError self) -> Standard_Integer"},
+	 { (char *)"delete_Standard_NumericError", _wrap_delete_Standard_NumericError, METH_VARARGS, (char *)"delete_Standard_NumericError(Standard_NumericError self)"},
+	 { (char *)"Standard_NumericError_swigregister", Standard_NumericError_swigregister, METH_VARARGS, NULL},
+	 { (char *)"Standard_MMgrRoot_Allocate", _wrap_Standard_MMgrRoot_Allocate, METH_VARARGS, (char *)"Standard_MMgrRoot_Allocate(Standard_MMgrRoot self, Standard_Size theSize) -> Standard_Address"},
+	 { (char *)"Standard_MMgrRoot_Reallocate", _wrap_Standard_MMgrRoot_Reallocate, METH_VARARGS, (char *)"Standard_MMgrRoot_Reallocate(Standard_MMgrRoot self, Standard_Address aPtr, Standard_Size theSize) -> Standard_Address"},
+	 { (char *)"Standard_MMgrRoot_Free", _wrap_Standard_MMgrRoot_Free, METH_VARARGS, (char *)"Standard_MMgrRoot_Free(Standard_MMgrRoot self, Standard_Address aPtr)"},
+	 { (char *)"Standard_MMgrRoot_Purge", _wrap_Standard_MMgrRoot_Purge, METH_VARARGS, (char *)"\n"
+		"Purge(Standard_Boolean ?=0) -> Standard_Integer\n"
+		"Standard_MMgrRoot_Purge(Standard_MMgrRoot self) -> Standard_Integer\n"
+		""},
+	 { (char *)"Standard_MMgrRoot_SetReentrant", _wrap_Standard_MMgrRoot_SetReentrant, METH_VARARGS, (char *)"Standard_MMgrRoot_SetReentrant(Standard_MMgrRoot self, Standard_Boolean ?)"},
+	 { (char *)"delete_Standard_MMgrRoot", _wrap_delete_Standard_MMgrRoot, METH_VARARGS, (char *)"delete_Standard_MMgrRoot(Standard_MMgrRoot self)"},
+	 { (char *)"Standard_MMgrRoot_swigregister", Standard_MMgrRoot_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Standard_MMgrRaw", _wrap_new_Standard_MMgrRaw, METH_VARARGS, (char *)"\n"
+		"Standard_MMgrRaw(Standard_Boolean aClear=0)\n"
+		"new_Standard_MMgrRaw() -> Standard_MMgrRaw\n"
+		""},
+	 { (char *)"Standard_MMgrRaw_Allocate", _wrap_Standard_MMgrRaw_Allocate, METH_VARARGS, (char *)"Standard_MMgrRaw_Allocate(Standard_MMgrRaw self, Standard_Size aSize) -> Standard_Address"},
+	 { (char *)"Standard_MMgrRaw_Reallocate", _wrap_Standard_MMgrRaw_Reallocate, METH_VARARGS, (char *)"Standard_MMgrRaw_Reallocate(Standard_MMgrRaw self, Standard_Address aPtr, Standard_Size aSize) -> Standard_Address"},
+	 { (char *)"Standard_MMgrRaw_Free", _wrap_Standard_MMgrRaw_Free, METH_VARARGS, (char *)"Standard_MMgrRaw_Free(Standard_MMgrRaw self, Standard_Address arg0)"},
+	 { (char *)"delete_Standard_MMgrRaw", _wrap_delete_Standard_MMgrRaw, METH_VARARGS, (char *)"delete_Standard_MMgrRaw(Standard_MMgrRaw self)"},
+	 { (char *)"Standard_MMgrRaw_swigregister", Standard_MMgrRaw_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Standard_NoMoreObject", _wrap_new_Standard_NoMoreObject, METH_VARARGS, (char *)"\n"
+		"Standard_NoMoreObject()\n"
+		"new_Standard_NoMoreObject(char AString) -> Standard_NoMoreObject\n"
+		""},
+	 { (char *)"Standard_NoMoreObject_Raise", _wrap_Standard_NoMoreObject_Raise, METH_VARARGS, (char *)"\n"
+		"Raise(char aMessage=\"\")\n"
+		"Raise()\n"
+		"Standard_NoMoreObject_Raise(Standard_NoMoreObject self, Standard_SStream aReason)\n"
+		""},
+	 { (char *)"Standard_NoMoreObject_NewInstance", _wrap_Standard_NoMoreObject_NewInstance, METH_VARARGS, (char *)"Standard_NoMoreObject_NewInstance(Standard_NoMoreObject self, char aMessage) -> Handle_Standard_NoMoreObject"},
+	 { (char *)"Standard_NoMoreObject_DynamicType", _wrap_Standard_NoMoreObject_DynamicType, METH_VARARGS, (char *)"Standard_NoMoreObject_DynamicType(Standard_NoMoreObject self) -> Handle_Standard_Type"},
+	 { (char *)"Standard_NoMoreObject_GetHandle", _wrap_Standard_NoMoreObject_GetHandle, METH_VARARGS, (char *)"Standard_NoMoreObject_GetHandle(Standard_NoMoreObject self) -> Handle_Standard_NoMoreObject"},
+	 { (char *)"Standard_NoMoreObject___hash__", _wrap_Standard_NoMoreObject___hash__, METH_VARARGS, (char *)"Standard_NoMoreObject___hash__(Standard_NoMoreObject self) -> Standard_Integer"},
+	 { (char *)"delete_Standard_NoMoreObject", _wrap_delete_Standard_NoMoreObject, METH_VARARGS, (char *)"delete_Standard_NoMoreObject(Standard_NoMoreObject self)"},
+	 { (char *)"Standard_NoMoreObject_swigregister", Standard_NoMoreObject_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Standard_ProgramError", _wrap_new_Standard_ProgramError, METH_VARARGS, (char *)"\n"
+		"Standard_ProgramError()\n"
+		"new_Standard_ProgramError(char AString) -> Standard_ProgramError\n"
+		""},
+	 { (char *)"Standard_ProgramError_Raise", _wrap_Standard_ProgramError_Raise, METH_VARARGS, (char *)"\n"
+		"Raise(char aMessage=\"\")\n"
+		"Raise()\n"
+		"Standard_ProgramError_Raise(Standard_ProgramError self, Standard_SStream aReason)\n"
+		""},
+	 { (char *)"Standard_ProgramError_NewInstance", _wrap_Standard_ProgramError_NewInstance, METH_VARARGS, (char *)"Standard_ProgramError_NewInstance(Standard_ProgramError self, char aMessage) -> Handle_Standard_ProgramError"},
+	 { (char *)"Standard_ProgramError_DynamicType", _wrap_Standard_ProgramError_DynamicType, METH_VARARGS, (char *)"Standard_ProgramError_DynamicType(Standard_ProgramError self) -> Handle_Standard_Type"},
+	 { (char *)"Standard_ProgramError_GetHandle", _wrap_Standard_ProgramError_GetHandle, METH_VARARGS, (char *)"Standard_ProgramError_GetHandle(Standard_ProgramError self) -> Handle_Standard_ProgramError"},
+	 { (char *)"Standard_ProgramError___hash__", _wrap_Standard_ProgramError___hash__, METH_VARARGS, (char *)"Standard_ProgramError___hash__(Standard_ProgramError self) -> Standard_Integer"},
+	 { (char *)"delete_Standard_ProgramError", _wrap_delete_Standard_ProgramError, METH_VARARGS, (char *)"delete_Standard_ProgramError(Standard_ProgramError self)"},
+	 { (char *)"Standard_ProgramError_swigregister", Standard_ProgramError_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Standard_NotImplemented", _wrap_new_Standard_NotImplemented, METH_VARARGS, (char *)"\n"
+		"Standard_NotImplemented()\n"
+		"new_Standard_NotImplemented(char AString) -> Standard_NotImplemented\n"
+		""},
+	 { (char *)"Standard_NotImplemented_NewInstance", _wrap_Standard_NotImplemented_NewInstance, METH_VARARGS, (char *)"Standard_NotImplemented_NewInstance(Standard_NotImplemented self, char aMessage) -> Handle_Standard_NotImplemented"},
+	 { (char *)"Standard_NotImplemented_GetHandle", _wrap_Standard_NotImplemented_GetHandle, METH_VARARGS, (char *)"Standard_NotImplemented_GetHandle(Standard_NotImplemented self) -> Handle_Standard_NotImplemented"},
+	 { (char *)"Standard_NotImplemented___hash__", _wrap_Standard_NotImplemented___hash__, METH_VARARGS, (char *)"Standard_NotImplemented___hash__(Standard_NotImplemented self) -> Standard_Integer"},
+	 { (char *)"delete_Standard_NotImplemented", _wrap_delete_Standard_NotImplemented, METH_VARARGS, (char *)"delete_Standard_NotImplemented(Standard_NotImplemented self)"},
+	 { (char *)"Standard_NotImplemented_swigregister", Standard_NotImplemented_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Standard_DimensionError", _wrap_new_Standard_DimensionError, METH_VARARGS, (char *)"\n"
+		"Standard_DimensionError()\n"
+		"new_Standard_DimensionError(char AString) -> Standard_DimensionError\n"
+		""},
+	 { (char *)"Standard_DimensionError_Raise", _wrap_Standard_DimensionError_Raise, METH_VARARGS, (char *)"\n"
+		"Raise(char aMessage=\"\")\n"
+		"Raise()\n"
+		"Standard_DimensionError_Raise(Standard_DimensionError self, Standard_SStream aReason)\n"
+		""},
+	 { (char *)"Standard_DimensionError_NewInstance", _wrap_Standard_DimensionError_NewInstance, METH_VARARGS, (char *)"Standard_DimensionError_NewInstance(Standard_DimensionError self, char aMessage) -> Handle_Standard_DimensionError"},
+	 { (char *)"Standard_DimensionError_DynamicType", _wrap_Standard_DimensionError_DynamicType, METH_VARARGS, (char *)"Standard_DimensionError_DynamicType(Standard_DimensionError self) -> Handle_Standard_Type"},
+	 { (char *)"Standard_DimensionError_GetHandle", _wrap_Standard_DimensionError_GetHandle, METH_VARARGS, (char *)"Standard_DimensionError_GetHandle(Standard_DimensionError self) -> Handle_Standard_DimensionError"},
+	 { (char *)"Standard_DimensionError___hash__", _wrap_Standard_DimensionError___hash__, METH_VARARGS, (char *)"Standard_DimensionError___hash__(Standard_DimensionError self) -> Standard_Integer"},
+	 { (char *)"delete_Standard_DimensionError", _wrap_delete_Standard_DimensionError, METH_VARARGS, (char *)"delete_Standard_DimensionError(Standard_DimensionError self)"},
+	 { (char *)"Standard_DimensionError_swigregister", Standard_DimensionError_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Standard_MMgrOpt", _wrap_new_Standard_MMgrOpt, METH_VARARGS, (char *)"\n"
+		"Standard_MMgrOpt(Standard_Boolean aClear=1, Standard_Boolean aMMap=1, \n"
+		"    Standard_Size aCellSize=200, Standard_Integer aNbPages=10000, \n"
+		"    Standard_Size aThreshold=40000, \n"
+		"    Standard_Boolean isReentrant=0)\n"
+		"Standard_MMgrOpt(Standard_Boolean aClear=1, Standard_Boolean aMMap=1, \n"
+		"    Standard_Size aCellSize=200, Standard_Integer aNbPages=10000, \n"
+		"    Standard_Size aThreshold=40000)\n"
+		"Standard_MMgrOpt(Standard_Boolean aClear=1, Standard_Boolean aMMap=1, \n"
+		"    Standard_Size aCellSize=200, Standard_Integer aNbPages=10000)\n"
+		"Standard_MMgrOpt(Standard_Boolean aClear=1, Standard_Boolean aMMap=1, \n"
+		"    Standard_Size aCellSize=200)\n"
+		"Standard_MMgrOpt(Standard_Boolean aClear=1, Standard_Boolean aMMap=1)\n"
+		"Standard_MMgrOpt(Standard_Boolean aClear=1)\n"
+		"new_Standard_MMgrOpt() -> Standard_MMgrOpt\n"
+		""},
+	 { (char *)"Standard_MMgrOpt_Allocate", _wrap_Standard_MMgrOpt_Allocate, METH_VARARGS, (char *)"Standard_MMgrOpt_Allocate(Standard_MMgrOpt self, Standard_Size aSize) -> Standard_Address"},
+	 { (char *)"Standard_MMgrOpt_Reallocate", _wrap_Standard_MMgrOpt_Reallocate, METH_VARARGS, (char *)"Standard_MMgrOpt_Reallocate(Standard_MMgrOpt self, Standard_Address aPtr, Standard_Size aSize) -> Standard_Address"},
+	 { (char *)"Standard_MMgrOpt_Free", _wrap_Standard_MMgrOpt_Free, METH_VARARGS, (char *)"Standard_MMgrOpt_Free(Standard_MMgrOpt self, Standard_Address aPtr)"},
+	 { (char *)"Standard_MMgrOpt_Purge", _wrap_Standard_MMgrOpt_Purge, METH_VARARGS, (char *)"Standard_MMgrOpt_Purge(Standard_MMgrOpt self, Standard_Boolean ?) -> Standard_Integer"},
+	 { (char *)"Standard_MMgrOpt_SetReentrant", _wrap_Standard_MMgrOpt_SetReentrant, METH_VARARGS, (char *)"Standard_MMgrOpt_SetReentrant(Standard_MMgrOpt self, Standard_Boolean ?)"},
+	 { (char *)"delete_Standard_MMgrOpt", _wrap_delete_Standard_MMgrOpt, METH_VARARGS, (char *)"delete_Standard_MMgrOpt(Standard_MMgrOpt self)"},
+	 { (char *)"Standard_MMgrOpt_swigregister", Standard_MMgrOpt_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Standard_TypeMismatch", _wrap_new_Standard_TypeMismatch, METH_VARARGS, (char *)"\n"
+		"Standard_TypeMismatch()\n"
+		"new_Standard_TypeMismatch(char AString) -> Standard_TypeMismatch\n"
+		""},
+	 { (char *)"Standard_TypeMismatch_Raise", _wrap_Standard_TypeMismatch_Raise, METH_VARARGS, (char *)"\n"
+		"Raise(char aMessage=\"\")\n"
+		"Raise()\n"
+		"Standard_TypeMismatch_Raise(Standard_TypeMismatch self, Standard_SStream aReason)\n"
+		""},
+	 { (char *)"Standard_TypeMismatch_NewInstance", _wrap_Standard_TypeMismatch_NewInstance, METH_VARARGS, (char *)"Standard_TypeMismatch_NewInstance(Standard_TypeMismatch self, char aMessage) -> Handle_Standard_TypeMismatch"},
+	 { (char *)"Standard_TypeMismatch_DynamicType", _wrap_Standard_TypeMismatch_DynamicType, METH_VARARGS, (char *)"Standard_TypeMismatch_DynamicType(Standard_TypeMismatch self) -> Handle_Standard_Type"},
+	 { (char *)"Standard_TypeMismatch_GetHandle", _wrap_Standard_TypeMismatch_GetHandle, METH_VARARGS, (char *)"Standard_TypeMismatch_GetHandle(Standard_TypeMismatch self) -> Handle_Standard_TypeMismatch"},
+	 { (char *)"Standard_TypeMismatch___hash__", _wrap_Standard_TypeMismatch___hash__, METH_VARARGS, (char *)"Standard_TypeMismatch___hash__(Standard_TypeMismatch self) -> Standard_Integer"},
+	 { (char *)"delete_Standard_TypeMismatch", _wrap_delete_Standard_TypeMismatch, METH_VARARGS, (char *)"delete_Standard_TypeMismatch(Standard_TypeMismatch self)"},
+	 { (char *)"Standard_TypeMismatch_swigregister", Standard_TypeMismatch_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Standard_Storable", _wrap_new_Standard_Storable, METH_VARARGS, (char *)"new_Standard_Storable() -> Standard_Storable"},
+	 { (char *)"Standard_Storable_Delete", _wrap_Standard_Storable_Delete, METH_VARARGS, (char *)"Standard_Storable_Delete(Standard_Storable self)"},
+	 { (char *)"Standard_Storable_HashCode", _wrap_Standard_Storable_HashCode, METH_VARARGS, (char *)"Standard_Storable_HashCode(Standard_Storable self, Standard_Integer Upper) -> Standard_Integer"},
+	 { (char *)"Standard_Storable_IsEqual", _wrap_Standard_Storable_IsEqual, METH_VARARGS, (char *)"Standard_Storable_IsEqual(Standard_Storable self, Standard_Storable Other) -> Standard_Boolean"},
+	 { (char *)"Standard_Storable___eq__", _wrap_Standard_Storable___eq__, METH_VARARGS, (char *)"Standard_Storable___eq__(Standard_Storable self, Standard_Storable Other) -> Standard_Boolean"},
+	 { (char *)"Standard_Storable_IsSimilar", _wrap_Standard_Storable_IsSimilar, METH_VARARGS, (char *)"Standard_Storable_IsSimilar(Standard_Storable self, Standard_Storable Other) -> Standard_Boolean"},
+	 { (char *)"Standard_Storable_ShallowDumpToString", _wrap_Standard_Storable_ShallowDumpToString, METH_VARARGS, (char *)"Standard_Storable_ShallowDumpToString(Standard_Storable self) -> string"},
+	 { (char *)"Standard_Storable___hash__", _wrap_Standard_Storable___hash__, METH_VARARGS, (char *)"Standard_Storable___hash__(Standard_Storable self) -> Standard_Integer"},
+	 { (char *)"delete_Standard_Storable", _wrap_delete_Standard_Storable, METH_VARARGS, (char *)"delete_Standard_Storable(Standard_Storable self)"},
+	 { (char *)"Standard_Storable_swigregister", Standard_Storable_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Standard_DimensionMismatch", _wrap_new_Standard_DimensionMismatch, METH_VARARGS, (char *)"\n"
+		"Standard_DimensionMismatch()\n"
+		"new_Standard_DimensionMismatch(char AString) -> Standard_DimensionMismatch\n"
+		""},
+	 { (char *)"Standard_DimensionMismatch_Raise", _wrap_Standard_DimensionMismatch_Raise, METH_VARARGS, (char *)"\n"
+		"Raise(char aMessage=\"\")\n"
+		"Raise()\n"
+		"Standard_DimensionMismatch_Raise(Standard_DimensionMismatch self, Standard_SStream aReason)\n"
+		""},
+	 { (char *)"Standard_DimensionMismatch_NewInstance", _wrap_Standard_DimensionMismatch_NewInstance, METH_VARARGS, (char *)"Standard_DimensionMismatch_NewInstance(Standard_DimensionMismatch self, char aMessage) -> Handle_Standard_DimensionMismatch"},
+	 { (char *)"Standard_DimensionMismatch_DynamicType", _wrap_Standard_DimensionMismatch_DynamicType, METH_VARARGS, (char *)"Standard_DimensionMismatch_DynamicType(Standard_DimensionMismatch self) -> Handle_Standard_Type"},
+	 { (char *)"Standard_DimensionMismatch_GetHandle", _wrap_Standard_DimensionMismatch_GetHandle, METH_VARARGS, (char *)"Standard_DimensionMismatch_GetHandle(Standard_DimensionMismatch self) -> Handle_Standard_DimensionMismatch"},
+	 { (char *)"Standard_DimensionMismatch___hash__", _wrap_Standard_DimensionMismatch___hash__, METH_VARARGS, (char *)"Standard_DimensionMismatch___hash__(Standard_DimensionMismatch self) -> Standard_Integer"},
+	 { (char *)"delete_Standard_DimensionMismatch", _wrap_delete_Standard_DimensionMismatch, METH_VARARGS, (char *)"delete_Standard_DimensionMismatch(Standard_DimensionMismatch self)"},
+	 { (char *)"Standard_DimensionMismatch_swigregister", Standard_DimensionMismatch_swigregister, METH_VARARGS, NULL},
+	 { (char *)"Standard_Type_Name", _wrap_Standard_Type_Name, METH_VARARGS, (char *)"Standard_Type_Name(Standard_Type self) -> Standard_CString"},
+	 { (char *)"Standard_Type_Size", _wrap_Standard_Type_Size, METH_VARARGS, (char *)"Standard_Type_Size(Standard_Type self) -> Standard_Integer"},
+	 { (char *)"new_Standard_Type", _wrap_new_Standard_Type, METH_VARARGS, (char *)"\n"
+		"Standard_Type(char aName, Standard_Integer aSize)\n"
+		"Standard_Type(char aName, Standard_Integer aSize, Standard_Integer aNumberOfParent, \n"
+		"    Standard_Address aAncestors)\n"
+		"Standard_Type(char aName, Standard_Integer aSize, Standard_Integer aNumberOfElement, \n"
+		"    Standard_Integer aNumberOfParent, \n"
+		"    Standard_Address anAncestors, Standard_Address aElements)\n"
+		"new_Standard_Type(char aName, Standard_Integer aSize, Standard_Integer aNumberOfParent, \n"
+		"    Standard_Address anAncestors, \n"
+		"    Standard_Address aFields) -> Standard_Type\n"
+		""},
+	 { (char *)"Standard_Type_SubType", _wrap_Standard_Type_SubType, METH_VARARGS, (char *)"\n"
+		"SubType(Handle_Standard_Type aOther) -> Standard_Boolean\n"
+		"Standard_Type_SubType(Standard_Type self, char theName) -> Standard_Boolean\n"
+		""},
+	 { (char *)"Standard_Type_IsImported", _wrap_Standard_Type_IsImported, METH_VARARGS, (char *)"Standard_Type_IsImported(Standard_Type self) -> Standard_Boolean"},
+	 { (char *)"Standard_Type_IsPrimitive", _wrap_Standard_Type_IsPrimitive, METH_VARARGS, (char *)"Standard_Type_IsPrimitive(Standard_Type self) -> Standard_Boolean"},
+	 { (char *)"Standard_Type_IsEnumeration", _wrap_Standard_Type_IsEnumeration, METH_VARARGS, (char *)"Standard_Type_IsEnumeration(Standard_Type self) -> Standard_Boolean"},
+	 { (char *)"Standard_Type_IsClass", _wrap_Standard_Type_IsClass, METH_VARARGS, (char *)"Standard_Type_IsClass(Standard_Type self) -> Standard_Boolean"},
+	 { (char *)"Standard_Type_NumberOfParent", _wrap_Standard_Type_NumberOfParent, METH_VARARGS, (char *)"Standard_Type_NumberOfParent(Standard_Type self) -> Standard_Integer"},
+	 { (char *)"Standard_Type_NumberOfAncestor", _wrap_Standard_Type_NumberOfAncestor, METH_VARARGS, (char *)"Standard_Type_NumberOfAncestor(Standard_Type self) -> Standard_Integer"},
+	 { (char *)"Standard_Type_ShallowDump", _wrap_Standard_Type_ShallowDump, METH_VARARGS, (char *)"Standard_Type_ShallowDump(Standard_Type self)"},
+	 { (char *)"Standard_Type_ShallowDumpToString", _wrap_Standard_Type_ShallowDumpToString, METH_VARARGS, (char *)"Standard_Type_ShallowDumpToString(Standard_Type self) -> string"},
+	 { (char *)"Standard_Type_PrintToString", _wrap_Standard_Type_PrintToString, METH_VARARGS, (char *)"Standard_Type_PrintToString(Standard_Type self) -> string"},
+	 { (char *)"Standard_Type_DynamicType", _wrap_Standard_Type_DynamicType, METH_VARARGS, (char *)"Standard_Type_DynamicType(Standard_Type self) -> Handle_Standard_Type"},
+	 { (char *)"Standard_Type_GetHandle", _wrap_Standard_Type_GetHandle, METH_VARARGS, (char *)"Standard_Type_GetHandle(Standard_Type self) -> Handle_Standard_Type"},
+	 { (char *)"Standard_Type___hash__", _wrap_Standard_Type___hash__, METH_VARARGS, (char *)"Standard_Type___hash__(Standard_Type self) -> Standard_Integer"},
+	 { (char *)"delete_Standard_Type", _wrap_delete_Standard_Type, METH_VARARGS, (char *)"delete_Standard_Type(Standard_Type self)"},
+	 { (char *)"Standard_Type_swigregister", Standard_Type_swigregister, METH_VARARGS, NULL},
+	 { (char *)"Standard_ErrorHandlerCallback_RegisterCallback", _wrap_Standard_ErrorHandlerCallback_RegisterCallback, METH_VARARGS, (char *)"Standard_ErrorHandlerCallback_RegisterCallback(Standard_ErrorHandlerCallback self)"},
+	 { (char *)"Standard_ErrorHandlerCallback_UnregisterCallback", _wrap_Standard_ErrorHandlerCallback_UnregisterCallback, METH_VARARGS, (char *)"Standard_ErrorHandlerCallback_UnregisterCallback(Standard_ErrorHandlerCallback self)"},
+	 { (char *)"Standard_ErrorHandlerCallback_DestroyCallback", _wrap_Standard_ErrorHandlerCallback_DestroyCallback, METH_VARARGS, (char *)"Standard_ErrorHandlerCallback_DestroyCallback(Standard_ErrorHandlerCallback self)"},
+	 { (char *)"delete_Standard_ErrorHandlerCallback", _wrap_delete_Standard_ErrorHandlerCallback, METH_VARARGS, (char *)"delete_Standard_ErrorHandlerCallback(Standard_ErrorHandlerCallback self)"},
+	 { (char *)"Standard_ErrorHandlerCallback_swigregister", Standard_ErrorHandlerCallback_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Standard_NegativeValue", _wrap_new_Standard_NegativeValue, METH_VARARGS, (char *)"\n"
+		"Standard_NegativeValue()\n"
+		"new_Standard_NegativeValue(char AString) -> Standard_NegativeValue\n"
+		""},
+	 { (char *)"Standard_NegativeValue_Raise", _wrap_Standard_NegativeValue_Raise, METH_VARARGS, (char *)"\n"
+		"Raise(char aMessage=\"\")\n"
+		"Raise()\n"
+		"Standard_NegativeValue_Raise(Standard_NegativeValue self, Standard_SStream aReason)\n"
+		""},
+	 { (char *)"Standard_NegativeValue_NewInstance", _wrap_Standard_NegativeValue_NewInstance, METH_VARARGS, (char *)"Standard_NegativeValue_NewInstance(Standard_NegativeValue self, char aMessage) -> Handle_Standard_NegativeValue"},
+	 { (char *)"Standard_NegativeValue_DynamicType", _wrap_Standard_NegativeValue_DynamicType, METH_VARARGS, (char *)"Standard_NegativeValue_DynamicType(Standard_NegativeValue self) -> Handle_Standard_Type"},
+	 { (char *)"Standard_NegativeValue_GetHandle", _wrap_Standard_NegativeValue_GetHandle, METH_VARARGS, (char *)"Standard_NegativeValue_GetHandle(Standard_NegativeValue self) -> Handle_Standard_NegativeValue"},
+	 { (char *)"Standard_NegativeValue___hash__", _wrap_Standard_NegativeValue___hash__, METH_VARARGS, (char *)"Standard_NegativeValue___hash__(Standard_NegativeValue self) -> Standard_Integer"},
+	 { (char *)"delete_Standard_NegativeValue", _wrap_delete_Standard_NegativeValue, METH_VARARGS, (char *)"delete_Standard_NegativeValue(Standard_NegativeValue self)"},
+	 { (char *)"Standard_NegativeValue_swigregister", Standard_NegativeValue_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Standard_DivideByZero", _wrap_new_Standard_DivideByZero, METH_VARARGS, (char *)"\n"
+		"Standard_DivideByZero()\n"
+		"new_Standard_DivideByZero(char AString) -> Standard_DivideByZero\n"
+		""},
+	 { (char *)"Standard_DivideByZero_Raise", _wrap_Standard_DivideByZero_Raise, METH_VARARGS, (char *)"\n"
+		"Raise(char aMessage=\"\")\n"
+		"Raise()\n"
+		"Standard_DivideByZero_Raise(Standard_DivideByZero self, Standard_SStream aReason)\n"
+		""},
+	 { (char *)"Standard_DivideByZero_NewInstance", _wrap_Standard_DivideByZero_NewInstance, METH_VARARGS, (char *)"Standard_DivideByZero_NewInstance(Standard_DivideByZero self, char aMessage) -> Handle_Standard_DivideByZero"},
+	 { (char *)"Standard_DivideByZero_DynamicType", _wrap_Standard_DivideByZero_DynamicType, METH_VARARGS, (char *)"Standard_DivideByZero_DynamicType(Standard_DivideByZero self) -> Handle_Standard_Type"},
+	 { (char *)"Standard_DivideByZero_GetHandle", _wrap_Standard_DivideByZero_GetHandle, METH_VARARGS, (char *)"Standard_DivideByZero_GetHandle(Standard_DivideByZero self) -> Handle_Standard_DivideByZero"},
+	 { (char *)"Standard_DivideByZero___hash__", _wrap_Standard_DivideByZero___hash__, METH_VARARGS, (char *)"Standard_DivideByZero___hash__(Standard_DivideByZero self) -> Standard_Integer"},
+	 { (char *)"delete_Standard_DivideByZero", _wrap_delete_Standard_DivideByZero, METH_VARARGS, (char *)"delete_Standard_DivideByZero(Standard_DivideByZero self)"},
+	 { (char *)"Standard_DivideByZero_swigregister", Standard_DivideByZero_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Standard_ImmutableObject", _wrap_new_Standard_ImmutableObject, METH_VARARGS, (char *)"\n"
+		"Standard_ImmutableObject()\n"
+		"new_Standard_ImmutableObject(char AString) -> Standard_ImmutableObject\n"
+		""},
+	 { (char *)"Standard_ImmutableObject_Raise", _wrap_Standard_ImmutableObject_Raise, METH_VARARGS, (char *)"\n"
+		"Raise(char aMessage=\"\")\n"
+		"Raise()\n"
+		"Standard_ImmutableObject_Raise(Standard_ImmutableObject self, Standard_SStream aReason)\n"
+		""},
+	 { (char *)"Standard_ImmutableObject_NewInstance", _wrap_Standard_ImmutableObject_NewInstance, METH_VARARGS, (char *)"Standard_ImmutableObject_NewInstance(Standard_ImmutableObject self, char aMessage) -> Handle_Standard_ImmutableObject"},
+	 { (char *)"Standard_ImmutableObject_DynamicType", _wrap_Standard_ImmutableObject_DynamicType, METH_VARARGS, (char *)"Standard_ImmutableObject_DynamicType(Standard_ImmutableObject self) -> Handle_Standard_Type"},
+	 { (char *)"Standard_ImmutableObject_GetHandle", _wrap_Standard_ImmutableObject_GetHandle, METH_VARARGS, (char *)"Standard_ImmutableObject_GetHandle(Standard_ImmutableObject self) -> Handle_Standard_ImmutableObject"},
+	 { (char *)"Standard_ImmutableObject___hash__", _wrap_Standard_ImmutableObject___hash__, METH_VARARGS, (char *)"Standard_ImmutableObject___hash__(Standard_ImmutableObject self) -> Standard_Integer"},
+	 { (char *)"delete_Standard_ImmutableObject", _wrap_delete_Standard_ImmutableObject, METH_VARARGS, (char *)"delete_Standard_ImmutableObject(Standard_ImmutableObject self)"},
+	 { (char *)"Standard_ImmutableObject_swigregister", Standard_ImmutableObject_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Standard_AbortiveTransaction", _wrap_new_Standard_AbortiveTransaction, METH_VARARGS, (char *)"\n"
+		"Standard_AbortiveTransaction()\n"
+		"new_Standard_AbortiveTransaction(char AString) -> Standard_AbortiveTransaction\n"
+		""},
+	 { (char *)"Standard_AbortiveTransaction_Raise", _wrap_Standard_AbortiveTransaction_Raise, METH_VARARGS, (char *)"\n"
+		"Raise(char aMessage=\"\")\n"
+		"Raise()\n"
+		"Standard_AbortiveTransaction_Raise(Standard_AbortiveTransaction self, Standard_SStream aReason)\n"
+		""},
+	 { (char *)"Standard_AbortiveTransaction_NewInstance", _wrap_Standard_AbortiveTransaction_NewInstance, METH_VARARGS, (char *)"Standard_AbortiveTransaction_NewInstance(Standard_AbortiveTransaction self, char aMessage) -> Handle_Standard_AbortiveTransaction"},
+	 { (char *)"Standard_AbortiveTransaction_DynamicType", _wrap_Standard_AbortiveTransaction_DynamicType, METH_VARARGS, (char *)"Standard_AbortiveTransaction_DynamicType(Standard_AbortiveTransaction self) -> Handle_Standard_Type"},
+	 { (char *)"Standard_AbortiveTransaction_GetHandle", _wrap_Standard_AbortiveTransaction_GetHandle, METH_VARARGS, (char *)"Standard_AbortiveTransaction_GetHandle(Standard_AbortiveTransaction self) -> Handle_Standard_AbortiveTransaction"},
+	 { (char *)"Standard_AbortiveTransaction___hash__", _wrap_Standard_AbortiveTransaction___hash__, METH_VARARGS, (char *)"Standard_AbortiveTransaction___hash__(Standard_AbortiveTransaction self) -> Standard_Integer"},
+	 { (char *)"delete_Standard_AbortiveTransaction", _wrap_delete_Standard_AbortiveTransaction, METH_VARARGS, (char *)"delete_Standard_AbortiveTransaction(Standard_AbortiveTransaction self)"},
+	 { (char *)"Standard_AbortiveTransaction_swigregister", Standard_AbortiveTransaction_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Standard_AncestorIterator", _wrap_new_Standard_AncestorIterator, METH_VARARGS, (char *)"\n"
+		"Standard_AncestorIterator(Standard_AncestorIterator anOther)\n"
+		"new_Standard_AncestorIterator(Handle_Standard_Type aType) -> Standard_AncestorIterator\n"
+		""},
+	 { (char *)"Standard_AncestorIterator_Assign", _wrap_Standard_AncestorIterator_Assign, METH_VARARGS, (char *)"Standard_AncestorIterator_Assign(Standard_AncestorIterator self, Standard_AncestorIterator anOther)"},
+	 { (char *)"Standard_AncestorIterator_Set", _wrap_Standard_AncestorIterator_Set, METH_VARARGS, (char *)"Standard_AncestorIterator_Set(Standard_AncestorIterator self, Standard_AncestorIterator anOther)"},
+	 { (char *)"Standard_AncestorIterator_More", _wrap_Standard_AncestorIterator_More, METH_VARARGS, (char *)"Standard_AncestorIterator_More(Standard_AncestorIterator self) -> Standard_Boolean"},
+	 { (char *)"Standard_AncestorIterator_Next", _wrap_Standard_AncestorIterator_Next, METH_VARARGS, (char *)"Standard_AncestorIterator_Next(Standard_AncestorIterator self)"},
+	 { (char *)"Standard_AncestorIterator_Iterator", _wrap_Standard_AncestorIterator_Iterator, METH_VARARGS, (char *)"Standard_AncestorIterator_Iterator(Standard_AncestorIterator self) -> Standard_AncestorIterator"},
+	 { (char *)"Standard_AncestorIterator_Value", _wrap_Standard_AncestorIterator_Value, METH_VARARGS, (char *)"Standard_AncestorIterator_Value(Standard_AncestorIterator self) -> Handle_Standard_Type"},
+	 { (char *)"delete_Standard_AncestorIterator", _wrap_delete_Standard_AncestorIterator, METH_VARARGS, (char *)"delete_Standard_AncestorIterator(Standard_AncestorIterator self)"},
+	 { (char *)"Standard_AncestorIterator_swigregister", Standard_AncestorIterator_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Standard_OutOfMemory", _wrap_new_Standard_OutOfMemory, METH_VARARGS, (char *)"\n"
+		"Standard_OutOfMemory()\n"
+		"new_Standard_OutOfMemory(char AString) -> Standard_OutOfMemory\n"
+		""},
+	 { (char *)"Standard_OutOfMemory_Raise", _wrap_Standard_OutOfMemory_Raise, METH_VARARGS, (char *)"\n"
+		"Raise(char aMessage=\"\")\n"
+		"Raise()\n"
+		"Standard_OutOfMemory_Raise(Standard_OutOfMemory self, Standard_SStream aReason)\n"
+		""},
+	 { (char *)"Standard_OutOfMemory_NewInstance", _wrap_Standard_OutOfMemory_NewInstance, METH_VARARGS, (char *)"Standard_OutOfMemory_NewInstance(Standard_OutOfMemory self, char aMessage) -> Handle_Standard_OutOfMemory"},
+	 { (char *)"Standard_OutOfMemory_DynamicType", _wrap_Standard_OutOfMemory_DynamicType, METH_VARARGS, (char *)"Standard_OutOfMemory_DynamicType(Standard_OutOfMemory self) -> Handle_Standard_Type"},
+	 { (char *)"Standard_OutOfMemory_GetHandle", _wrap_Standard_OutOfMemory_GetHandle, METH_VARARGS, (char *)"Standard_OutOfMemory_GetHandle(Standard_OutOfMemory self) -> Handle_Standard_OutOfMemory"},
+	 { (char *)"Standard_OutOfMemory___hash__", _wrap_Standard_OutOfMemory___hash__, METH_VARARGS, (char *)"Standard_OutOfMemory___hash__(Standard_OutOfMemory self) -> Standard_Integer"},
+	 { (char *)"delete_Standard_OutOfMemory", _wrap_delete_Standard_OutOfMemory, METH_VARARGS, (char *)"delete_Standard_OutOfMemory(Standard_OutOfMemory self)"},
+	 { (char *)"Standard_OutOfMemory_swigregister", Standard_OutOfMemory_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Standard_MultiplyDefined", _wrap_new_Standard_MultiplyDefined, METH_VARARGS, (char *)"\n"
+		"Standard_MultiplyDefined()\n"
+		"new_Standard_MultiplyDefined(char AString) -> Standard_MultiplyDefined\n"
+		""},
+	 { (char *)"Standard_MultiplyDefined_Raise", _wrap_Standard_MultiplyDefined_Raise, METH_VARARGS, (char *)"\n"
+		"Raise(char aMessage=\"\")\n"
+		"Raise()\n"
+		"Standard_MultiplyDefined_Raise(Standard_MultiplyDefined self, Standard_SStream aReason)\n"
+		""},
+	 { (char *)"Standard_MultiplyDefined_NewInstance", _wrap_Standard_MultiplyDefined_NewInstance, METH_VARARGS, (char *)"Standard_MultiplyDefined_NewInstance(Standard_MultiplyDefined self, char aMessage) -> Handle_Standard_MultiplyDefined"},
+	 { (char *)"Standard_MultiplyDefined_DynamicType", _wrap_Standard_MultiplyDefined_DynamicType, METH_VARARGS, (char *)"Standard_MultiplyDefined_DynamicType(Standard_MultiplyDefined self) -> Handle_Standard_Type"},
+	 { (char *)"Standard_MultiplyDefined_GetHandle", _wrap_Standard_MultiplyDefined_GetHandle, METH_VARARGS, (char *)"Standard_MultiplyDefined_GetHandle(Standard_MultiplyDefined self) -> Handle_Standard_MultiplyDefined"},
+	 { (char *)"Standard_MultiplyDefined___hash__", _wrap_Standard_MultiplyDefined___hash__, METH_VARARGS, (char *)"Standard_MultiplyDefined___hash__(Standard_MultiplyDefined self) -> Standard_Integer"},
+	 { (char *)"delete_Standard_MultiplyDefined", _wrap_delete_Standard_MultiplyDefined, METH_VARARGS, (char *)"delete_Standard_MultiplyDefined(Standard_MultiplyDefined self)"},
+	 { (char *)"Standard_MultiplyDefined_swigregister", Standard_MultiplyDefined_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Standard_LicenseNotFound", _wrap_new_Standard_LicenseNotFound, METH_VARARGS, (char *)"\n"
+		"Standard_LicenseNotFound()\n"
+		"new_Standard_LicenseNotFound(char AString) -> Standard_LicenseNotFound\n"
+		""},
+	 { (char *)"Standard_LicenseNotFound_Raise", _wrap_Standard_LicenseNotFound_Raise, METH_VARARGS, (char *)"\n"
+		"Raise(char aMessage=\"\")\n"
+		"Raise()\n"
+		"Standard_LicenseNotFound_Raise(Standard_LicenseNotFound self, Standard_SStream aReason)\n"
+		""},
+	 { (char *)"Standard_LicenseNotFound_NewInstance", _wrap_Standard_LicenseNotFound_NewInstance, METH_VARARGS, (char *)"Standard_LicenseNotFound_NewInstance(Standard_LicenseNotFound self, char aMessage) -> Handle_Standard_LicenseNotFound"},
+	 { (char *)"Standard_LicenseNotFound_DynamicType", _wrap_Standard_LicenseNotFound_DynamicType, METH_VARARGS, (char *)"Standard_LicenseNotFound_DynamicType(Standard_LicenseNotFound self) -> Handle_Standard_Type"},
+	 { (char *)"Standard_LicenseNotFound_GetHandle", _wrap_Standard_LicenseNotFound_GetHandle, METH_VARARGS, (char *)"Standard_LicenseNotFound_GetHandle(Standard_LicenseNotFound self) -> Handle_Standard_LicenseNotFound"},
+	 { (char *)"Standard_LicenseNotFound___hash__", _wrap_Standard_LicenseNotFound___hash__, METH_VARARGS, (char *)"Standard_LicenseNotFound___hash__(Standard_LicenseNotFound self) -> Standard_Integer"},
+	 { (char *)"delete_Standard_LicenseNotFound", _wrap_delete_Standard_LicenseNotFound, METH_VARARGS, (char *)"delete_Standard_LicenseNotFound(Standard_LicenseNotFound self)"},
+	 { (char *)"Standard_LicenseNotFound_swigregister", Standard_LicenseNotFound_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Standard", _wrap_new_Standard, METH_VARARGS, (char *)"new_Standard() -> Standard"},
+	 { (char *)"Standard_Allocate", _wrap_Standard_Allocate, METH_VARARGS, (char *)"Standard_Allocate(Standard self, Standard_Size aSize) -> Standard_Address"},
+	 { (char *)"Standard_Free", _wrap_Standard_Free, METH_VARARGS, (char *)"Standard_Free(Standard self, Standard_Address aStorage)"},
+	 { (char *)"Standard_Reallocate", _wrap_Standard_Reallocate, METH_VARARGS, (char *)"Standard_Reallocate(Standard self, Standard_Address aStorage, Standard_Size aNewSize) -> Standard_Address"},
+	 { (char *)"Standard_Purge", _wrap_Standard_Purge, METH_VARARGS, (char *)"Standard_Purge(Standard self) -> Standard_Integer"},
+	 { (char *)"Standard_IsReentrant", _wrap_Standard_IsReentrant, METH_VARARGS, (char *)"Standard_IsReentrant(Standard self) -> Standard_Boolean"},
+	 { (char *)"Standard_SetReentrant", _wrap_Standard_SetReentrant, METH_VARARGS, (char *)"Standard_SetReentrant(Standard self, Standard_Boolean isReentrant)"},
+	 { (char *)"delete_Standard", _wrap_delete_Standard, METH_VARARGS, (char *)"delete_Standard(Standard self)"},
+	 { (char *)"Standard_swigregister", Standard_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Standard_Underflow", _wrap_new_Standard_Underflow, METH_VARARGS, (char *)"\n"
+		"Standard_Underflow()\n"
+		"new_Standard_Underflow(char AString) -> Standard_Underflow\n"
+		""},
+	 { (char *)"Standard_Underflow_Raise", _wrap_Standard_Underflow_Raise, METH_VARARGS, (char *)"\n"
+		"Raise(char aMessage=\"\")\n"
+		"Raise()\n"
+		"Standard_Underflow_Raise(Standard_Underflow self, Standard_SStream aReason)\n"
+		""},
+	 { (char *)"Standard_Underflow_NewInstance", _wrap_Standard_Underflow_NewInstance, METH_VARARGS, (char *)"Standard_Underflow_NewInstance(Standard_Underflow self, char aMessage) -> Handle_Standard_Underflow"},
+	 { (char *)"Standard_Underflow_DynamicType", _wrap_Standard_Underflow_DynamicType, METH_VARARGS, (char *)"Standard_Underflow_DynamicType(Standard_Underflow self) -> Handle_Standard_Type"},
+	 { (char *)"Standard_Underflow_GetHandle", _wrap_Standard_Underflow_GetHandle, METH_VARARGS, (char *)"Standard_Underflow_GetHandle(Standard_Underflow self) -> Handle_Standard_Underflow"},
+	 { (char *)"Standard_Underflow___hash__", _wrap_Standard_Underflow___hash__, METH_VARARGS, (char *)"Standard_Underflow___hash__(Standard_Underflow self) -> Standard_Integer"},
+	 { (char *)"delete_Standard_Underflow", _wrap_delete_Standard_Underflow, METH_VARARGS, (char *)"delete_Standard_Underflow(Standard_Underflow self)"},
+	 { (char *)"Standard_Underflow_swigregister", Standard_Underflow_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Standard_Overflow", _wrap_new_Standard_Overflow, METH_VARARGS, (char *)"\n"
+		"Standard_Overflow()\n"
+		"new_Standard_Overflow(char AString) -> Standard_Overflow\n"
+		""},
+	 { (char *)"Standard_Overflow_Raise", _wrap_Standard_Overflow_Raise, METH_VARARGS, (char *)"\n"
+		"Raise(char aMessage=\"\")\n"
+		"Raise()\n"
+		"Standard_Overflow_Raise(Standard_Overflow self, Standard_SStream aReason)\n"
+		""},
+	 { (char *)"Standard_Overflow_NewInstance", _wrap_Standard_Overflow_NewInstance, METH_VARARGS, (char *)"Standard_Overflow_NewInstance(Standard_Overflow self, char aMessage) -> Handle_Standard_Overflow"},
+	 { (char *)"Standard_Overflow_DynamicType", _wrap_Standard_Overflow_DynamicType, METH_VARARGS, (char *)"Standard_Overflow_DynamicType(Standard_Overflow self) -> Handle_Standard_Type"},
+	 { (char *)"Standard_Overflow_GetHandle", _wrap_Standard_Overflow_GetHandle, METH_VARARGS, (char *)"Standard_Overflow_GetHandle(Standard_Overflow self) -> Handle_Standard_Overflow"},
+	 { (char *)"Standard_Overflow___hash__", _wrap_Standard_Overflow___hash__, METH_VARARGS, (char *)"Standard_Overflow___hash__(Standard_Overflow self) -> Standard_Integer"},
+	 { (char *)"delete_Standard_Overflow", _wrap_delete_Standard_Overflow, METH_VARARGS, (char *)"delete_Standard_Overflow(Standard_Overflow self)"},
+	 { (char *)"Standard_Overflow_swigregister", Standard_Overflow_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Standard_TooManyUsers", _wrap_new_Standard_TooManyUsers, METH_VARARGS, (char *)"\n"
+		"Standard_TooManyUsers()\n"
+		"new_Standard_TooManyUsers(char AString) -> Standard_TooManyUsers\n"
+		""},
+	 { (char *)"Standard_TooManyUsers_Raise", _wrap_Standard_TooManyUsers_Raise, METH_VARARGS, (char *)"\n"
+		"Raise(char aMessage=\"\")\n"
+		"Raise()\n"
+		"Standard_TooManyUsers_Raise(Standard_TooManyUsers self, Standard_SStream aReason)\n"
+		""},
+	 { (char *)"Standard_TooManyUsers_NewInstance", _wrap_Standard_TooManyUsers_NewInstance, METH_VARARGS, (char *)"Standard_TooManyUsers_NewInstance(Standard_TooManyUsers self, char aMessage) -> Handle_Standard_TooManyUsers"},
+	 { (char *)"Standard_TooManyUsers_DynamicType", _wrap_Standard_TooManyUsers_DynamicType, METH_VARARGS, (char *)"Standard_TooManyUsers_DynamicType(Standard_TooManyUsers self) -> Handle_Standard_Type"},
+	 { (char *)"Standard_TooManyUsers_GetHandle", _wrap_Standard_TooManyUsers_GetHandle, METH_VARARGS, (char *)"Standard_TooManyUsers_GetHandle(Standard_TooManyUsers self) -> Handle_Standard_TooManyUsers"},
+	 { (char *)"Standard_TooManyUsers___hash__", _wrap_Standard_TooManyUsers___hash__, METH_VARARGS, (char *)"Standard_TooManyUsers___hash__(Standard_TooManyUsers self) -> Standard_Integer"},
+	 { (char *)"delete_Standard_TooManyUsers", _wrap_delete_Standard_TooManyUsers, METH_VARARGS, (char *)"delete_Standard_TooManyUsers(Standard_TooManyUsers self)"},
+	 { (char *)"Standard_TooManyUsers_swigregister", Standard_TooManyUsers_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Standard_NullObject", _wrap_new_Standard_NullObject, METH_VARARGS, (char *)"\n"
+		"Standard_NullObject()\n"
+		"new_Standard_NullObject(char AString) -> Standard_NullObject\n"
+		""},
+	 { (char *)"Standard_NullObject_Raise", _wrap_Standard_NullObject_Raise, METH_VARARGS, (char *)"\n"
+		"Raise(char aMessage=\"\")\n"
+		"Raise()\n"
+		"Standard_NullObject_Raise(Standard_NullObject self, Standard_SStream aReason)\n"
+		""},
+	 { (char *)"Standard_NullObject_NewInstance", _wrap_Standard_NullObject_NewInstance, METH_VARARGS, (char *)"Standard_NullObject_NewInstance(Standard_NullObject self, char aMessage) -> Handle_Standard_NullObject"},
+	 { (char *)"Standard_NullObject_DynamicType", _wrap_Standard_NullObject_DynamicType, METH_VARARGS, (char *)"Standard_NullObject_DynamicType(Standard_NullObject self) -> Handle_Standard_Type"},
+	 { (char *)"Standard_NullObject_GetHandle", _wrap_Standard_NullObject_GetHandle, METH_VARARGS, (char *)"Standard_NullObject_GetHandle(Standard_NullObject self) -> Handle_Standard_NullObject"},
+	 { (char *)"Standard_NullObject___hash__", _wrap_Standard_NullObject___hash__, METH_VARARGS, (char *)"Standard_NullObject___hash__(Standard_NullObject self) -> Standard_Integer"},
+	 { (char *)"delete_Standard_NullObject", _wrap_delete_Standard_NullObject, METH_VARARGS, (char *)"delete_Standard_NullObject(Standard_NullObject self)"},
+	 { (char *)"Standard_NullObject_swigregister", Standard_NullObject_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Standard_GUID", _wrap_new_Standard_GUID, METH_VARARGS, (char *)"\n"
+		"Standard_GUID()\n"
+		"Standard_GUID(char aGuid)\n"
+		"Standard_GUID(Standard_ExtString aGuid)\n"
+		"Standard_GUID(Standard_Integer a32b, Standard_ExtCharacter a16b1, \n"
+		"    Standard_ExtCharacter a16b2, Standard_ExtCharacter a16b3, \n"
+		"    Standard_Byte a8b1, Standard_Byte a8b2, \n"
+		"    Standard_Byte a8b3, Standard_Byte a8b4, \n"
+		"    Standard_Byte a8b5, Standard_Byte a8b6)\n"
+		"Standard_GUID(Standard_UUID aGuid)\n"
+		"new_Standard_GUID(Standard_GUID aGuid) -> Standard_GUID\n"
+		""},
+	 { (char *)"Standard_GUID_ToUUID", _wrap_Standard_GUID_ToUUID, METH_VARARGS, (char *)"Standard_GUID_ToUUID(Standard_GUID self) -> Standard_UUID"},
+	 { (char *)"Standard_GUID_ToCString", _wrap_Standard_GUID_ToCString, METH_VARARGS, (char *)"Standard_GUID_ToCString(Standard_GUID self, Standard_PCharacter aStrGuid)"},
+	 { (char *)"Standard_GUID_ToExtString", _wrap_Standard_GUID_ToExtString, METH_VARARGS, (char *)"Standard_GUID_ToExtString(Standard_GUID self, Standard_PExtCharacter aStrGuid)"},
+	 { (char *)"Standard_GUID_IsSame", _wrap_Standard_GUID_IsSame, METH_VARARGS, (char *)"Standard_GUID_IsSame(Standard_GUID self, Standard_GUID uid) -> Standard_Boolean"},
+	 { (char *)"Standard_GUID___eq__", _wrap_Standard_GUID___eq__, METH_VARARGS, (char *)"Standard_GUID___eq__(Standard_GUID self, Standard_GUID uid) -> Standard_Boolean"},
+	 { (char *)"Standard_GUID_IsNotSame", _wrap_Standard_GUID_IsNotSame, METH_VARARGS, (char *)"Standard_GUID_IsNotSame(Standard_GUID self, Standard_GUID uid) -> Standard_Boolean"},
+	 { (char *)"Standard_GUID___ne__", _wrap_Standard_GUID___ne__, METH_VARARGS, (char *)"Standard_GUID___ne__(Standard_GUID self, Standard_GUID uid) -> Standard_Boolean"},
+	 { (char *)"Standard_GUID_Assign", _wrap_Standard_GUID_Assign, METH_VARARGS, (char *)"\n"
+		"Assign(Standard_GUID uid)\n"
+		"Standard_GUID_Assign(Standard_GUID self, Standard_UUID uid)\n"
+		""},
+	 { (char *)"Standard_GUID_Set", _wrap_Standard_GUID_Set, METH_VARARGS, (char *)"\n"
+		"Set(Standard_GUID uid)\n"
+		"Standard_GUID_Set(Standard_GUID self, Standard_UUID uid)\n"
+		""},
+	 { (char *)"Standard_GUID_ShallowDumpToString", _wrap_Standard_GUID_ShallowDumpToString, METH_VARARGS, (char *)"Standard_GUID_ShallowDumpToString(Standard_GUID self) -> string"},
+	 { (char *)"Standard_GUID_CheckGUIDFormat", _wrap_Standard_GUID_CheckGUIDFormat, METH_VARARGS, (char *)"Standard_GUID_CheckGUIDFormat(Standard_GUID self, char aGuid) -> Standard_Boolean"},
+	 { (char *)"Standard_GUID_Hash", _wrap_Standard_GUID_Hash, METH_VARARGS, (char *)"Standard_GUID_Hash(Standard_GUID self, Standard_Integer Upper) -> Standard_Integer"},
+	 { (char *)"Standard_GUID_HashCode", _wrap_Standard_GUID_HashCode, METH_VARARGS, (char *)"Standard_GUID_HashCode(Standard_GUID self, Standard_GUID aguid, Standard_Integer Upper) -> Standard_Integer"},
+	 { (char *)"Standard_GUID_IsEqual", _wrap_Standard_GUID_IsEqual, METH_VARARGS, (char *)"Standard_GUID_IsEqual(Standard_GUID self, Standard_GUID string1, Standard_GUID string2) -> Standard_Boolean"},
+	 { (char *)"Standard_GUID__CSFDB_GetStandard_GUIDmy32b", _wrap_Standard_GUID__CSFDB_GetStandard_GUIDmy32b, METH_VARARGS, (char *)"Standard_GUID__CSFDB_GetStandard_GUIDmy32b(Standard_GUID self) -> Standard_Integer"},
+	 { (char *)"Standard_GUID__CSFDB_SetStandard_GUIDmy32b", _wrap_Standard_GUID__CSFDB_SetStandard_GUIDmy32b, METH_VARARGS, (char *)"Standard_GUID__CSFDB_SetStandard_GUIDmy32b(Standard_GUID self, Standard_Integer p)"},
+	 { (char *)"Standard_GUID__CSFDB_GetStandard_GUIDmy16b1", _wrap_Standard_GUID__CSFDB_GetStandard_GUIDmy16b1, METH_VARARGS, (char *)"Standard_GUID__CSFDB_GetStandard_GUIDmy16b1(Standard_GUID self) -> Standard_ExtCharacter"},
+	 { (char *)"Standard_GUID__CSFDB_SetStandard_GUIDmy16b1", _wrap_Standard_GUID__CSFDB_SetStandard_GUIDmy16b1, METH_VARARGS, (char *)"Standard_GUID__CSFDB_SetStandard_GUIDmy16b1(Standard_GUID self, Standard_ExtCharacter p)"},
+	 { (char *)"Standard_GUID__CSFDB_GetStandard_GUIDmy16b2", _wrap_Standard_GUID__CSFDB_GetStandard_GUIDmy16b2, METH_VARARGS, (char *)"Standard_GUID__CSFDB_GetStandard_GUIDmy16b2(Standard_GUID self) -> Standard_ExtCharacter"},
+	 { (char *)"Standard_GUID__CSFDB_SetStandard_GUIDmy16b2", _wrap_Standard_GUID__CSFDB_SetStandard_GUIDmy16b2, METH_VARARGS, (char *)"Standard_GUID__CSFDB_SetStandard_GUIDmy16b2(Standard_GUID self, Standard_ExtCharacter p)"},
+	 { (char *)"Standard_GUID__CSFDB_GetStandard_GUIDmy16b3", _wrap_Standard_GUID__CSFDB_GetStandard_GUIDmy16b3, METH_VARARGS, (char *)"Standard_GUID__CSFDB_GetStandard_GUIDmy16b3(Standard_GUID self) -> Standard_ExtCharacter"},
+	 { (char *)"Standard_GUID__CSFDB_SetStandard_GUIDmy16b3", _wrap_Standard_GUID__CSFDB_SetStandard_GUIDmy16b3, METH_VARARGS, (char *)"Standard_GUID__CSFDB_SetStandard_GUIDmy16b3(Standard_GUID self, Standard_ExtCharacter p)"},
+	 { (char *)"Standard_GUID__CSFDB_GetStandard_GUIDmy8b1", _wrap_Standard_GUID__CSFDB_GetStandard_GUIDmy8b1, METH_VARARGS, (char *)"Standard_GUID__CSFDB_GetStandard_GUIDmy8b1(Standard_GUID self) -> Standard_Byte"},
+	 { (char *)"Standard_GUID__CSFDB_SetStandard_GUIDmy8b1", _wrap_Standard_GUID__CSFDB_SetStandard_GUIDmy8b1, METH_VARARGS, (char *)"Standard_GUID__CSFDB_SetStandard_GUIDmy8b1(Standard_GUID self, Standard_Byte p)"},
+	 { (char *)"Standard_GUID__CSFDB_GetStandard_GUIDmy8b2", _wrap_Standard_GUID__CSFDB_GetStandard_GUIDmy8b2, METH_VARARGS, (char *)"Standard_GUID__CSFDB_GetStandard_GUIDmy8b2(Standard_GUID self) -> Standard_Byte"},
+	 { (char *)"Standard_GUID__CSFDB_SetStandard_GUIDmy8b2", _wrap_Standard_GUID__CSFDB_SetStandard_GUIDmy8b2, METH_VARARGS, (char *)"Standard_GUID__CSFDB_SetStandard_GUIDmy8b2(Standard_GUID self, Standard_Byte p)"},
+	 { (char *)"Standard_GUID__CSFDB_GetStandard_GUIDmy8b3", _wrap_Standard_GUID__CSFDB_GetStandard_GUIDmy8b3, METH_VARARGS, (char *)"Standard_GUID__CSFDB_GetStandard_GUIDmy8b3(Standard_GUID self) -> Standard_Byte"},
+	 { (char *)"Standard_GUID__CSFDB_SetStandard_GUIDmy8b3", _wrap_Standard_GUID__CSFDB_SetStandard_GUIDmy8b3, METH_VARARGS, (char *)"Standard_GUID__CSFDB_SetStandard_GUIDmy8b3(Standard_GUID self, Standard_Byte p)"},
+	 { (char *)"Standard_GUID__CSFDB_GetStandard_GUIDmy8b4", _wrap_Standard_GUID__CSFDB_GetStandard_GUIDmy8b4, METH_VARARGS, (char *)"Standard_GUID__CSFDB_GetStandard_GUIDmy8b4(Standard_GUID self) -> Standard_Byte"},
+	 { (char *)"Standard_GUID__CSFDB_SetStandard_GUIDmy8b4", _wrap_Standard_GUID__CSFDB_SetStandard_GUIDmy8b4, METH_VARARGS, (char *)"Standard_GUID__CSFDB_SetStandard_GUIDmy8b4(Standard_GUID self, Standard_Byte p)"},
+	 { (char *)"Standard_GUID__CSFDB_GetStandard_GUIDmy8b5", _wrap_Standard_GUID__CSFDB_GetStandard_GUIDmy8b5, METH_VARARGS, (char *)"Standard_GUID__CSFDB_GetStandard_GUIDmy8b5(Standard_GUID self) -> Standard_Byte"},
+	 { (char *)"Standard_GUID__CSFDB_SetStandard_GUIDmy8b5", _wrap_Standard_GUID__CSFDB_SetStandard_GUIDmy8b5, METH_VARARGS, (char *)"Standard_GUID__CSFDB_SetStandard_GUIDmy8b5(Standard_GUID self, Standard_Byte p)"},
+	 { (char *)"Standard_GUID__CSFDB_GetStandard_GUIDmy8b6", _wrap_Standard_GUID__CSFDB_GetStandard_GUIDmy8b6, METH_VARARGS, (char *)"Standard_GUID__CSFDB_GetStandard_GUIDmy8b6(Standard_GUID self) -> Standard_Byte"},
+	 { (char *)"Standard_GUID__CSFDB_SetStandard_GUIDmy8b6", _wrap_Standard_GUID__CSFDB_SetStandard_GUIDmy8b6, METH_VARARGS, (char *)"Standard_GUID__CSFDB_SetStandard_GUIDmy8b6(Standard_GUID self, Standard_Byte p)"},
+	 { (char *)"delete_Standard_GUID", _wrap_delete_Standard_GUID, METH_VARARGS, (char *)"delete_Standard_GUID(Standard_GUID self)"},
+	 { (char *)"Standard_GUID_ToString", _wrap_Standard_GUID_ToString, METH_VARARGS, (char *)"Standard_GUID_ToString(Standard_GUID self) -> Standard_PCharacter"},
+	 { (char *)"Standard_GUID_swigregister", Standard_GUID_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Standard_ErrorHandler", _wrap_new_Standard_ErrorHandler, METH_VARARGS, (char *)"new_Standard_ErrorHandler() -> Standard_ErrorHandler"},
+	 { (char *)"Standard_ErrorHandler_Destroy", _wrap_Standard_ErrorHandler_Destroy, METH_VARARGS, (char *)"Standard_ErrorHandler_Destroy(Standard_ErrorHandler self)"},
+	 { (char *)"Standard_ErrorHandler_Unlink", _wrap_Standard_ErrorHandler_Unlink, METH_VARARGS, (char *)"Standard_ErrorHandler_Unlink(Standard_ErrorHandler self)"},
+	 { (char *)"Standard_ErrorHandler_Catches", _wrap_Standard_ErrorHandler_Catches, METH_VARARGS, (char *)"Standard_ErrorHandler_Catches(Standard_ErrorHandler self, Handle_Standard_Type aType) -> Standard_Boolean"},
+	 { (char *)"Standard_ErrorHandler_Error", _wrap_Standard_ErrorHandler_Error, METH_VARARGS, (char *)"Standard_ErrorHandler_Error(Standard_ErrorHandler self) -> Handle_Standard_Failure"},
+	 { (char *)"Standard_ErrorHandler_LastCaughtError", _wrap_Standard_ErrorHandler_LastCaughtError, METH_VARARGS, (char *)"Standard_ErrorHandler_LastCaughtError(Standard_ErrorHandler self) -> Handle_Standard_Failure"},
+	 { (char *)"Standard_ErrorHandler_IsInTryBlock", _wrap_Standard_ErrorHandler_IsInTryBlock, METH_VARARGS, (char *)"Standard_ErrorHandler_IsInTryBlock(Standard_ErrorHandler self) -> Standard_Boolean"},
+	 { (char *)"delete_Standard_ErrorHandler", _wrap_delete_Standard_ErrorHandler, METH_VARARGS, (char *)"delete_Standard_ErrorHandler(Standard_ErrorHandler self)"},
+	 { (char *)"Standard_ErrorHandler_swigregister", Standard_ErrorHandler_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Standard_Mutex", _wrap_new_Standard_Mutex, METH_VARARGS, (char *)"new_Standard_Mutex() -> Standard_Mutex"},
+	 { (char *)"Standard_Mutex_Lock", _wrap_Standard_Mutex_Lock, METH_VARARGS, (char *)"Standard_Mutex_Lock(Standard_Mutex self)"},
+	 { (char *)"Standard_Mutex_TryLock", _wrap_Standard_Mutex_TryLock, METH_VARARGS, (char *)"Standard_Mutex_TryLock(Standard_Mutex self) -> Standard_Boolean"},
+	 { (char *)"Standard_Mutex_Unlock", _wrap_Standard_Mutex_Unlock, METH_VARARGS, (char *)"Standard_Mutex_Unlock(Standard_Mutex self)"},
+	 { (char *)"delete_Standard_Mutex", _wrap_delete_Standard_Mutex, METH_VARARGS, (char *)"delete_Standard_Mutex(Standard_Mutex self)"},
+	 { (char *)"Standard_Mutex_swigregister", Standard_Mutex_swigregister, METH_VARARGS, NULL},
+	 { (char *)"Standard_Persistent_This", _wrap_Standard_Persistent_This, METH_VARARGS, (char *)"Standard_Persistent_This(Standard_Persistent self) -> Handle_Standard_Persistent"},
+	 { (char *)"Standard_Persistent_ShallowCopy", _wrap_Standard_Persistent_ShallowCopy, METH_VARARGS, (char *)"Standard_Persistent_ShallowCopy(Standard_Persistent self) -> Handle_Standard_Persistent"},
+	 { (char *)"Standard_Persistent_Delete", _wrap_Standard_Persistent_Delete, METH_VARARGS, (char *)"Standard_Persistent_Delete(Standard_Persistent self)"},
+	 { (char *)"new_Standard_Persistent", _wrap_new_Standard_Persistent, METH_VARARGS, (char *)"new_Standard_Persistent() -> Standard_Persistent"},
+	 { (char *)"Standard_Persistent_DynamicType", _wrap_Standard_Persistent_DynamicType, METH_VARARGS, (char *)"Standard_Persistent_DynamicType(Standard_Persistent self) -> Handle_Standard_Type"},
+	 { (char *)"Standard_Persistent_IsKind", _wrap_Standard_Persistent_IsKind, METH_VARARGS, (char *)"Standard_Persistent_IsKind(Standard_Persistent self, Handle_Standard_Type arg0) -> Standard_Boolean"},
+	 { (char *)"Standard_Persistent_IsInstance", _wrap_Standard_Persistent_IsInstance, METH_VARARGS, (char *)"Standard_Persistent_IsInstance(Standard_Persistent self, Handle_Standard_Type arg0) -> Standard_Boolean"},
+	 { (char *)"Standard_Persistent_HashCode", _wrap_Standard_Persistent_HashCode, METH_VARARGS, (char *)"Standard_Persistent_HashCode(Standard_Persistent self, Standard_Integer Upper) -> Standard_Integer"},
+	 { (char *)"Standard_Persistent_ShallowDumpToString", _wrap_Standard_Persistent_ShallowDumpToString, METH_VARARGS, (char *)"Standard_Persistent_ShallowDumpToString(Standard_Persistent self) -> string"},
+	 { (char *)"Standard_Persistent_GetHandle", _wrap_Standard_Persistent_GetHandle, METH_VARARGS, (char *)"Standard_Persistent_GetHandle(Standard_Persistent self) -> Handle_Standard_Persistent"},
+	 { (char *)"Standard_Persistent___hash__", _wrap_Standard_Persistent___hash__, METH_VARARGS, (char *)"Standard_Persistent___hash__(Standard_Persistent self) -> Standard_Integer"},
+	 { (char *)"delete_Standard_Persistent", _wrap_delete_Standard_Persistent, METH_VARARGS, (char *)"delete_Standard_Persistent(Standard_Persistent self)"},
+	 { (char *)"Standard_Persistent_swigregister", Standard_Persistent_swigregister, METH_VARARGS, NULL},
+	 { (char *)"new_Standard_OutOfRange", _wrap_new_Standard_OutOfRange, METH_VARARGS, (char *)"\n"
+		"Standard_OutOfRange()\n"
+		"new_Standard_OutOfRange(char AString) -> Standard_OutOfRange\n"
+		""},
+	 { (char *)"Standard_OutOfRange_Raise", _wrap_Standard_OutOfRange_Raise, METH_VARARGS, (char *)"\n"
+		"Raise(char aMessage=\"\")\n"
+		"Raise()\n"
+		"Standard_OutOfRange_Raise(Standard_OutOfRange self, Standard_SStream aReason)\n"
+		""},
+	 { (char *)"Standard_OutOfRange_NewInstance", _wrap_Standard_OutOfRange_NewInstance, METH_VARARGS, (char *)"Standard_OutOfRange_NewInstance(Standard_OutOfRange self, char aMessage) -> Handle_Standard_OutOfRange"},
+	 { (char *)"Standard_OutOfRange_DynamicType", _wrap_Standard_OutOfRange_DynamicType, METH_VARARGS, (char *)"Standard_OutOfRange_DynamicType(Standard_OutOfRange self) -> Handle_Standard_Type"},
+	 { (char *)"Standard_OutOfRange_GetHandle", _wrap_Standard_OutOfRange_GetHandle, METH_VARARGS, (char *)"Standard_OutOfRange_GetHandle(Standard_OutOfRange self) -> Handle_Standard_OutOfRange"},
+	 { (char *)"Standard_OutOfRange___hash__", _wrap_Standard_OutOfRange___hash__, METH_VARARGS, (char *)"Standard_OutOfRange___hash__(Standard_OutOfRange self) -> Standard_Integer"},
+	 { (char *)"delete_Standard_OutOfRange", _wrap_delete_Standard_OutOfRange, METH_VARARGS, (char *)"delete_Standard_OutOfRange(Standard_OutOfRange self)"},
+	 { (char *)"Standard_OutOfRange_swigregister", Standard_OutOfRange_swigregister, METH_VARARGS, NULL},
+	 { NULL, NULL, 0, NULL }
+};
+
+
+/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */
+
+static void *_p_Standard_UnderflowTo_p_Standard_Failure(void *x) {
+    return (void *)((Standard_Failure *) (Standard_NumericError *) ((Standard_Underflow *) x));
+}
+static void *_p_Standard_OverflowTo_p_Standard_Failure(void *x) {
+    return (void *)((Standard_Failure *) (Standard_NumericError *) ((Standard_Overflow *) x));
+}
+static void *_p_Standard_NullValueTo_p_Standard_Failure(void *x) {
+    return (void *)((Standard_Failure *) (Standard_DomainError *)(Standard_RangeError *) ((Standard_NullValue *) x));
+}
+static void *_p_Standard_NoSuchObjectTo_p_Standard_Failure(void *x) {
+    return (void *)((Standard_Failure *) (Standard_DomainError *) ((Standard_NoSuchObject *) x));
+}
+static void *_p_Standard_NullObjectTo_p_Standard_Failure(void *x) {
+    return (void *)((Standard_Failure *) (Standard_DomainError *) ((Standard_NullObject *) x));
+}
+static void *_p_Standard_NumericErrorTo_p_Standard_Failure(void *x) {
+    return (void *)((Standard_Failure *)  ((Standard_NumericError *) x));
+}
+static void *_p_Standard_NotImplementedTo_p_Standard_Failure(void *x) {
+    return (void *)((Standard_Failure *) (Standard_ProgramError *) ((Standard_NotImplemented *) x));
+}
+static void *_p_Standard_OutOfMemoryTo_p_Standard_Failure(void *x) {
+    return (void *)((Standard_Failure *) (Standard_ProgramError *) ((Standard_OutOfMemory *) x));
+}
+static void *_p_Standard_NegativeValueTo_p_Standard_Failure(void *x) {
+    return (void *)((Standard_Failure *) (Standard_DomainError *)(Standard_RangeError *) ((Standard_NegativeValue *) x));
+}
+static void *_p_Standard_ProgramErrorTo_p_Standard_Failure(void *x) {
+    return (void *)((Standard_Failure *)  ((Standard_ProgramError *) x));
+}
+static void *_p_Standard_RangeErrorTo_p_Standard_Failure(void *x) {
+    return (void *)((Standard_Failure *) (Standard_DomainError *) ((Standard_RangeError *) x));
+}
+static void *_p_Standard_LicenseErrorTo_p_Standard_Failure(void *x) {
+    return (void *)((Standard_Failure *)  ((Standard_LicenseError *) x));
+}
+static void *_p_Standard_DimensionErrorTo_p_Standard_Failure(void *x) {
+    return (void *)((Standard_Failure *) (Standard_DomainError *) ((Standard_DimensionError *) x));
+}
+static void *_p_Standard_ConstructionErrorTo_p_Standard_Failure(void *x) {
+    return (void *)((Standard_Failure *) (Standard_DomainError *) ((Standard_ConstructionError *) x));
+}
+static void *_p_Standard_DomainErrorTo_p_Standard_Failure(void *x) {
+    return (void *)((Standard_Failure *)  ((Standard_DomainError *) x));
+}
+static void *_p_Standard_DivideByZeroTo_p_Standard_Failure(void *x) {
+    return (void *)((Standard_Failure *) (Standard_NumericError *) ((Standard_DivideByZero *) x));
+}
+static void *_p_Standard_LicenseNotFoundTo_p_Standard_Failure(void *x) {
+    return (void *)((Standard_Failure *) (Standard_LicenseError *) ((Standard_LicenseNotFound *) x));
+}
+static void *_p_Standard_TooManyUsersTo_p_Standard_Failure(void *x) {
+    return (void *)((Standard_Failure *) (Standard_LicenseError *) ((Standard_TooManyUsers *) x));
+}
+static void *_p_Standard_NoMoreObjectTo_p_Standard_Failure(void *x) {
+    return (void *)((Standard_Failure *) (Standard_DomainError *) ((Standard_NoMoreObject *) x));
+}
+static void *_p_Standard_ImmutableObjectTo_p_Standard_Failure(void *x) {
+    return (void *)((Standard_Failure *) (Standard_DomainError *) ((Standard_ImmutableObject *) x));
+}
+static void *_p_Standard_AbortiveTransactionTo_p_Standard_Failure(void *x) {
+    return (void *)((Standard_Failure *)  ((Standard_AbortiveTransaction *) x));
+}
+static void *_p_Standard_MultiplyDefinedTo_p_Standard_Failure(void *x) {
+    return (void *)((Standard_Failure *) (Standard_DomainError *) ((Standard_MultiplyDefined *) x));
+}
+static void *_p_Standard_DimensionMismatchTo_p_Standard_Failure(void *x) {
+    return (void *)((Standard_Failure *) (Standard_DomainError *)(Standard_DimensionError *) ((Standard_DimensionMismatch *) x));
+}
+static void *_p_Standard_TypeMismatchTo_p_Standard_Failure(void *x) {
+    return (void *)((Standard_Failure *) (Standard_DomainError *) ((Standard_TypeMismatch *) x));
+}
+static void *_p_Standard_OutOfRangeTo_p_Standard_Failure(void *x) {
+    return (void *)((Standard_Failure *) (Standard_DomainError *)(Standard_RangeError *) ((Standard_OutOfRange *) x));
+}
+static void *_p_Handle_Standard_OverflowTo_p_Handle_Standard_Failure(void *x) {
+    return (void *)((Handle_Standard_Failure *) (Handle_Standard_NumericError *) ((Handle_Standard_Overflow *) x));
+}
+static void *_p_Handle_Standard_UnderflowTo_p_Handle_Standard_Failure(void *x) {
+    return (void *)((Handle_Standard_Failure *) (Handle_Standard_NumericError *) ((Handle_Standard_Underflow *) x));
+}
+static void *_p_Handle_Standard_NullValueTo_p_Handle_Standard_Failure(void *x) {
+    return (void *)((Handle_Standard_Failure *) (Handle_Standard_DomainError *)(Handle_Standard_RangeError *) ((Handle_Standard_NullValue *) x));
+}
+static void *_p_Handle_Standard_NullObjectTo_p_Handle_Standard_Failure(void *x) {
+    return (void *)((Handle_Standard_Failure *) (Handle_Standard_DomainError *) ((Handle_Standard_NullObject *) x));
+}
+static void *_p_Handle_Standard_NoSuchObjectTo_p_Handle_Standard_Failure(void *x) {
+    return (void *)((Handle_Standard_Failure *) (Handle_Standard_DomainError *) ((Handle_Standard_NoSuchObject *) x));
+}
+static void *_p_Handle_Standard_NumericErrorTo_p_Handle_Standard_Failure(void *x) {
+    return (void *)((Handle_Standard_Failure *)  ((Handle_Standard_NumericError *) x));
+}
+static void *_p_Handle_Standard_NotImplementedTo_p_Handle_Standard_Failure(void *x) {
+    return (void *)((Handle_Standard_Failure *) (Handle_Standard_ProgramError *) ((Handle_Standard_NotImplemented *) x));
+}
+static void *_p_Handle_Standard_OutOfMemoryTo_p_Handle_Standard_Failure(void *x) {
+    return (void *)((Handle_Standard_Failure *) (Handle_Standard_ProgramError *) ((Handle_Standard_OutOfMemory *) x));
+}
+static void *_p_Handle_Standard_NegativeValueTo_p_Handle_Standard_Failure(void *x) {
+    return (void *)((Handle_Standard_Failure *) (Handle_Standard_DomainError *)(Handle_Standard_RangeError *) ((Handle_Standard_NegativeValue *) x));
+}
+static void *_p_Handle_Standard_ProgramErrorTo_p_Handle_Standard_Failure(void *x) {
+    return (void *)((Handle_Standard_Failure *)  ((Handle_Standard_ProgramError *) x));
+}
+static void *_p_Handle_Standard_LicenseErrorTo_p_Handle_Standard_Failure(void *x) {
+    return (void *)((Handle_Standard_Failure *)  ((Handle_Standard_LicenseError *) x));
+}
+static void *_p_Handle_Standard_RangeErrorTo_p_Handle_Standard_Failure(void *x) {
+    return (void *)((Handle_Standard_Failure *) (Handle_Standard_DomainError *) ((Handle_Standard_RangeError *) x));
+}
+static void *_p_Handle_Standard_DivideByZeroTo_p_Handle_Standard_Failure(void *x) {
+    return (void *)((Handle_Standard_Failure *) (Handle_Standard_NumericError *) ((Handle_Standard_DivideByZero *) x));
+}
+static void *_p_Handle_Standard_DimensionErrorTo_p_Handle_Standard_Failure(void *x) {
+    return (void *)((Handle_Standard_Failure *) (Handle_Standard_DomainError *) ((Handle_Standard_DimensionError *) x));
+}
+static void *_p_Handle_Standard_DomainErrorTo_p_Handle_Standard_Failure(void *x) {
+    return (void *)((Handle_Standard_Failure *)  ((Handle_Standard_DomainError *) x));
+}
+static void *_p_Handle_Standard_ConstructionErrorTo_p_Handle_Standard_Failure(void *x) {
+    return (void *)((Handle_Standard_Failure *) (Handle_Standard_DomainError *) ((Handle_Standard_ConstructionError *) x));
+}
+static void *_p_Handle_Standard_LicenseNotFoundTo_p_Handle_Standard_Failure(void *x) {
+    return (void *)((Handle_Standard_Failure *) (Handle_Standard_LicenseError *) ((Handle_Standard_LicenseNotFound *) x));
+}
+static void *_p_Handle_Standard_TooManyUsersTo_p_Handle_Standard_Failure(void *x) {
+    return (void *)((Handle_Standard_Failure *) (Handle_Standard_LicenseError *) ((Handle_Standard_TooManyUsers *) x));
+}
+static void *_p_Handle_Standard_AbortiveTransactionTo_p_Handle_Standard_Failure(void *x) {
+    return (void *)((Handle_Standard_Failure *)  ((Handle_Standard_AbortiveTransaction *) x));
+}
+static void *_p_Handle_Standard_NoMoreObjectTo_p_Handle_Standard_Failure(void *x) {
+    return (void *)((Handle_Standard_Failure *) (Handle_Standard_DomainError *) ((Handle_Standard_NoMoreObject *) x));
+}
+static void *_p_Handle_Standard_ImmutableObjectTo_p_Handle_Standard_Failure(void *x) {
+    return (void *)((Handle_Standard_Failure *) (Handle_Standard_DomainError *) ((Handle_Standard_ImmutableObject *) x));
+}
+static void *_p_Handle_Standard_MultiplyDefinedTo_p_Handle_Standard_Failure(void *x) {
+    return (void *)((Handle_Standard_Failure *) (Handle_Standard_DomainError *) ((Handle_Standard_MultiplyDefined *) x));
+}
+static void *_p_Handle_Standard_OutOfRangeTo_p_Handle_Standard_Failure(void *x) {
+    return (void *)((Handle_Standard_Failure *) (Handle_Standard_DomainError *)(Handle_Standard_RangeError *) ((Handle_Standard_OutOfRange *) x));
+}
+static void *_p_Handle_Standard_TypeMismatchTo_p_Handle_Standard_Failure(void *x) {
+    return (void *)((Handle_Standard_Failure *) (Handle_Standard_DomainError *) ((Handle_Standard_TypeMismatch *) x));
+}
+static void *_p_Handle_Standard_DimensionMismatchTo_p_Handle_Standard_Failure(void *x) {
+    return (void *)((Handle_Standard_Failure *) (Handle_Standard_DomainError *)(Handle_Standard_DimensionError *) ((Handle_Standard_DimensionMismatch *) x));
+}
+static void *_p_Standard_MMgrOptTo_p_Standard_MMgrRoot(void *x) {
+    return (void *)((Standard_MMgrRoot *)  ((Standard_MMgrOpt *) x));
+}
+static void *_p_Standard_MMgrRawTo_p_Standard_MMgrRoot(void *x) {
+    return (void *)((Standard_MMgrRoot *)  ((Standard_MMgrRaw *) x));
+}
+static void *_p_Handle_Standard_DivideByZeroTo_p_Handle_Standard_NumericError(void *x) {
+    return (void *)((Handle_Standard_NumericError *)  ((Handle_Standard_DivideByZero *) x));
+}
+static void *_p_Handle_Standard_OverflowTo_p_Handle_Standard_NumericError(void *x) {
+    return (void *)((Handle_Standard_NumericError *)  ((Handle_Standard_Overflow *) x));
+}
+static void *_p_Handle_Standard_UnderflowTo_p_Handle_Standard_NumericError(void *x) {
+    return (void *)((Handle_Standard_NumericError *)  ((Handle_Standard_Underflow *) x));
+}
+static void *_p_Standard_DivideByZeroTo_p_Standard_NumericError(void *x) {
+    return (void *)((Standard_NumericError *)  ((Standard_DivideByZero *) x));
+}
+static void *_p_Standard_UnderflowTo_p_Standard_NumericError(void *x) {
+    return (void *)((Standard_NumericError *)  ((Standard_Underflow *) x));
+}
+static void *_p_Standard_OverflowTo_p_Standard_NumericError(void *x) {
+    return (void *)((Standard_NumericError *)  ((Standard_Overflow *) x));
+}
+static void *_p_Handle_Standard_DimensionMismatchTo_p_Handle_Standard_DimensionError(void *x) {
+    return (void *)((Handle_Standard_DimensionError *)  ((Handle_Standard_DimensionMismatch *) x));
+}
+static void *_p_Handle_Standard_DimensionErrorTo_p_Handle_Standard_DomainError(void *x) {
+    return (void *)((Handle_Standard_DomainError *)  ((Handle_Standard_DimensionError *) x));
+}
+static void *_p_Handle_Standard_ConstructionErrorTo_p_Handle_Standard_DomainError(void *x) {
+    return (void *)((Handle_Standard_DomainError *)  ((Handle_Standard_ConstructionError *) x));
+}
+static void *_p_Handle_Standard_TypeMismatchTo_p_Handle_Standard_DomainError(void *x) {
+    return (void *)((Handle_Standard_DomainError *)  ((Handle_Standard_TypeMismatch *) x));
+}
+static void *_p_Handle_Standard_OutOfRangeTo_p_Handle_Standard_DomainError(void *x) {
+    return (void *)((Handle_Standard_DomainError *) (Handle_Standard_RangeError *) ((Handle_Standard_OutOfRange *) x));
+}
+static void *_p_Handle_Standard_DimensionMismatchTo_p_Handle_Standard_DomainError(void *x) {
+    return (void *)((Handle_Standard_DomainError *) (Handle_Standard_DimensionError *) ((Handle_Standard_DimensionMismatch *) x));
+}
+static void *_p_Handle_Standard_MultiplyDefinedTo_p_Handle_Standard_DomainError(void *x) {
+    return (void *)((Handle_Standard_DomainError *)  ((Handle_Standard_MultiplyDefined *) x));
+}
+static void *_p_Handle_Standard_RangeErrorTo_p_Handle_Standard_DomainError(void *x) {
+    return (void *)((Handle_Standard_DomainError *)  ((Handle_Standard_RangeError *) x));
+}
+static void *_p_Handle_Standard_NullObjectTo_p_Handle_Standard_DomainError(void *x) {
+    return (void *)((Handle_Standard_DomainError *)  ((Handle_Standard_NullObject *) x));
+}
+static void *_p_Handle_Standard_NoSuchObjectTo_p_Handle_Standard_DomainError(void *x) {
+    return (void *)((Handle_Standard_DomainError *)  ((Handle_Standard_NoSuchObject *) x));
+}
+static void *_p_Handle_Standard_NoMoreObjectTo_p_Handle_Standard_DomainError(void *x) {
+    return (void *)((Handle_Standard_DomainError *)  ((Handle_Standard_NoMoreObject *) x));
+}
+static void *_p_Handle_Standard_ImmutableObjectTo_p_Handle_Standard_DomainError(void *x) {
+    return (void *)((Handle_Standard_DomainError *)  ((Handle_Standard_ImmutableObject *) x));
+}
+static void *_p_Handle_Standard_NullValueTo_p_Handle_Standard_DomainError(void *x) {
+    return (void *)((Handle_Standard_DomainError *) (Handle_Standard_RangeError *) ((Handle_Standard_NullValue *) x));
+}
+static void *_p_Handle_Standard_NegativeValueTo_p_Handle_Standard_DomainError(void *x) {
+    return (void *)((Handle_Standard_DomainError *) (Handle_Standard_RangeError *) ((Handle_Standard_NegativeValue *) x));
+}
+static void *_p_Standard_ConstructionErrorTo_p_Standard_DomainError(void *x) {
+    return (void *)((Standard_DomainError *)  ((Standard_ConstructionError *) x));
+}
+static void *_p_Standard_DimensionErrorTo_p_Standard_DomainError(void *x) {
+    return (void *)((Standard_DomainError *)  ((Standard_DimensionError *) x));
+}
+static void *_p_Standard_TypeMismatchTo_p_Standard_DomainError(void *x) {
+    return (void *)((Standard_DomainError *)  ((Standard_TypeMismatch *) x));
+}
+static void *_p_Standard_DimensionMismatchTo_p_Standard_DomainError(void *x) {
+    return (void *)((Standard_DomainError *) (Standard_DimensionError *) ((Standard_DimensionMismatch *) x));
+}
+static void *_p_Standard_OutOfRangeTo_p_Standard_DomainError(void *x) {
+    return (void *)((Standard_DomainError *) (Standard_RangeError *) ((Standard_OutOfRange *) x));
+}
+static void *_p_Standard_MultiplyDefinedTo_p_Standard_DomainError(void *x) {
+    return (void *)((Standard_DomainError *)  ((Standard_MultiplyDefined *) x));
+}
+static void *_p_Standard_NoSuchObjectTo_p_Standard_DomainError(void *x) {
+    return (void *)((Standard_DomainError *)  ((Standard_NoSuchObject *) x));
+}
+static void *_p_Standard_RangeErrorTo_p_Standard_DomainError(void *x) {
+    return (void *)((Standard_DomainError *)  ((Standard_RangeError *) x));
+}
+static void *_p_Standard_NullObjectTo_p_Standard_DomainError(void *x) {
+    return (void *)((Standard_DomainError *)  ((Standard_NullObject *) x));
+}
+static void *_p_Standard_NoMoreObjectTo_p_Standard_DomainError(void *x) {
+    return (void *)((Standard_DomainError *)  ((Standard_NoMoreObject *) x));
+}
+static void *_p_Standard_ImmutableObjectTo_p_Standard_DomainError(void *x) {
+    return (void *)((Standard_DomainError *)  ((Standard_ImmutableObject *) x));
+}
+static void *_p_Standard_NullValueTo_p_Standard_DomainError(void *x) {
+    return (void *)((Standard_DomainError *) (Standard_RangeError *) ((Standard_NullValue *) x));
+}
+static void *_p_Standard_NegativeValueTo_p_Standard_DomainError(void *x) {
+    return (void *)((Standard_DomainError *) (Standard_RangeError *) ((Standard_NegativeValue *) x));
+}
+static void *_p_Standard_DimensionMismatchTo_p_Standard_DimensionError(void *x) {
+    return (void *)((Standard_DimensionError *)  ((Standard_DimensionMismatch *) x));
+}
+static void *_p_Handle_Standard_LicenseNotFoundTo_p_Handle_Standard_LicenseError(void *x) {
+    return (void *)((Handle_Standard_LicenseError *)  ((Handle_Standard_LicenseNotFound *) x));
+}
+static void *_p_Handle_Standard_TooManyUsersTo_p_Handle_Standard_LicenseError(void *x) {
+    return (void *)((Handle_Standard_LicenseError *)  ((Handle_Standard_TooManyUsers *) x));
+}
+static void *_p_Handle_Standard_OutOfRangeTo_p_Handle_Standard_RangeError(void *x) {
+    return (void *)((Handle_Standard_RangeError *)  ((Handle_Standard_OutOfRange *) x));
+}
+static void *_p_Handle_Standard_NullValueTo_p_Handle_Standard_RangeError(void *x) {
+    return (void *)((Handle_Standard_RangeError *)  ((Handle_Standard_NullValue *) x));
+}
+static void *_p_Handle_Standard_NegativeValueTo_p_Handle_Standard_RangeError(void *x) {
+    return (void *)((Handle_Standard_RangeError *)  ((Handle_Standard_NegativeValue *) x));
+}
+static void *_p_Standard_OutOfRangeTo_p_Standard_RangeError(void *x) {
+    return (void *)((Standard_RangeError *)  ((Standard_OutOfRange *) x));
+}
+static void *_p_Standard_NullValueTo_p_Standard_RangeError(void *x) {
+    return (void *)((Standard_RangeError *)  ((Standard_NullValue *) x));
+}
+static void *_p_Standard_NegativeValueTo_p_Standard_RangeError(void *x) {
+    return (void *)((Standard_RangeError *)  ((Standard_NegativeValue *) x));
+}
+static void *_p_Standard_LicenseNotFoundTo_p_Standard_LicenseError(void *x) {
+    return (void *)((Standard_LicenseError *)  ((Standard_LicenseNotFound *) x));
+}
+static void *_p_Standard_TooManyUsersTo_p_Standard_LicenseError(void *x) {
+    return (void *)((Standard_LicenseError *)  ((Standard_TooManyUsers *) x));
+}
+static void *_p_Standard_UnderflowTo_p_Standard_Transient(void *x) {
+    return (void *)((Standard_Transient *) (Standard_Failure *)(Standard_NumericError *) ((Standard_Underflow *) x));
+}
+static void *_p_Standard_OverflowTo_p_Standard_Transient(void *x) {
+    return (void *)((Standard_Transient *) (Standard_Failure *)(Standard_NumericError *) ((Standard_Overflow *) x));
+}
+static void *_p_Standard_NullValueTo_p_Standard_Transient(void *x) {
+    return (void *)((Standard_Transient *) (Standard_Failure *)(Standard_DomainError *)(Standard_RangeError *) ((Standard_NullValue *) x));
+}
+static void *_p_Standard_NoSuchObjectTo_p_Standard_Transient(void *x) {
+    return (void *)((Standard_Transient *) (Standard_Failure *)(Standard_DomainError *) ((Standard_NoSuchObject *) x));
+}
+static void *_p_Standard_NullObjectTo_p_Standard_Transient(void *x) {
+    return (void *)((Standard_Transient *) (Standard_Failure *)(Standard_DomainError *) ((Standard_NullObject *) x));
+}
+static void *_p_Standard_NumericErrorTo_p_Standard_Transient(void *x) {
+    return (void *)((Standard_Transient *) (Standard_Failure *) ((Standard_NumericError *) x));
+}
+static void *_p_Standard_NotImplementedTo_p_Standard_Transient(void *x) {
+    return (void *)((Standard_Transient *) (Standard_Failure *)(Standard_ProgramError *) ((Standard_NotImplemented *) x));
+}
+static void *_p_Standard_OutOfMemoryTo_p_Standard_Transient(void *x) {
+    return (void *)((Standard_Transient *) (Standard_Failure *)(Standard_ProgramError *) ((Standard_OutOfMemory *) x));
+}
+static void *_p_Standard_NegativeValueTo_p_Standard_Transient(void *x) {
+    return (void *)((Standard_Transient *) (Standard_Failure *)(Standard_DomainError *)(Standard_RangeError *) ((Standard_NegativeValue *) x));
+}
+static void *_p_Standard_ProgramErrorTo_p_Standard_Transient(void *x) {
+    return (void *)((Standard_Transient *) (Standard_Failure *) ((Standard_ProgramError *) x));
+}
+static void *_p_Standard_RangeErrorTo_p_Standard_Transient(void *x) {
+    return (void *)((Standard_Transient *) (Standard_Failure *)(Standard_DomainError *) ((Standard_RangeError *) x));
+}
+static void *_p_Standard_LicenseErrorTo_p_Standard_Transient(void *x) {
+    return (void *)((Standard_Transient *) (Standard_Failure *) ((Standard_LicenseError *) x));
+}
+static void *_p_Standard_TypeTo_p_Standard_Transient(void *x) {
+    return (void *)((Standard_Transient *)  ((Standard_Type *) x));
+}
+static void *_p_Standard_DimensionErrorTo_p_Standard_Transient(void *x) {
+    return (void *)((Standard_Transient *) (Standard_Failure *)(Standard_DomainError *) ((Standard_DimensionError *) x));
+}
+static void *_p_Standard_ConstructionErrorTo_p_Standard_Transient(void *x) {
+    return (void *)((Standard_Transient *) (Standard_Failure *)(Standard_DomainError *) ((Standard_ConstructionError *) x));
+}
+static void *_p_Standard_DomainErrorTo_p_Standard_Transient(void *x) {
+    return (void *)((Standard_Transient *) (Standard_Failure *) ((Standard_DomainError *) x));
+}
+static void *_p_Standard_DivideByZeroTo_p_Standard_Transient(void *x) {
+    return (void *)((Standard_Transient *) (Standard_Failure *)(Standard_NumericError *) ((Standard_DivideByZero *) x));
+}
+static void *_p_Standard_LicenseNotFoundTo_p_Standard_Transient(void *x) {
+    return (void *)((Standard_Transient *) (Standard_Failure *)(Standard_LicenseError *) ((Standard_LicenseNotFound *) x));
+}
+static void *_p_Standard_TooManyUsersTo_p_Standard_Transient(void *x) {
+    return (void *)((Standard_Transient *) (Standard_Failure *)(Standard_LicenseError *) ((Standard_TooManyUsers *) x));
+}
+static void *_p_Standard_NoMoreObjectTo_p_Standard_Transient(void *x) {
+    return (void *)((Standard_Transient *) (Standard_Failure *)(Standard_DomainError *) ((Standard_NoMoreObject *) x));
+}
+static void *_p_Standard_ImmutableObjectTo_p_Standard_Transient(void *x) {
+    return (void *)((Standard_Transient *) (Standard_Failure *)(Standard_DomainError *) ((Standard_ImmutableObject *) x));
+}
+static void *_p_Standard_AbortiveTransactionTo_p_Standard_Transient(void *x) {
+    return (void *)((Standard_Transient *) (Standard_Failure *) ((Standard_AbortiveTransaction *) x));
+}
+static void *_p_Standard_MultiplyDefinedTo_p_Standard_Transient(void *x) {
+    return (void *)((Standard_Transient *) (Standard_Failure *)(Standard_DomainError *) ((Standard_MultiplyDefined *) x));
+}
+static void *_p_Standard_FailureTo_p_Standard_Transient(void *x) {
+    return (void *)((Standard_Transient *)  ((Standard_Failure *) x));
+}
+static void *_p_Standard_DimensionMismatchTo_p_Standard_Transient(void *x) {
+    return (void *)((Standard_Transient *) (Standard_Failure *)(Standard_DomainError *)(Standard_DimensionError *) ((Standard_DimensionMismatch *) x));
+}
+static void *_p_Standard_TypeMismatchTo_p_Standard_Transient(void *x) {
+    return (void *)((Standard_Transient *) (Standard_Failure *)(Standard_DomainError *) ((Standard_TypeMismatch *) x));
+}
+static void *_p_Standard_OutOfRangeTo_p_Standard_Transient(void *x) {
+    return (void *)((Standard_Transient *) (Standard_Failure *)(Standard_DomainError *)(Standard_RangeError *) ((Standard_OutOfRange *) x));
+}
+static void *_p_Handle_Standard_OverflowTo_p_Handle_Standard_Transient(void *x) {
+    return (void *)((Handle_Standard_Transient *) (Handle_Standard_Failure *)(Handle_Standard_NumericError *) ((Handle_Standard_Overflow *) x));
+}
+static void *_p_Handle_Standard_UnderflowTo_p_Handle_Standard_Transient(void *x) {
+    return (void *)((Handle_Standard_Transient *) (Handle_Standard_Failure *)(Handle_Standard_NumericError *) ((Handle_Standard_Underflow *) x));
+}
+static void *_p_Handle_Standard_NullValueTo_p_Handle_Standard_Transient(void *x) {
+    return (void *)((Handle_Standard_Transient *) (Handle_Standard_Failure *)(Handle_Standard_DomainError *)(Handle_Standard_RangeError *) ((Handle_Standard_NullValue *) x));
+}
+static void *_p_Handle_Standard_NullObjectTo_p_Handle_Standard_Transient(void *x) {
+    return (void *)((Handle_Standard_Transient *) (Handle_Standard_Failure *)(Handle_Standard_DomainError *) ((Handle_Standard_NullObject *) x));
+}
+static void *_p_Handle_Standard_NoSuchObjectTo_p_Handle_Standard_Transient(void *x) {
+    return (void *)((Handle_Standard_Transient *) (Handle_Standard_Failure *)(Handle_Standard_DomainError *) ((Handle_Standard_NoSuchObject *) x));
+}
+static void *_p_Handle_Standard_NumericErrorTo_p_Handle_Standard_Transient(void *x) {
+    return (void *)((Handle_Standard_Transient *) (Handle_Standard_Failure *) ((Handle_Standard_NumericError *) x));
+}
+static void *_p_Handle_Standard_NotImplementedTo_p_Handle_Standard_Transient(void *x) {
+    return (void *)((Handle_Standard_Transient *) (Handle_Standard_Failure *)(Handle_Standard_ProgramError *) ((Handle_Standard_NotImplemented *) x));
+}
+static void *_p_Handle_Standard_OutOfMemoryTo_p_Handle_Standard_Transient(void *x) {
+    return (void *)((Handle_Standard_Transient *) (Handle_Standard_Failure *)(Handle_Standard_ProgramError *) ((Handle_Standard_OutOfMemory *) x));
+}
+static void *_p_Handle_Standard_NegativeValueTo_p_Handle_Standard_Transient(void *x) {
+    return (void *)((Handle_Standard_Transient *) (Handle_Standard_Failure *)(Handle_Standard_DomainError *)(Handle_Standard_RangeError *) ((Handle_Standard_NegativeValue *) x));
+}
+static void *_p_Handle_Standard_ProgramErrorTo_p_Handle_Standard_Transient(void *x) {
+    return (void *)((Handle_Standard_Transient *) (Handle_Standard_Failure *) ((Handle_Standard_ProgramError *) x));
+}
+static void *_p_Handle_Standard_RangeErrorTo_p_Handle_Standard_Transient(void *x) {
+    return (void *)((Handle_Standard_Transient *) (Handle_Standard_Failure *)(Handle_Standard_DomainError *) ((Handle_Standard_RangeError *) x));
+}
+static void *_p_Handle_Standard_LicenseErrorTo_p_Handle_Standard_Transient(void *x) {
+    return (void *)((Handle_Standard_Transient *) (Handle_Standard_Failure *) ((Handle_Standard_LicenseError *) x));
+}
+static void *_p_Handle_Standard_TypeTo_p_Handle_Standard_Transient(void *x) {
+    return (void *)((Handle_Standard_Transient *)  ((Handle_Standard_Type *) x));
+}
+static void *_p_Handle_Standard_DivideByZeroTo_p_Handle_Standard_Transient(void *x) {
+    return (void *)((Handle_Standard_Transient *) (Handle_Standard_Failure *)(Handle_Standard_NumericError *) ((Handle_Standard_DivideByZero *) x));
+}
+static void *_p_Handle_Standard_DimensionErrorTo_p_Handle_Standard_Transient(void *x) {
+    return (void *)((Handle_Standard_Transient *) (Handle_Standard_Failure *)(Handle_Standard_DomainError *) ((Handle_Standard_DimensionError *) x));
+}
+static void *_p_Handle_Standard_DomainErrorTo_p_Handle_Standard_Transient(void *x) {
+    return (void *)((Handle_Standard_Transient *) (Handle_Standard_Failure *) ((Handle_Standard_DomainError *) x));
+}
+static void *_p_Handle_Standard_ConstructionErrorTo_p_Handle_Standard_Transient(void *x) {
+    return (void *)((Handle_Standard_Transient *) (Handle_Standard_Failure *)(Handle_Standard_DomainError *) ((Handle_Standard_ConstructionError *) x));
+}
+static void *_p_Handle_Standard_LicenseNotFoundTo_p_Handle_Standard_Transient(void *x) {
+    return (void *)((Handle_Standard_Transient *) (Handle_Standard_Failure *)(Handle_Standard_LicenseError *) ((Handle_Standard_LicenseNotFound *) x));
+}
+static void *_p_Handle_Standard_TooManyUsersTo_p_Handle_Standard_Transient(void *x) {
+    return (void *)((Handle_Standard_Transient *) (Handle_Standard_Failure *)(Handle_Standard_LicenseError *) ((Handle_Standard_TooManyUsers *) x));
+}
+static void *_p_Handle_Standard_AbortiveTransactionTo_p_Handle_Standard_Transient(void *x) {
+    return (void *)((Handle_Standard_Transient *) (Handle_Standard_Failure *) ((Handle_Standard_AbortiveTransaction *) x));
+}
+static void *_p_Handle_Standard_NoMoreObjectTo_p_Handle_Standard_Transient(void *x) {
+    return (void *)((Handle_Standard_Transient *) (Handle_Standard_Failure *)(Handle_Standard_DomainError *) ((Handle_Standard_NoMoreObject *) x));
+}
+static void *_p_Handle_Standard_ImmutableObjectTo_p_Handle_Standard_Transient(void *x) {
+    return (void *)((Handle_Standard_Transient *) (Handle_Standard_Failure *)(Handle_Standard_DomainError *) ((Handle_Standard_ImmutableObject *) x));
+}
+static void *_p_Handle_Standard_MultiplyDefinedTo_p_Handle_Standard_Transient(void *x) {
+    return (void *)((Handle_Standard_Transient *) (Handle_Standard_Failure *)(Handle_Standard_DomainError *) ((Handle_Standard_MultiplyDefined *) x));
+}
+static void *_p_Handle_Standard_FailureTo_p_Handle_Standard_Transient(void *x) {
+    return (void *)((Handle_Standard_Transient *)  ((Handle_Standard_Failure *) x));
+}
+static void *_p_Handle_Standard_OutOfRangeTo_p_Handle_Standard_Transient(void *x) {
+    return (void *)((Handle_Standard_Transient *) (Handle_Standard_Failure *)(Handle_Standard_DomainError *)(Handle_Standard_RangeError *) ((Handle_Standard_OutOfRange *) x));
+}
+static void *_p_Handle_Standard_TypeMismatchTo_p_Handle_Standard_Transient(void *x) {
+    return (void *)((Handle_Standard_Transient *) (Handle_Standard_Failure *)(Handle_Standard_DomainError *) ((Handle_Standard_TypeMismatch *) x));
+}
+static void *_p_Handle_Standard_DimensionMismatchTo_p_Handle_Standard_Transient(void *x) {
+    return (void *)((Handle_Standard_Transient *) (Handle_Standard_Failure *)(Handle_Standard_DomainError *)(Handle_Standard_DimensionError *) ((Handle_Standard_DimensionMismatch *) x));
+}
+static void *_p_Standard_MutexTo_p_Standard_ErrorHandlerCallback(void *x) {
+    return (void *)((Standard_ErrorHandlerCallback *)  ((Standard_Mutex *) x));
+}
+static void *_p_Handle_Standard_OutOfMemoryTo_p_Handle_Standard_ProgramError(void *x) {
+    return (void *)((Handle_Standard_ProgramError *)  ((Handle_Standard_OutOfMemory *) x));
+}
+static void *_p_Handle_Standard_NotImplementedTo_p_Handle_Standard_ProgramError(void *x) {
+    return (void *)((Handle_Standard_ProgramError *)  ((Handle_Standard_NotImplemented *) x));
+}
+static void *_p_Standard_OutOfMemoryTo_p_Standard_ProgramError(void *x) {
+    return (void *)((Standard_ProgramError *)  ((Standard_OutOfMemory *) x));
+}
+static void *_p_Standard_NotImplementedTo_p_Standard_ProgramError(void *x) {
+    return (void *)((Standard_ProgramError *)  ((Standard_NotImplemented *) x));
+}
+static swig_type_info _swigt__p_GUID = {"_p_GUID", "GUID *|Standard_UUID *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Handle_Standard_AbortiveTransaction = {"_p_Handle_Standard_AbortiveTransaction", "Handle_Standard_AbortiveTransaction *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Handle_Standard_ConstructionError = {"_p_Handle_Standard_ConstructionError", "Handle_Standard_ConstructionError *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Handle_Standard_DimensionError = {"_p_Handle_Standard_DimensionError", "Handle_Standard_DimensionError *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Handle_Standard_DimensionMismatch = {"_p_Handle_Standard_DimensionMismatch", "Handle_Standard_DimensionMismatch *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Handle_Standard_DivideByZero = {"_p_Handle_Standard_DivideByZero", "Handle_Standard_DivideByZero *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Handle_Standard_DomainError = {"_p_Handle_Standard_DomainError", "Handle_Standard_DomainError *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Handle_Standard_Failure = {"_p_Handle_Standard_Failure", "Handle_Standard_Failure *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Handle_Standard_ImmutableObject = {"_p_Handle_Standard_ImmutableObject", "Handle_Standard_ImmutableObject *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Handle_Standard_LicenseError = {"_p_Handle_Standard_LicenseError", "Handle_Standard_LicenseError *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Handle_Standard_LicenseNotFound = {"_p_Handle_Standard_LicenseNotFound", "Handle_Standard_LicenseNotFound *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Handle_Standard_MultiplyDefined = {"_p_Handle_Standard_MultiplyDefined", "Handle_Standard_MultiplyDefined *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Handle_Standard_NegativeValue = {"_p_Handle_Standard_NegativeValue", "Handle_Standard_NegativeValue *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Handle_Standard_NoMoreObject = {"_p_Handle_Standard_NoMoreObject", "Handle_Standard_NoMoreObject *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Handle_Standard_NoSuchObject = {"_p_Handle_Standard_NoSuchObject", "Handle_Standard_NoSuchObject *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Handle_Standard_NotImplemented = {"_p_Handle_Standard_NotImplemented", "Handle_Standard_NotImplemented *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Handle_Standard_NullObject = {"_p_Handle_Standard_NullObject", "Handle_Standard_NullObject *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Handle_Standard_NullValue = {"_p_Handle_Standard_NullValue", "Handle_Standard_NullValue *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Handle_Standard_NumericError = {"_p_Handle_Standard_NumericError", "Handle_Standard_NumericError *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Handle_Standard_OutOfMemory = {"_p_Handle_Standard_OutOfMemory", "Handle_Standard_OutOfMemory *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Handle_Standard_OutOfRange = {"_p_Handle_Standard_OutOfRange", "Handle_Standard_OutOfRange *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Handle_Standard_Overflow = {"_p_Handle_Standard_Overflow", "Handle_Standard_Overflow *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Handle_Standard_Persistent = {"_p_Handle_Standard_Persistent", "Handle_Standard_Persistent *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Handle_Standard_ProgramError = {"_p_Handle_Standard_ProgramError", "Handle_Standard_ProgramError *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Handle_Standard_RangeError = {"_p_Handle_Standard_RangeError", "Handle_Standard_RangeError *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Handle_Standard_TooManyUsers = {"_p_Handle_Standard_TooManyUsers", "Handle_Standard_TooManyUsers *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Handle_Standard_Transient = {"_p_Handle_Standard_Transient", "Handle_Standard_Transient *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Handle_Standard_Type = {"_p_Handle_Standard_Type", "Handle_Standard_Type *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Handle_Standard_TypeMismatch = {"_p_Handle_Standard_TypeMismatch", "Handle_Standard_TypeMismatch *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Handle_Standard_Underflow = {"_p_Handle_Standard_Underflow", "Handle_Standard_Underflow *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard = {"_p_Standard", "Standard *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_AbortiveTransaction = {"_p_Standard_AbortiveTransaction", "Standard_AbortiveTransaction *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_AncestorIterator = {"_p_Standard_AncestorIterator", "Standard_AncestorIterator *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_ConstructionError = {"_p_Standard_ConstructionError", "Standard_ConstructionError *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_DimensionError = {"_p_Standard_DimensionError", "Standard_DimensionError *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_DimensionMismatch = {"_p_Standard_DimensionMismatch", "Standard_DimensionMismatch *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_DivideByZero = {"_p_Standard_DivideByZero", "Standard_DivideByZero *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_DomainError = {"_p_Standard_DomainError", "Standard_DomainError *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_ErrorHandler = {"_p_Standard_ErrorHandler", "Standard_ErrorHandler *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_ErrorHandlerCallback = {"_p_Standard_ErrorHandlerCallback", "Standard_ErrorHandlerCallback *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_Failure = {"_p_Standard_Failure", "Standard_Failure *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_GUID = {"_p_Standard_GUID", "Standard_GUID *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_ImmutableObject = {"_p_Standard_ImmutableObject", "Standard_ImmutableObject *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_LicenseError = {"_p_Standard_LicenseError", "Standard_LicenseError *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_LicenseNotFound = {"_p_Standard_LicenseNotFound", "Standard_LicenseNotFound *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_MMgrOpt = {"_p_Standard_MMgrOpt", "Standard_MMgrOpt *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_MMgrRaw = {"_p_Standard_MMgrRaw", "Standard_MMgrRaw *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_MMgrRoot = {"_p_Standard_MMgrRoot", "Standard_MMgrRoot *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_MultiplyDefined = {"_p_Standard_MultiplyDefined", "Standard_MultiplyDefined *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_Mutex = {"_p_Standard_Mutex", "Standard_Mutex *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_NegativeValue = {"_p_Standard_NegativeValue", "Standard_NegativeValue *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_NoMoreObject = {"_p_Standard_NoMoreObject", "Standard_NoMoreObject *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_NoSuchObject = {"_p_Standard_NoSuchObject", "Standard_NoSuchObject *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_NotImplemented = {"_p_Standard_NotImplemented", "Standard_NotImplemented *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_NullObject = {"_p_Standard_NullObject", "Standard_NullObject *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_NullValue = {"_p_Standard_NullValue", "Standard_NullValue *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_NumericError = {"_p_Standard_NumericError", "Standard_NumericError *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_OutOfMemory = {"_p_Standard_OutOfMemory", "Standard_OutOfMemory *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_OutOfRange = {"_p_Standard_OutOfRange", "Standard_OutOfRange *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_Overflow = {"_p_Standard_Overflow", "Standard_Overflow *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_Persistent = {"_p_Standard_Persistent", "Standard_Persistent *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_ProgramError = {"_p_Standard_ProgramError", "Standard_ProgramError *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_RangeError = {"_p_Standard_RangeError", "Standard_RangeError *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_SStream = {"_p_Standard_SStream", "Standard_SStream *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_Storable = {"_p_Standard_Storable", "Standard_Storable *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_TooManyUsers = {"_p_Standard_TooManyUsers", "Standard_TooManyUsers *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_Transient = {"_p_Standard_Transient", "Standard_Transient *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_Type = {"_p_Standard_Type", "Standard_Type *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_TypeMismatch = {"_p_Standard_TypeMismatch", "Standard_TypeMismatch *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_Standard_Underflow = {"_p_Standard_Underflow", "Standard_Underflow *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_char = {"_p_char", "char *|Standard_Character *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_double = {"_p_double", "Standard_Real *|double *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_float = {"_p_float", "float *|Standard_ShortReal *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_int = {"_p_int", "int *|Standard_Integer *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_jmp_buf = {"_p_jmp_buf", "jmp_buf *|Standard_JmpBuf *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_p_void = {"_p_p_void", "Standard_Address *|void **", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_pthread_t = {"_p_pthread_t", "pthread_t *|Standard_ThreadId *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_short = {"_p_short", "short *|Standard_ExtCharacter *|Standard_ExtString|Standard_PExtCharacter", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_size_t = {"_p_size_t", "size_t *|Standard_Size *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_swig__PySwigIterator = {"_p_swig__PySwigIterator", "swig::PySwigIterator *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|Standard_Byte *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *|Standard_Boolean *", 0, 0, (void*)0, 0};
+static swig_type_info _swigt__p_void = {"_p_void", "Standard_Address|void *", 0, 0, (void*)0, 0};
+
+static swig_type_info *swig_type_initial[] = {
+  &_swigt__p_GUID,
+  &_swigt__p_Handle_Standard_AbortiveTransaction,
+  &_swigt__p_Handle_Standard_ConstructionError,
+  &_swigt__p_Handle_Standard_DimensionError,
+  &_swigt__p_Handle_Standard_DimensionMismatch,
+  &_swigt__p_Handle_Standard_DivideByZero,
+  &_swigt__p_Handle_Standard_DomainError,
+  &_swigt__p_Handle_Standard_Failure,
+  &_swigt__p_Handle_Standard_ImmutableObject,
+  &_swigt__p_Handle_Standard_LicenseError,
+  &_swigt__p_Handle_Standard_LicenseNotFound,
+  &_swigt__p_Handle_Standard_MultiplyDefined,
+  &_swigt__p_Handle_Standard_NegativeValue,
+  &_swigt__p_Handle_Standard_NoMoreObject,
+  &_swigt__p_Handle_Standard_NoSuchObject,
+  &_swigt__p_Handle_Standard_NotImplemented,
+  &_swigt__p_Handle_Standard_NullObject,
+  &_swigt__p_Handle_Standard_NullValue,
+  &_swigt__p_Handle_Standard_NumericError,
+  &_swigt__p_Handle_Standard_OutOfMemory,
+  &_swigt__p_Handle_Standard_OutOfRange,
+  &_swigt__p_Handle_Standard_Overflow,
+  &_swigt__p_Handle_Standard_Persistent,
+  &_swigt__p_Handle_Standard_ProgramError,
+  &_swigt__p_Handle_Standard_RangeError,
+  &_swigt__p_Handle_Standard_TooManyUsers,
+  &_swigt__p_Handle_Standard_Transient,
+  &_swigt__p_Handle_Standard_Type,
+  &_swigt__p_Handle_Standard_TypeMismatch,
+  &_swigt__p_Handle_Standard_Underflow,
+  &_swigt__p_Standard,
+  &_swigt__p_Standard_AbortiveTransaction,
+  &_swigt__p_Standard_AncestorIterator,
+  &_swigt__p_Standard_ConstructionError,
+  &_swigt__p_Standard_DimensionError,
+  &_swigt__p_Standard_DimensionMismatch,
+  &_swigt__p_Standard_DivideByZero,
+  &_swigt__p_Standard_DomainError,
+  &_swigt__p_Standard_ErrorHandler,
+  &_swigt__p_Standard_ErrorHandlerCallback,
+  &_swigt__p_Standard_Failure,
+  &_swigt__p_Standard_GUID,
+  &_swigt__p_Standard_ImmutableObject,
+  &_swigt__p_Standard_LicenseError,
+  &_swigt__p_Standard_LicenseNotFound,
+  &_swigt__p_Standard_MMgrOpt,
+  &_swigt__p_Standard_MMgrRaw,
+  &_swigt__p_Standard_MMgrRoot,
+  &_swigt__p_Standard_MultiplyDefined,
+  &_swigt__p_Standard_Mutex,
+  &_swigt__p_Standard_NegativeValue,
+  &_swigt__p_Standard_NoMoreObject,
+  &_swigt__p_Standard_NoSuchObject,
+  &_swigt__p_Standard_NotImplemented,
+  &_swigt__p_Standard_NullObject,
+  &_swigt__p_Standard_NullValue,
+  &_swigt__p_Standard_NumericError,
+  &_swigt__p_Standard_OutOfMemory,
+  &_swigt__p_Standard_OutOfRange,
+  &_swigt__p_Standard_Overflow,
+  &_swigt__p_Standard_Persistent,
+  &_swigt__p_Standard_ProgramError,
+  &_swigt__p_Standard_RangeError,
+  &_swigt__p_Standard_SStream,
+  &_swigt__p_Standard_Storable,
+  &_swigt__p_Standard_TooManyUsers,
+  &_swigt__p_Standard_Transient,
+  &_swigt__p_Standard_Type,
+  &_swigt__p_Standard_TypeMismatch,
+  &_swigt__p_Standard_Underflow,
+  &_swigt__p_char,
+  &_swigt__p_double,
+  &_swigt__p_float,
+  &_swigt__p_int,
+  &_swigt__p_jmp_buf,
+  &_swigt__p_p_void,
+  &_swigt__p_pthread_t,
+  &_swigt__p_short,
+  &_swigt__p_size_t,
+  &_swigt__p_std__invalid_argument,
+  &_swigt__p_swig__PySwigIterator,
+  &_swigt__p_unsigned_char,
+  &_swigt__p_unsigned_int,
+  &_swigt__p_void,
+};
+
+static swig_cast_info _swigc__p_GUID[] = {  {&_swigt__p_GUID, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Handle_Standard_AbortiveTransaction[] = {  {&_swigt__p_Handle_Standard_AbortiveTransaction, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Handle_Standard_ConstructionError[] = {  {&_swigt__p_Handle_Standard_ConstructionError, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Handle_Standard_DimensionError[] = {  {&_swigt__p_Handle_Standard_DimensionError, 0, 0, 0},  {&_swigt__p_Handle_Standard_DimensionMismatch, _p_Handle_Standard_DimensionMismatchTo_p_Handle_Standard_DimensionError, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Handle_Standard_DimensionMismatch[] = {  {&_swigt__p_Handle_Standard_DimensionMismatch, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Handle_Standard_DivideByZero[] = {  {&_swigt__p_Handle_Standard_DivideByZero, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Handle_Standard_DomainError[] = {  {&_swigt__p_Handle_Standard_NullValue, _p_Handle_Standard_NullValueTo_p_Handle_Standard_DomainError, 0, 0},  {&_swigt__p_Handle_Standard_NullObject, _p_Handle_Standard_NullObjectTo_p_Handle_Standard_DomainError, 0, 0},  {&_swigt__p_Handle_Standard_NoSuchObject, _p_Handle_Standard_NoSuchObjectTo_p_Handle_Standard_DomainError, 0, 0},  {&_swigt__p_Handle_Standard_NegativeValue, _p_Handle_Standard_NegativeValueTo_p_Handle_Standard_DomainError, 0, 0},  {&_swigt__p_Handle_Standard_RangeError, _p_Handle_Standard_RangeErrorTo_p_Handle_Standard_DomainError, 0, 0},  {&_swigt__p_Handle_Standard_DimensionError, _p_Handle_Standard_DimensionErrorTo_p_Handle_Standard_DomainError, 0, 0},  {&_swigt__p_Handle_Standard_ConstructionError, _p_Handle_Standard_ConstructionErrorTo_p_Handle_Standard_DomainError, 0, 0},  {&_swigt__p_Handle_Standard_DomainError, 0, 0, 0},  {&_swigt__p_Handle_Standard_NoMoreObject, _p_Handle_Standard_NoMoreObjectTo_p_Handle_Standard_DomainError, 0, 0},  {&_swigt__p_Handle_Standard_ImmutableObject, _p_Handle_Standard_ImmutableObjectTo_p_Handle_Standard_DomainError, 0, 0},  {&_swigt__p_Handle_Standard_MultiplyDefined, _p_Handle_Standard_MultiplyDefinedTo_p_Handle_Standard_DomainError, 0, 0},  {&_swigt__p_Handle_Standard_TypeMismatch, _p_Handle_Standard_TypeMismatchTo_p_Handle_Standard_DomainError, 0, 0},  {&_swigt__p_Handle_Standard_DimensionMismatch, _p_Handle_Standard_DimensionMismatchTo_p_Handle_Standard_DomainError, 0, 0},  {&_swigt__p_Handle_Standard_OutOfRange, _p_Handle_Standard_OutOfRangeTo_p_Handle_Standard_DomainError, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Handle_Standard_Failure[] = {  {&_swigt__p_Handle_Standard_Overflow, _p_Handle_Standard_OverflowTo_p_Handle_Standard_Failure, 0, 0},  {&_swigt__p_Handle_Standard_Underflow, _p_Handle_Standard_UnderflowTo_p_Handle_Standard_Failure, 0, 0},  {&_swigt__p_Handle_Standard_NullValue, _p_Handle_Standard_NullValueTo_p_Handle_Standard_Failure, 0, 0},  {&_swigt__p_Handle_Standard_NullObject, _p_Handle_Standard_NullObjectTo_p_Handle_Standard_Failure, 0, 0},  {&_swigt__p_Handle_Standard_NoSuchObject, _p_Handle_Standard_NoSuchObjectTo_p_Handle_Standard_Failure, 0, 0},  {&_swigt__p_Handle_Standard_NumericError, _p_Handle_Standard_NumericErrorTo_p_Handle_Standard_Failure, 0, 0},  {&_swigt__p_Handle_Standard_NotImplemented, _p_Handle_Standard_NotImplementedTo_p_Handle_Standard_Failure, 0, 0},  {&_swigt__p_Handle_Standard_OutOfMemory, _p_Handle_Standard_OutOfMemoryTo_p_Handle_Standard_Failure, 0, 0},  {&_swigt__p_Handle_Standard_NegativeValue, _p_Handle_Standard_NegativeValueTo_p_Handle_Standard_Failure, 0, 0},  {&_swigt__p_Handle_Standard_ProgramError, _p_Handle_Standard_ProgramErrorTo_p_Handle_Standard_Failure, 0, 0},  {&_swigt__p_Handle_Standard_RangeError, _p_Handle_Standard_RangeErrorTo_p_Handle_Standard_Failure, 0, 0},  {&_swigt__p_Handle_Standard_LicenseError, _p_Handle_Standard_LicenseErrorTo_p_Handle_Standard_Failure, 0, 0},  {&_swigt__p_Handle_Standard_DivideByZero, _p_Handle_Standard_DivideByZeroTo_p_Handle_Standard_Failure, 0, 0},  {&_swigt__p_Handle_Standard_DimensionError, _p_Handle_Standard_DimensionErrorTo_p_Handle_Standard_Failure, 0, 0},  {&_swigt__p_Handle_Standard_DomainError, _p_Handle_Standard_DomainErrorTo_p_Handle_Standard_Failure, 0, 0},  {&_swigt__p_Handle_Standard_ConstructionError, _p_Handle_Standard_ConstructionErrorTo_p_Handle_Standard_Failure, 0, 0},  {&_swigt__p_Handle_Standard_LicenseNotFound, _p_Handle_Standard_LicenseNotFoundTo_p_Handle_Standard_Failure, 0, 0},  {&_swigt__p_Handle_Standard_TooManyUsers, _p_Handle_Standard_TooManyUsersTo_p_Handle_Standard_Failure, 0, 0},  {&_swigt__p_Handle_Standard_ImmutableObject, _p_Handle_Standard_ImmutableObjectTo_p_Handle_Standard_Failure, 0, 0},  {&_swigt__p_Handle_Standard_NoMoreObject, _p_Handle_Standard_NoMoreObjectTo_p_Handle_Standard_Failure, 0, 0},  {&_swigt__p_Handle_Standard_MultiplyDefined, _p_Handle_Standard_MultiplyDefinedTo_p_Handle_Standard_Failure, 0, 0},  {&_swigt__p_Handle_Standard_AbortiveTransaction, _p_Handle_Standard_AbortiveTransactionTo_p_Handle_Standard_Failure, 0, 0},  {&_swigt__p_Handle_Standard_Failure, 0, 0, 0},  {&_swigt__p_Handle_Standard_OutOfRange, _p_Handle_Standard_OutOfRangeTo_p_Handle_Standard_Failure, 0, 0},  {&_swigt__p_Handle_Standard_DimensionMismatch, _p_Handle_Standard_DimensionMismatchTo_p_Handle_Standard_Failure, 0, 0},  {&_swigt__p_Handle_Standard_TypeMismatch, _p_Handle_Standard_TypeMismatchTo_p_Handle_Standard_Failure, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Handle_Standard_ImmutableObject[] = {  {&_swigt__p_Handle_Standard_ImmutableObject, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Handle_Standard_LicenseError[] = {  {&_swigt__p_Handle_Standard_LicenseNotFound, _p_Handle_Standard_LicenseNotFoundTo_p_Handle_Standard_LicenseError, 0, 0},  {&_swigt__p_Handle_Standard_LicenseError, 0, 0, 0},  {&_swigt__p_Handle_Standard_TooManyUsers, _p_Handle_Standard_TooManyUsersTo_p_Handle_Standard_LicenseError, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Handle_Standard_LicenseNotFound[] = {  {&_swigt__p_Handle_Standard_LicenseNotFound, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Handle_Standard_MultiplyDefined[] = {  {&_swigt__p_Handle_Standard_MultiplyDefined, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Handle_Standard_NegativeValue[] = {  {&_swigt__p_Handle_Standard_NegativeValue, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Handle_Standard_NoMoreObject[] = {  {&_swigt__p_Handle_Standard_NoMoreObject, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Handle_Standard_NoSuchObject[] = {  {&_swigt__p_Handle_Standard_NoSuchObject, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Handle_Standard_NotImplemented[] = {  {&_swigt__p_Handle_Standard_NotImplemented, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Handle_Standard_NullObject[] = {  {&_swigt__p_Handle_Standard_NullObject, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Handle_Standard_NullValue[] = {  {&_swigt__p_Handle_Standard_NullValue, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Handle_Standard_NumericError[] = {  {&_swigt__p_Handle_Standard_DivideByZero, _p_Handle_Standard_DivideByZeroTo_p_Handle_Standard_NumericError, 0, 0},  {&_swigt__p_Handle_Standard_Overflow, _p_Handle_Standard_OverflowTo_p_Handle_Standard_NumericError, 0, 0},  {&_swigt__p_Handle_Standard_Underflow, _p_Handle_Standard_UnderflowTo_p_Handle_Standard_NumericError, 0, 0},  {&_swigt__p_Handle_Standard_NumericError, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Handle_Standard_OutOfMemory[] = {  {&_swigt__p_Handle_Standard_OutOfMemory, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Handle_Standard_OutOfRange[] = {  {&_swigt__p_Handle_Standard_OutOfRange, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Handle_Standard_Overflow[] = {  {&_swigt__p_Handle_Standard_Overflow, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Handle_Standard_Persistent[] = {  {&_swigt__p_Handle_Standard_Persistent, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Handle_Standard_ProgramError[] = {  {&_swigt__p_Handle_Standard_OutOfMemory, _p_Handle_Standard_OutOfMemoryTo_p_Handle_Standard_ProgramError, 0, 0},  {&_swigt__p_Handle_Standard_NotImplemented, _p_Handle_Standard_NotImplementedTo_p_Handle_Standard_ProgramError, 0, 0},  {&_swigt__p_Handle_Standard_ProgramError, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Handle_Standard_RangeError[] = {  {&_swigt__p_Handle_Standard_OutOfRange, _p_Handle_Standard_OutOfRangeTo_p_Handle_Standard_RangeError, 0, 0},  {&_swigt__p_Handle_Standard_RangeError, 0, 0, 0},  {&_swigt__p_Handle_Standard_NullValue, _p_Handle_Standard_NullValueTo_p_Handle_Standard_RangeError, 0, 0},  {&_swigt__p_Handle_Standard_NegativeValue, _p_Handle_Standard_NegativeValueTo_p_Handle_Standard_RangeError, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Handle_Standard_TooManyUsers[] = {  {&_swigt__p_Handle_Standard_TooManyUsers, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Handle_Standard_Transient[] = {  {&_swigt__p_Handle_Standard_Overflow, _p_Handle_Standard_OverflowTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Standard_Underflow, _p_Handle_Standard_UnderflowTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Standard_NullValue, _p_Handle_Standard_NullValueTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Standard_NullObject, _p_Handle_Standard_NullObjectTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Standard_NoSuchObject, _p_Handle_Standard_NoSuchObjectTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Standard_NumericError, _p_Handle_Standard_NumericErrorTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Standard_NotImplemented, _p_Handle_Standard_NotImplementedTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Standard_OutOfMemory, _p_Handle_Standard_OutOfMemoryTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Standard_Transient, 0, 0, 0},  {&_swigt__p_Handle_Standard_NegativeValue, _p_Handle_Standard_NegativeValueTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Standard_ProgramError, _p_Handle_Standard_ProgramErrorTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Standard_Type, _p_Handle_Standard_TypeTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Standard_LicenseError, _p_Handle_Standard_LicenseErrorTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Standard_RangeError, _p_Handle_Standard_RangeErrorTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Standard_DivideByZero, _p_Handle_Standard_DivideByZeroTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Standard_DimensionError, _p_Handle_Standard_DimensionErrorTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Standard_DomainError, _p_Handle_Standard_DomainErrorTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Standard_ConstructionError, _p_Handle_Standard_ConstructionErrorTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Standard_LicenseNotFound, _p_Handle_Standard_LicenseNotFoundTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Standard_TooManyUsers, _p_Handle_Standard_TooManyUsersTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Standard_ImmutableObject, _p_Handle_Standard_ImmutableObjectTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Standard_NoMoreObject, _p_Handle_Standard_NoMoreObjectTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Standard_MultiplyDefined, _p_Handle_Standard_MultiplyDefinedTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Standard_AbortiveTransaction, _p_Handle_Standard_AbortiveTransactionTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Standard_OutOfRange, _p_Handle_Standard_OutOfRangeTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Standard_DimensionMismatch, _p_Handle_Standard_DimensionMismatchTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Standard_TypeMismatch, _p_Handle_Standard_TypeMismatchTo_p_Handle_Standard_Transient, 0, 0},  {&_swigt__p_Handle_Standard_Failure, _p_Handle_Standard_FailureTo_p_Handle_Standard_Transient, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Handle_Standard_Type[] = {  {&_swigt__p_Handle_Standard_Type, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Handle_Standard_TypeMismatch[] = {  {&_swigt__p_Handle_Standard_TypeMismatch, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Handle_Standard_Underflow[] = {  {&_swigt__p_Handle_Standard_Underflow, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard[] = {  {&_swigt__p_Standard, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_AbortiveTransaction[] = {  {&_swigt__p_Standard_AbortiveTransaction, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_AncestorIterator[] = {  {&_swigt__p_Standard_AncestorIterator, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_ConstructionError[] = {  {&_swigt__p_Standard_ConstructionError, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_DimensionError[] = {  {&_swigt__p_Standard_DimensionError, 0, 0, 0},  {&_swigt__p_Standard_DimensionMismatch, _p_Standard_DimensionMismatchTo_p_Standard_DimensionError, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_DimensionMismatch[] = {  {&_swigt__p_Standard_DimensionMismatch, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_DivideByZero[] = {  {&_swigt__p_Standard_DivideByZero, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_DomainError[] = {  {&_swigt__p_Standard_NullValue, _p_Standard_NullValueTo_p_Standard_DomainError, 0, 0},  {&_swigt__p_Standard_NoSuchObject, _p_Standard_NoSuchObjectTo_p_Standard_DomainError, 0, 0},  {&_swigt__p_Standard_NullObject, _p_Standard_NullObjectTo_p_Standard_DomainError, 0, 0},  {&_swigt__p_Standard_NegativeValue, _p_Standard_NegativeValueTo_p_Standard_DomainError, 0, 0},  {&_swigt__p_Standard_RangeError, _p_Standard_RangeErrorTo_p_Standard_DomainError, 0, 0},  {&_swigt__p_Standard_ConstructionError, _p_Standard_ConstructionErrorTo_p_Standard_DomainError, 0, 0},  {&_swigt__p_Standard_DimensionError, _p_Standard_DimensionErrorTo_p_Standard_DomainError, 0, 0},  {&_swigt__p_Standard_DomainError, 0, 0, 0},  {&_swigt__p_Standard_NoMoreObject, _p_Standard_NoMoreObjectTo_p_Standard_DomainError, 0, 0},  {&_swigt__p_Standard_ImmutableObject, _p_Standard_ImmutableObjectTo_p_Standard_DomainError, 0, 0},  {&_swigt__p_Standard_MultiplyDefined, _p_Standard_MultiplyDefinedTo_p_Standard_DomainError, 0, 0},  {&_swigt__p_Standard_TypeMismatch, _p_Standard_TypeMismatchTo_p_Standard_DomainError, 0, 0},  {&_swigt__p_Standard_DimensionMismatch, _p_Standard_DimensionMismatchTo_p_Standard_DomainError, 0, 0},  {&_swigt__p_Standard_OutOfRange, _p_Standard_OutOfRangeTo_p_Standard_DomainError, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_ErrorHandler[] = {  {&_swigt__p_Standard_ErrorHandler, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_ErrorHandlerCallback[] = {  {&_swigt__p_Standard_Mutex, _p_Standard_MutexTo_p_Standard_ErrorHandlerCallback, 0, 0},  {&_swigt__p_Standard_ErrorHandlerCallback, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_Failure[] = {  {&_swigt__p_Standard_Underflow, _p_Standard_UnderflowTo_p_Standard_Failure, 0, 0},  {&_swigt__p_Standard_Overflow, _p_Standard_OverflowTo_p_Standard_Failure, 0, 0},  {&_swigt__p_Standard_NullValue, _p_Standard_NullValueTo_p_Standard_Failure, 0, 0},  {&_swigt__p_Standard_NoSuchObject, _p_Standard_NoSuchObjectTo_p_Standard_Failure, 0, 0},  {&_swigt__p_Standard_NullObject, _p_Standard_NullObjectTo_p_Standard_Failure, 0, 0},  {&_swigt__p_Standard_NumericError, _p_Standard_NumericErrorTo_p_Standard_Failure, 0, 0},  {&_swigt__p_Standard_NotImplemented, _p_Standard_NotImplementedTo_p_Standard_Failure, 0, 0},  {&_swigt__p_Standard_OutOfMemory, _p_Standard_OutOfMemoryTo_p_Standard_Failure, 0, 0},  {&_swigt__p_Standard_NegativeValue, _p_Standard_NegativeValueTo_p_Standard_Failure, 0, 0},  {&_swigt__p_Standard_ProgramError, _p_Standard_ProgramErrorTo_p_Standard_Failure, 0, 0},  {&_swigt__p_Standard_LicenseError, _p_Standard_LicenseErrorTo_p_Standard_Failure, 0, 0},  {&_swigt__p_Standard_RangeError, _p_Standard_RangeErrorTo_p_Standard_Failure, 0, 0},  {&_swigt__p_Standard_DivideByZero, _p_Standard_DivideByZeroTo_p_Standard_Failure, 0, 0},  {&_swigt__p_Standard_DimensionError, _p_Standard_DimensionErrorTo_p_Standard_Failure, 0, 0},  {&_swigt__p_Standard_ConstructionError, _p_Standard_ConstructionErrorTo_p_Standard_Failure, 0, 0},  {&_swigt__p_Standard_DomainError, _p_Standard_DomainErrorTo_p_Standard_Failure, 0, 0},  {&_swigt__p_Standard_LicenseNotFound, _p_Standard_LicenseNotFoundTo_p_Standard_Failure, 0, 0},  {&_swigt__p_Standard_TooManyUsers, _p_Standard_TooManyUsersTo_p_Standard_Failure, 0, 0},  {&_swigt__p_Standard_ImmutableObject, _p_Standard_ImmutableObjectTo_p_Standard_Failure, 0, 0},  {&_swigt__p_Standard_NoMoreObject, _p_Standard_NoMoreObjectTo_p_Standard_Failure, 0, 0},  {&_swigt__p_Standard_MultiplyDefined, _p_Standard_MultiplyDefinedTo_p_Standard_Failure, 0, 0},  {&_swigt__p_Standard_AbortiveTransaction, _p_Standard_AbortiveTransactionTo_p_Standard_Failure, 0, 0},  {&_swigt__p_Standard_Failure, 0, 0, 0},  {&_swigt__p_Standard_OutOfRange, _p_Standard_OutOfRangeTo_p_Standard_Failure, 0, 0},  {&_swigt__p_Standard_DimensionMismatch, _p_Standard_DimensionMismatchTo_p_Standard_Failure, 0, 0},  {&_swigt__p_Standard_TypeMismatch, _p_Standard_TypeMismatchTo_p_Standard_Failure, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_GUID[] = {  {&_swigt__p_Standard_GUID, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_ImmutableObject[] = {  {&_swigt__p_Standard_ImmutableObject, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_LicenseError[] = {  {&_swigt__p_Standard_LicenseNotFound, _p_Standard_LicenseNotFoundTo_p_Standard_LicenseError, 0, 0},  {&_swigt__p_Standard_LicenseError, 0, 0, 0},  {&_swigt__p_Standard_TooManyUsers, _p_Standard_TooManyUsersTo_p_Standard_LicenseError, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_LicenseNotFound[] = {  {&_swigt__p_Standard_LicenseNotFound, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_MMgrOpt[] = {  {&_swigt__p_Standard_MMgrOpt, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_MMgrRaw[] = {  {&_swigt__p_Standard_MMgrRaw, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_MMgrRoot[] = {  {&_swigt__p_Standard_MMgrOpt, _p_Standard_MMgrOptTo_p_Standard_MMgrRoot, 0, 0},  {&_swigt__p_Standard_MMgrRoot, 0, 0, 0},  {&_swigt__p_Standard_MMgrRaw, _p_Standard_MMgrRawTo_p_Standard_MMgrRoot, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_MultiplyDefined[] = {  {&_swigt__p_Standard_MultiplyDefined, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_Mutex[] = {  {&_swigt__p_Standard_Mutex, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_NegativeValue[] = {  {&_swigt__p_Standard_NegativeValue, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_NoMoreObject[] = {  {&_swigt__p_Standard_NoMoreObject, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_NoSuchObject[] = {  {&_swigt__p_Standard_NoSuchObject, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_NotImplemented[] = {  {&_swigt__p_Standard_NotImplemented, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_NullObject[] = {  {&_swigt__p_Standard_NullObject, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_NullValue[] = {  {&_swigt__p_Standard_NullValue, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_NumericError[] = {  {&_swigt__p_Standard_DivideByZero, _p_Standard_DivideByZeroTo_p_Standard_NumericError, 0, 0},  {&_swigt__p_Standard_Underflow, _p_Standard_UnderflowTo_p_Standard_NumericError, 0, 0},  {&_swigt__p_Standard_Overflow, _p_Standard_OverflowTo_p_Standard_NumericError, 0, 0},  {&_swigt__p_Standard_NumericError, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_OutOfMemory[] = {  {&_swigt__p_Standard_OutOfMemory, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_OutOfRange[] = {  {&_swigt__p_Standard_OutOfRange, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_Overflow[] = {  {&_swigt__p_Standard_Overflow, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_Persistent[] = {  {&_swigt__p_Standard_Persistent, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_ProgramError[] = {  {&_swigt__p_Standard_OutOfMemory, _p_Standard_OutOfMemoryTo_p_Standard_ProgramError, 0, 0},  {&_swigt__p_Standard_NotImplemented, _p_Standard_NotImplementedTo_p_Standard_ProgramError, 0, 0},  {&_swigt__p_Standard_ProgramError, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_RangeError[] = {  {&_swigt__p_Standard_OutOfRange, _p_Standard_OutOfRangeTo_p_Standard_RangeError, 0, 0},  {&_swigt__p_Standard_RangeError, 0, 0, 0},  {&_swigt__p_Standard_NullValue, _p_Standard_NullValueTo_p_Standard_RangeError, 0, 0},  {&_swigt__p_Standard_NegativeValue, _p_Standard_NegativeValueTo_p_Standard_RangeError, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_SStream[] = {  {&_swigt__p_Standard_SStream, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_Storable[] = {  {&_swigt__p_Standard_Storable, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_TooManyUsers[] = {  {&_swigt__p_Standard_TooManyUsers, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_Transient[] = {  {&_swigt__p_Standard_Underflow, _p_Standard_UnderflowTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Standard_Overflow, _p_Standard_OverflowTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Standard_NullValue, _p_Standard_NullValueTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Standard_NoSuchObject, _p_Standard_NoSuchObjectTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Standard_NullObject, _p_Standard_NullObjectTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Standard_NumericError, _p_Standard_NumericErrorTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Standard_NotImplemented, _p_Standard_NotImplementedTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Standard_OutOfMemory, _p_Standard_OutOfMemoryTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Standard_Transient, 0, 0, 0},  {&_swigt__p_Standard_NegativeValue, _p_Standard_NegativeValueTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Standard_ProgramError, _p_Standard_ProgramErrorTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Standard_Type, _p_Standard_TypeTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Standard_LicenseError, _p_Standard_LicenseErrorTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Standard_RangeError, _p_Standard_RangeErrorTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Standard_DivideByZero, _p_Standard_DivideByZeroTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Standard_DimensionError, _p_Standard_DimensionErrorTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Standard_ConstructionError, _p_Standard_ConstructionErrorTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Standard_DomainError, _p_Standard_DomainErrorTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Standard_LicenseNotFound, _p_Standard_LicenseNotFoundTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Standard_TooManyUsers, _p_Standard_TooManyUsersTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Standard_ImmutableObject, _p_Standard_ImmutableObjectTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Standard_NoMoreObject, _p_Standard_NoMoreObjectTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Standard_MultiplyDefined, _p_Standard_MultiplyDefinedTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Standard_AbortiveTransaction, _p_Standard_AbortiveTransactionTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Standard_OutOfRange, _p_Standard_OutOfRangeTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Standard_DimensionMismatch, _p_Standard_DimensionMismatchTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Standard_TypeMismatch, _p_Standard_TypeMismatchTo_p_Standard_Transient, 0, 0},  {&_swigt__p_Standard_Failure, _p_Standard_FailureTo_p_Standard_Transient, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_Type[] = {  {&_swigt__p_Standard_Type, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_TypeMismatch[] = {  {&_swigt__p_Standard_TypeMismatch, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_Standard_Underflow[] = {  {&_swigt__p_Standard_Underflow, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_jmp_buf[] = {  {&_swigt__p_jmp_buf, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_pthread_t[] = {  {&_swigt__p_pthread_t, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_swig__PySwigIterator[] = {  {&_swigt__p_swig__PySwigIterator, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
+static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};
+
+static swig_cast_info *swig_cast_initial[] = {
+  _swigc__p_GUID,
+  _swigc__p_Handle_Standard_AbortiveTransaction,
+  _swigc__p_Handle_Standard_ConstructionError,
+  _swigc__p_Handle_Standard_DimensionError,
+  _swigc__p_Handle_Standard_DimensionMismatch,
+  _swigc__p_Handle_Standard_DivideByZero,
+  _swigc__p_Handle_Standard_DomainError,
+  _swigc__p_Handle_Standard_Failure,
+  _swigc__p_Handle_Standard_ImmutableObject,
+  _swigc__p_Handle_Standard_LicenseError,
+  _swigc__p_Handle_Standard_LicenseNotFound,
+  _swigc__p_Handle_Standard_MultiplyDefined,
+  _swigc__p_Handle_Standard_NegativeValue,
+  _swigc__p_Handle_Standard_NoMoreObject,
+  _swigc__p_Handle_Standard_NoSuchObject,
+  _swigc__p_Handle_Standard_NotImplemented,
+  _swigc__p_Handle_Standard_NullObject,
+  _swigc__p_Handle_Standard_NullValue,
+  _swigc__p_Handle_Standard_NumericError,
+  _swigc__p_Handle_Standard_OutOfMemory,
+  _swigc__p_Handle_Standard_OutOfRange,
+  _swigc__p_Handle_Standard_Overflow,
+  _swigc__p_Handle_Standard_Persistent,
+  _swigc__p_Handle_Standard_ProgramError,
+  _swigc__p_Handle_Standard_RangeError,
+  _swigc__p_Handle_Standard_TooManyUsers,
+  _swigc__p_Handle_Standard_Transient,
+  _swigc__p_Handle_Standard_Type,
+  _swigc__p_Handle_Standard_TypeMismatch,
+  _swigc__p_Handle_Standard_Underflow,
+  _swigc__p_Standard,
+  _swigc__p_Standard_AbortiveTransaction,
+  _swigc__p_Standard_AncestorIterator,
+  _swigc__p_Standard_ConstructionError,
+  _swigc__p_Standard_DimensionError,
+  _swigc__p_Standard_DimensionMismatch,
+  _swigc__p_Standard_DivideByZero,
+  _swigc__p_Standard_DomainError,
+  _swigc__p_Standard_ErrorHandler,
+  _swigc__p_Standard_ErrorHandlerCallback,
+  _swigc__p_Standard_Failure,
+  _swigc__p_Standard_GUID,
+  _swigc__p_Standard_ImmutableObject,
+  _swigc__p_Standard_LicenseError,
+  _swigc__p_Standard_LicenseNotFound,
+  _swigc__p_Standard_MMgrOpt,
+  _swigc__p_Standard_MMgrRaw,
+  _swigc__p_Standard_MMgrRoot,
+  _swigc__p_Standard_MultiplyDefined,
+  _swigc__p_Standard_Mutex,
+  _swigc__p_Standard_NegativeValue,
+  _swigc__p_Standard_NoMoreObject,
+  _swigc__p_Standard_NoSuchObject,
+  _swigc__p_Standard_NotImplemented,
+  _swigc__p_Standard_NullObject,
+  _swigc__p_Standard_NullValue,
+  _swigc__p_Standard_NumericError,
+  _swigc__p_Standard_OutOfMemory,
+  _swigc__p_Standard_OutOfRange,
+  _swigc__p_Standard_Overflow,
+  _swigc__p_Standard_Persistent,
+  _swigc__p_Standard_ProgramError,
+  _swigc__p_Standard_RangeError,
+  _swigc__p_Standard_SStream,
+  _swigc__p_Standard_Storable,
+  _swigc__p_Standard_TooManyUsers,
+  _swigc__p_Standard_Transient,
+  _swigc__p_Standard_Type,
+  _swigc__p_Standard_TypeMismatch,
+  _swigc__p_Standard_Underflow,
+  _swigc__p_char,
+  _swigc__p_double,
+  _swigc__p_float,
+  _swigc__p_int,
+  _swigc__p_jmp_buf,
+  _swigc__p_p_void,
+  _swigc__p_pthread_t,
+  _swigc__p_short,
+  _swigc__p_size_t,
+  _swigc__p_std__invalid_argument,
+  _swigc__p_swig__PySwigIterator,
+  _swigc__p_unsigned_char,
+  _swigc__p_unsigned_int,
+  _swigc__p_void,
+};
+
+
+/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */
+
+static swig_const_info swig_const_table[] = {
+{0, 0, 0, 0.0, 0, 0}};
+
+#ifdef __cplusplus
+}
+#endif
+/* -----------------------------------------------------------------------------
+ * Type initialization:
+ * This problem is tough by the requirement that no dynamic 
+ * memory is used. Also, since swig_type_info structures store pointers to 
+ * swig_cast_info structures and swig_cast_info structures store pointers back
+ * to swig_type_info structures, we need some lookup code at initialization. 
+ * The idea is that swig generates all the structures that are needed. 
+ * The runtime then collects these partially filled structures. 
+ * The SWIG_InitializeModule function takes these initial arrays out of 
+ * swig_module, and does all the lookup, filling in the swig_module.types
+ * array with the correct data and linking the correct swig_cast_info
+ * structures together.
+ *
+ * The generated swig_type_info structures are assigned staticly to an initial 
+ * array. We just loop through that array, and handle each type individually.
+ * First we lookup if this type has been already loaded, and if so, use the
+ * loaded structure instead of the generated one. Then we have to fill in the
+ * cast linked list. The cast data is initially stored in something like a
+ * two-dimensional array. Each row corresponds to a type (there are the same
+ * number of rows as there are in the swig_type_initial array). Each entry in
+ * a column is one of the swig_cast_info structures for that type.
+ * The cast_initial array is actually an array of arrays, because each row has
+ * a variable number of columns. So to actually build the cast linked list,
+ * we find the array of casts associated with the type, and loop through it 
+ * adding the casts to the list. The one last trick we need to do is making
+ * sure the type pointer in the swig_cast_info struct is correct.
+ *
+ * First off, we lookup the cast->type name to see if it is already loaded. 
+ * There are three cases to handle:
+ *  1) If the cast->type has already been loaded AND the type we are adding
+ *     casting info to has not been loaded (it is in this module), THEN we
+ *     replace the cast->type pointer with the type pointer that has already
+ *     been loaded.
+ *  2) If BOTH types (the one we are adding casting info to, and the 
+ *     cast->type) are loaded, THEN the cast info has already been loaded by
+ *     the previous module so we just ignore it.
+ *  3) Finally, if cast->type has not already been loaded, then we add that
+ *     swig_cast_info to the linked list (because the cast->type) pointer will
+ *     be correct.
+ * ----------------------------------------------------------------------------- */
+
+#ifdef __cplusplus
+extern "C" {
+#if 0
+} /* c-mode */
+#endif
+#endif
+
+#if 0
+#define SWIGRUNTIME_DEBUG
+#endif
+
+
+SWIGRUNTIME void
+SWIG_InitializeModule(void *clientdata) {
+  size_t i;
+  swig_module_info *module_head, *iter;
+  int found;
+  
+  clientdata = clientdata;
+  
+  /* check to see if the circular list has been setup, if not, set it up */
+  if (swig_module.next==0) {
+    /* Initialize the swig_module */
+    swig_module.type_initial = swig_type_initial;
+    swig_module.cast_initial = swig_cast_initial;
+    swig_module.next = &swig_module;
+  }
+  
+  /* Try and load any already created modules */
+  module_head = SWIG_GetModule(clientdata);
+  if (!module_head) {
+    /* This is the first module loaded for this interpreter */
+    /* so set the swig module into the interpreter */
+    SWIG_SetModule(clientdata, &swig_module);
+    module_head = &swig_module;
+  } else {
+    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
+    found=0;
+    iter=module_head;
+    do {
+      if (iter==&swig_module) {
+        found=1;
+        break;
+      }
+      iter=iter->next;
+    } while (iter!= module_head);
+    
+    /* if the is found in the list, then all is done and we may leave */
+    if (found) return;
+    /* otherwise we must add out module into the list */
+    swig_module.next = module_head->next;
+    module_head->next = &swig_module;
+  }
+  
+  /* Now work on filling in swig_module.types */
+#ifdef SWIGRUNTIME_DEBUG
+  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
+#endif
+  for (i = 0; i < swig_module.size; ++i) {
+    swig_type_info *type = 0;
+    swig_type_info *ret;
+    swig_cast_info *cast;
+    
+#ifdef SWIGRUNTIME_DEBUG
+    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
+#endif
+    
+    /* if there is another module already loaded */
+    if (swig_module.next != &swig_module) {
+      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
+    }
+    if (type) {
+      /* Overwrite clientdata field */
+#ifdef SWIGRUNTIME_DEBUG
+      printf("SWIG_InitializeModule: found type %s\n", type->name);
+#endif
+      if (swig_module.type_initial[i]->clientdata) {
+        type->clientdata = swig_module.type_initial[i]->clientdata;
+#ifdef SWIGRUNTIME_DEBUG
+        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
+#endif
+      }
+    } else {
+      type = swig_module.type_initial[i];
+    }
+    
+    /* Insert casting types */
+    cast = swig_module.cast_initial[i];
+    while (cast->type) {
+      /* Don't need to add information already in the list */
+      ret = 0;
+#ifdef SWIGRUNTIME_DEBUG
+      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
+#endif
+      if (swig_module.next != &swig_module) {
+        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
+#ifdef SWIGRUNTIME_DEBUG
+        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
+#endif
+      }
+      if (ret) {
+        if (type == swig_module.type_initial[i]) {
+#ifdef SWIGRUNTIME_DEBUG
+          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
+#endif
+          cast->type = ret;
+          ret = 0;
+        } else {
+          /* Check for casting already in the list */
+          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
+#ifdef SWIGRUNTIME_DEBUG
+          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
+#endif
+          if (!ocast) ret = 0;
+        }
+      }
+      
+      if (!ret) {
+#ifdef SWIGRUNTIME_DEBUG
+        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
+#endif
+        if (type->cast) {
+          type->cast->prev = cast;
+          cast->next = type->cast;
+        }
+        type->cast = cast;
+      }
+      cast++;
+    }
+    /* Set entry in modules->types array equal to the type */
+    swig_module.types[i] = type;
+  }
+  swig_module.types[i] = 0;
+  
+#ifdef SWIGRUNTIME_DEBUG
+  printf("**** SWIG_InitializeModule: Cast List ******\n");
+  for (i = 0; i < swig_module.size; ++i) {
+    int j = 0;
+    swig_cast_info *cast = swig_module.cast_initial[i];
+    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
+    while (cast->type) {
+      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
+      cast++;
+      ++j;
+    }
+    printf("---- Total casts: %d\n",j);
+  }
+  printf("**** SWIG_InitializeModule: Cast List ******\n");
+#endif
+}
+
+/* This function will propagate the clientdata field of type to
+* any new swig_type_info structures that have been added into the list
+* of equivalent types.  It is like calling
+* SWIG_TypeClientData(type, clientdata) a second time.
+*/
+SWIGRUNTIME void
+SWIG_PropagateClientData(void) {
+  size_t i;
+  swig_cast_info *equiv;
+  static int init_run = 0;
+  
+  if (init_run) return;
+  init_run = 1;
+  
+  for (i = 0; i < swig_module.size; i++) {
+    if (swig_module.types[i]->clientdata) {
+      equiv = swig_module.types[i]->cast;
+      while (equiv) {
+        if (!equiv->converter) {
+          if (equiv->type && !equiv->type->clientdata)
+          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
+        }
+        equiv = equiv->next;
+      }
+    }
+  }
+}
+
+#ifdef __cplusplus
+#if 0
+{
+  /* c-mode */
+#endif
+}
+#endif
+
+
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+  
+  /* Python-specific SWIG API */
+#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
+#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
+#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
+  
+  /* -----------------------------------------------------------------------------
+   * global variable support code.
+   * ----------------------------------------------------------------------------- */
+  
+  typedef struct swig_globalvar {
+    char       *name;                  /* Name of global variable */
+    PyObject *(*get_attr)(void);       /* Return the current value */
+    int       (*set_attr)(PyObject *); /* Set the value */
+    struct swig_globalvar *next;
+  } swig_globalvar;
+  
+  typedef struct swig_varlinkobject {
+    PyObject_HEAD
+    swig_globalvar *vars;
+  } swig_varlinkobject;
+  
+  SWIGINTERN PyObject *
+  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
+    return PyString_FromString("<Swig global variables>");
+  }
+  
+  SWIGINTERN PyObject *
+  swig_varlink_str(swig_varlinkobject *v) {
+    PyObject *str = PyString_FromString("(");
+    swig_globalvar  *var;
+    for (var = v->vars; var; var=var->next) {
+      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
+      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
+    }
+    PyString_ConcatAndDel(&str,PyString_FromString(")"));
+    return str;
+  }
+  
+  SWIGINTERN int
+  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
+    PyObject *str = swig_varlink_str(v);
+    fprintf(fp,"Swig global variables ");
+    fprintf(fp,"%s\n", PyString_AsString(str));
+    Py_DECREF(str);
+    return 0;
+  }
+  
+  SWIGINTERN void
+  swig_varlink_dealloc(swig_varlinkobject *v) {
+    swig_globalvar *var = v->vars;
+    while (var) {
+      swig_globalvar *n = var->next;
+      free(var->name);
+      free(var);
+      var = n;
+    }
+  }
+  
+  SWIGINTERN PyObject *
+  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
+    PyObject *res = NULL;
+    swig_globalvar *var = v->vars;
+    while (var) {
+      if (strcmp(var->name,n) == 0) {
+        res = (*var->get_attr)();
+        break;
+      }
+      var = var->next;
+    }
+    if (res == NULL && !PyErr_Occurred()) {
+      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
+    }
+    return res;
+  }
+  
+  SWIGINTERN int
+  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
+    int res = 1;
+    swig_globalvar *var = v->vars;
+    while (var) {
+      if (strcmp(var->name,n) == 0) {
+        res = (*var->set_attr)(p);
+        break;
+      }
+      var = var->next;
+    }
+    if (res == 1 && !PyErr_Occurred()) {
+      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
+    }
+    return res;
+  }
+  
+  SWIGINTERN PyTypeObject*
+  swig_varlink_type(void) {
+    static char varlink__doc__[] = "Swig var link object";
+    static PyTypeObject varlink_type;
+    static int type_init = 0;  
+    if (!type_init) {
+      const PyTypeObject tmp
+      = {
+        PyObject_HEAD_INIT(NULL)
+        0,                                  /* Number of items in variable part (ob_size) */
+        (char *)"swigvarlink",              /* Type name (tp_name) */
+        sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
+        0,                                  /* Itemsize (tp_itemsize) */
+        (destructor) swig_varlink_dealloc,   /* Deallocator (tp_dealloc) */ 
+        (printfunc) swig_varlink_print,     /* Print (tp_print) */
+        (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
+        (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
+        0,                                  /* tp_compare */
+        (reprfunc) swig_varlink_repr,       /* tp_repr */
+        0,                                  /* tp_as_number */
+        0,                                  /* tp_as_sequence */
+        0,                                  /* tp_as_mapping */
+        0,                                  /* tp_hash */
+        0,                                  /* tp_call */
+        (reprfunc)swig_varlink_str,        /* tp_str */
+        0,                                  /* tp_getattro */
+        0,                                  /* tp_setattro */
+        0,                                  /* tp_as_buffer */
+        0,                                  /* tp_flags */
+        varlink__doc__,                     /* tp_doc */
+        0,                                  /* tp_traverse */
+        0,                                  /* tp_clear */
+        0,                                  /* tp_richcompare */
+        0,                                  /* tp_weaklistoffset */
+#if PY_VERSION_HEX >= 0x02020000
+        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
+#endif
+#if PY_VERSION_HEX >= 0x02030000
+        0,                                  /* tp_del */
+#endif
+#ifdef COUNT_ALLOCS
+        0,0,0,0                             /* tp_alloc -> tp_next */
+#endif
+      };
+      varlink_type = tmp;
+      varlink_type.ob_type = &PyType_Type;
+      type_init = 1;
+    }
+    return &varlink_type;
+  }
+  
+  /* Create a variable linking object for use later */
+  SWIGINTERN PyObject *
+  SWIG_Python_newvarlink(void) {
+    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
+    if (result) {
+      result->vars = 0;
+    }
+    return ((PyObject*) result);
+  }
+  
+  SWIGINTERN void 
+  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
+    swig_varlinkobject *v = (swig_varlinkobject *) p;
+    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
+    if (gv) {
+      size_t size = strlen(name)+1;
+      gv->name = (char *)malloc(size);
+      if (gv->name) {
+        strncpy(gv->name,name,size);
+        gv->get_attr = get_attr;
+        gv->set_attr = set_attr;
+        gv->next = v->vars;
+      }
+    }
+    v->vars = gv;
+  }
+  
+  SWIGINTERN PyObject *
+  SWIG_globals(void) {
+    static PyObject *_SWIG_globals = 0; 
+    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
+    return _SWIG_globals;
+  }
+  
+  /* -----------------------------------------------------------------------------
+   * constants/methods manipulation
+   * ----------------------------------------------------------------------------- */
+  
+  /* Install Constants */
+  SWIGINTERN void
+  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
+    PyObject *obj = 0;
+    size_t i;
+    for (i = 0; constants[i].type; ++i) {
+      switch(constants[i].type) {
+      case SWIG_PY_POINTER:
+        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
+        break;
+      case SWIG_PY_BINARY:
+        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
+        break;
+      default:
+        obj = 0;
+        break;
+      }
+      if (obj) {
+        PyDict_SetItemString(d, constants[i].name, obj);
+        Py_DECREF(obj);
+      }
+    }
+  }
+  
+  /* -----------------------------------------------------------------------------*/
+  /* Fix SwigMethods to carry the callback ptrs when needed */
+  /* -----------------------------------------------------------------------------*/
+  
+  SWIGINTERN void
+  SWIG_Python_FixMethods(PyMethodDef *methods,
+    swig_const_info *const_table,
+    swig_type_info **types,
+    swig_type_info **types_initial) {
+    size_t i;
+    for (i = 0; methods[i].ml_name; ++i) {
+      const char *c = methods[i].ml_doc;
+      if (c && (c = strstr(c, "swig_ptr: "))) {
+        int j;
+        swig_const_info *ci = 0;
+        const char *name = c + 10;
+        for (j = 0; const_table[j].type; ++j) {
+          if (strncmp(const_table[j].name, name, 
+              strlen(const_table[j].name)) == 0) {
+            ci = &(const_table[j]);
+            break;
+          }
+        }
+        if (ci) {
+          size_t shift = (ci->ptype) - types;
+          swig_type_info *ty = types_initial[shift];
+          size_t ldoc = (c - methods[i].ml_doc);
+          size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
+          char *ndoc = (char*)malloc(ldoc + lptr + 10);
+          if (ndoc) {
+            char *buff = ndoc;
+            void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
+            if (ptr) {
+              strncpy(buff, methods[i].ml_doc, ldoc);
+              buff += ldoc;
+              strncpy(buff, "swig_ptr: ", 10);
+              buff += 10;
+              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
+              methods[i].ml_doc = ndoc;
+            }
+          }
+        }
+      }
+    }
+  } 
+  
+#ifdef __cplusplus
+}
+#endif
+
+/* -----------------------------------------------------------------------------*
+ *  Partial Init method
+ * -----------------------------------------------------------------------------*/
+
+#ifdef __cplusplus
+extern "C"
+#endif
+SWIGEXPORT void SWIG_init(void) {
+  PyObject *m, *d;
+  
+  /* Fix SwigMethods to carry the callback ptrs when needed */
+  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
+  
+  m = Py_InitModule((char *) SWIG_name, SwigMethods);
+  d = PyModule_GetDict(m);
+  
+  SWIG_InitializeModule(0);
+  SWIG_InstallConstants(d,swig_const_table);
+  
+  
+  SWIG_Python_SetConstant(d, "Standard_Void",SWIG_From_int(static_cast< int >(Standard_Void)));
+  SWIG_Python_SetConstant(d, "Standard_Char",SWIG_From_int(static_cast< int >(Standard_Char)));
+  SWIG_Python_SetConstant(d, "Standard_ExtChar",SWIG_From_int(static_cast< int >(Standard_ExtChar)));
+  SWIG_Python_SetConstant(d, "Standard_LongInt",SWIG_From_int(static_cast< int >(Standard_LongInt)));
+  SWIG_Python_SetConstant(d, "Standard_Bool",SWIG_From_int(static_cast< int >(Standard_Bool)));
+  SWIG_Python_SetConstant(d, "Standard_Float",SWIG_From_int(static_cast< int >(Standard_Float)));
+  SWIG_Python_SetConstant(d, "Standard_LongDouble",SWIG_From_int(static_cast< int >(Standard_LongDouble)));
+  SWIG_Python_SetConstant(d, "Standard_String",SWIG_From_int(static_cast< int >(Standard_String)));
+  SWIG_Python_SetConstant(d, "Standard_EString",SWIG_From_int(static_cast< int >(Standard_EString)));
+  SWIG_Python_SetConstant(d, "Standard_EntryAddress",SWIG_From_int(static_cast< int >(Standard_EntryAddress)));
+  SWIG_Python_SetConstant(d, "Standard_DataAddress",SWIG_From_int(static_cast< int >(Standard_DataAddress)));
+  SWIG_Python_SetConstant(d, "Standard_EngineHandle",SWIG_From_int(static_cast< int >(Standard_EngineHandle)));
+  SWIG_Python_SetConstant(d, "Standard_Long64",SWIG_From_int(static_cast< int >(Standard_Long64)));
+  SWIG_Python_SetConstant(d, "Standard_Array",SWIG_From_int(static_cast< int >(Standard_Array)));
+  SWIG_Python_SetConstant(d, "Standard_IsNothing",SWIG_From_int(static_cast< int >(Standard_IsNothing)));
+  SWIG_Python_SetConstant(d, "Standard_IsAddress",SWIG_From_int(static_cast< int >(Standard_IsAddress)));
+  SWIG_Python_SetConstant(d, "Standard_IsTransient",SWIG_From_int(static_cast< int >(Standard_IsTransient)));
+  SWIG_Python_SetConstant(d, "Standard_IsPersistent",SWIG_From_int(static_cast< int >(Standard_IsPersistent)));
+  SWIG_Python_SetConstant(d, "Standard_IsNotLoaded",SWIG_From_int(static_cast< int >(Standard_IsNotLoaded)));
+  SWIG_Python_SetConstant(d, "Standard_IsUnKnown",SWIG_From_int(static_cast< int >(Standard_IsUnKnown)));
+  SWIG_Python_SetConstant(d, "Standard_IsClass",SWIG_From_int(static_cast< int >(Standard_IsClass)));
+  SWIG_Python_SetConstant(d, "Standard_IsEnumeration",SWIG_From_int(static_cast< int >(Standard_IsEnumeration)));
+  SWIG_Python_SetConstant(d, "Standard_IsPrimitive",SWIG_From_int(static_cast< int >(Standard_IsPrimitive)));
+  SWIG_Python_SetConstant(d, "Standard_IsImported",SWIG_From_int(static_cast< int >(Standard_IsImported)));
+  SWIG_Python_SetConstant(d, "Standard_IsPackage",SWIG_From_int(static_cast< int >(Standard_IsPackage)));
+  SWIG_Python_SetConstant(d, "Standard_HandlerVoid",SWIG_From_int(static_cast< int >(Standard_HandlerVoid)));
+  SWIG_Python_SetConstant(d, "Standard_HandlerJumped",SWIG_From_int(static_cast< int >(Standard_HandlerJumped)));
+  SWIG_Python_SetConstant(d, "Standard_HandlerProcessed",SWIG_From_int(static_cast< int >(Standard_HandlerProcessed)));
+}
+
--- pythonocc-0.3.0.orig/src/setup.py
+++ pythonocc-0.3.0/src/setup.py
@@ -172,18 +172,18 @@
 #
 # OpenCascade libs
 #
-libraries = ['BinLPlugin', 'BinPlugin', 'BinXCAFPlugin', 'FWOSPlugin', 'mscmd', 'PTKernel',\
+libraries = ['BinLPlugin', 'BinPlugin', 'BinXCAFPlugin', 'FWOSPlugin', 'PTKernel',\
              'StdLPlugin', 'StdPlugin', 'TKAdvTools', 'TKBin', 'TKBinL', 'TKBinTObj', 'TKBinXCAF',\
-             'TKBO', 'TKBool', 'TKBRep', 'TKCAF', 'TKCDF', 'TKCDLFront', 'TKCPPClient', 'TKCPPExt',\
-             'TKCPPIntExt', 'TKCPPJini', 'TKCSFDBSchema', 'TKDCAF', 'TKDraw', 'TKernel',\
-             'TKFeat', 'TKFillet', 'TKG2d', 'TKG3d', 'TKGeomAlgo', 'TKGeomBase', 'TKHLR', 'TKIDLFront',\
+             'TKBO', 'TKBool', 'TKBRep', 'TKCAF', 'TKCDF',\
+             'TKernel',\
+             'TKFeat', 'TKFillet', 'TKG2d', 'TKG3d', 'TKGeomAlgo', 'TKGeomBase', 'TKHLR',\
              'TKIGES', 'TKjcas','TKLCAF', 'TKMath', 'TKMesh', 'TKMeshVS', 'TKNIS', 'TKOffset',\
              'TKOpenGl', 'TKPCAF', 'TKPLCAF', 'TKPrim', 'TKPShape', 'TKService', 'TKShapeSchema',\
              'TKShHealing', 'TKStdLSchema', 'TKStdSchema', 'TKSTEP', 'TKSTEP209', 'TKSTEPAttr',\
-             'TKSTEPBase', 'TKSTL', 'TKTCPPExt', 'TKTObj', 'TKTObjDRAW', 'TKTopAlgo', 'TKTopTest',\
-             'TKV2d', 'TKV3d', 'TKViewerTest', 'TKVRML', 'TKWOK', 'TKWOKTcl', 'TKXCAF', 'TKXCAFSchema',\
-             'TKXDEDRAW', 'TKXDEIGES', 'TKXDESTEP', 'TKXMesh', 'TKXml', 'TKXmlL', 'TKXmlTObj',\
-             'TKXmlXCAF', 'TKXSBase', 'TKXSDRAW', 'XCAFPlugin',\
+             'TKSTEPBase', 'TKSTL', 'TKTObj', 'TKTObjDRAW', 'TKTopAlgo',\
+             'TKV2d', 'TKV3d', 'TKVRML', 'TKXCAF', 'TKXCAFSchema',\
+             'TKXDEIGES', 'TKXDESTEP', 'TKXMesh', 'TKXml', 'TKXmlL', 'TKXmlTObj',\
+             'TKXmlXCAF', 'TKXSBase',\
              'XmlLPlugin', 'XmlPlugin', 'XmlXCAFPlugin']
 # Find the lib in OCC_LIB path and add it to the LIBS list
 LIBS = []
--- pythonocc-0.3.0.orig/debian/changelog
+++ pythonocc-0.3.0/debian/changelog
@@ -0,0 +1,6 @@
+pythonocc (0.3.0-1) unstable; urgency=low
+
+  * Initial release
+
+ -- Werner Mayer <wmayer@users.sourceforge.net>  Mon, 24 Aug 2009 12:41:48 +0200
+
--- pythonocc-0.3.0.orig/debian/rules
+++ pythonocc-0.3.0/debian/rules
@@ -0,0 +1,80 @@
+#!/usr/bin/make -f
+
+CFLAGS = -Wall -g
+
+configure:
+	chmod 755 src/addons/Display/OCCViewer.py
+	chmod 755 src/addons/Display/wxDisplay.py
+	chmod 755 src/addons/Display/wxSamplesGui.py
+	chmod 755 src/addons/Display/wxSamplesGui2d.py
+	chmod 755 src/addons/Utils/DataExchange/STL.py
+	chmod 755 src/addons/Utils/DataExchange/STEP.py
+	chmod 755 src/addons/Utils/Common.py
+	chmod 755 src/addons/Utils/Image.py
+	#chmod 644 gpl.txt
+	#chmod 644 src/AUTHORS
+
+build: build-stamp
+build-stamp: configure
+	dh_testdir
+	cd src && python setup.py build
+	touch $@
+
+clean:
+	dh_testdir
+	dh_testroot
+	rm -f build-stamp install-stamp
+	cd src && python setup.py clean
+	dh_clean
+	rm -rf src/build
+	rm -rf src/OCC
+	find -name '*.pyc' | xargs rm -rf
+	#cd src/SWIG_src_modular_linux_darwin && find -name '*_wrap.cpp' | xargs rm -rf
+	#cd src/Misc && find -name '*_wrap.cpp' | xargs rm -rf
+	#cd src/Visualization && find -name '*_wrap.cpp' | xargs rm -rf
+
+install: build install-stamp
+install-stamp:
+	dh_testdir
+	dh_testroot
+	dh_clean -k
+	dh_installdirs
+	cd src && python setup.py install --no-compile --root ../debian/python-occ
+	#dh install --after dh_installdirs
+	touch install-stamp
+
+binary-indep: build install
+	#dh binary-indep
+
+binary-arch: build install
+	#dh binary-arch
+	dh_testdir
+	dh_testroot
+	dh_installchangelogs 
+	dh_installdocs
+	dh_installexamples
+#	dh_install
+#	dh_installmenu
+#	dh_installdebconf	
+#	dh_installlogrotate
+#	dh_installemacsen
+#	dh_installpam
+#	dh_installmime
+#	dh_desktop
+#	dh_installinit
+#	dh_installcron
+#	dh_installinfo
+	dh_installman
+	dh_link
+	dh_strip
+	dh_compress
+	dh_fixperms
+	dh_pycentral
+	dh_installdeb
+	dh_shlibdeps
+	dh_gencontrol
+	dh_md5sums
+	dh_builddeb
+
+binary: binary-indep binary-arch
+.PHONY: build clean binary-indep binary-arch binary install
--- pythonocc-0.3.0.orig/debian/control
+++ pythonocc-0.3.0/debian/control
@@ -0,0 +1,17 @@
+Source: pythonocc
+Section: python
+Priority: extra
+Maintainer: Werner Mayer <wmayer@users.sourceforge.net>
+Build-Depends: debhelper (>= 6), python, python-central, python-support, swig, libopencascade-dev, salomegeom-dev
+Standards-Version: 3.7.3
+XS-Python-Version: current
+Homepage: http://pythonocc.org/
+
+Package: python-occ
+Architecture: any
+Depends: ${shlibs:Depends}, ${misc:Depends}, ${python:Depends}
+XB-Python-Version: ${python:Versions}
+Provides: ${python:Provides}
+Description: Python binding for OpenCASCADE
+ pythonOCC is Python binding for OpenCASCADE.
+
--- pythonocc-0.3.0.orig/debian/compat
+++ pythonocc-0.3.0/debian/compat
@@ -0,0 +1 @@
+6
--- pythonocc-0.3.0.orig/debian/pyversions
+++ pythonocc-0.3.0/debian/pyversions
@@ -0,0 +1 @@
+2.4-
--- pythonocc-0.3.0.orig/debian/pycompat
+++ pythonocc-0.3.0/debian/pycompat
@@ -0,0 +1 @@
+2
--- pythonocc-0.3.0.orig/debian/copyright
+++ pythonocc-0.3.0/debian/copyright
@@ -0,0 +1,7 @@
+Files: *
+Copyright: 2008 Thomas Paviot <thomas.paviot@free.fr> 
+License: GPL-3
+ .
+ On Debian systems, the complete text of the GNU General Public 
+ License version 3 can be found in `/usr/share/common-licenses/GPL-3'.
+
