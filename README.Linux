
How to build and run FreeCAD under Linux
========================================

Prerequisites
-------------

To compile FreeCAD you will need, besides functioning Linux
and programming tools (like compiler), the following libraries:

o Python (http://www.python.org), >= 2.5.x
o boost (http://www.boost.org), >= 1.33.1
o Qt (http://www.trolltech.com), >= 4.1.x
o Coin3D (http://www.coin3d.org), >= 2.4.x
o SoQt (http://www.coin3d.org), >= 1.2.x
o Xerces-c (http://xml.apache.org/dist/xerces-c/), >= 2.6
o zlib (http://www.zlib.net/)

And for the Mesh module of FreeCAD the additional libraries
o GTS Library (http://gts.sourceforge.net)
o OpenCascade (http://www.opencascade.org), >= 5.2
are required. OpenCascade is also needed by the Part module.

Note: zlib might be already on your system, as this is a library that is used 
      by a lot of libraries, too.

Note: All libraries listed above must be built as shared library. Refer to their
      documentation to see how to do.

Note: If possible you should enable thread support for the libraries. At least for
      Qt thread support is strongly recommended, otherwise you will run into linker
      errors at build time of FreeCAD.

Note: The package for SoQt for Debian based systems lacks of the soqt.m4 macro file.
      You should download the file from www.coin3d.org and copy it to /usr/share/aclocal.

Note: The package for SoQt (at least for Debian based systems) is usually built to link 
      against Qt3. This, however, causes a segmentation fault when using with FreeCAD because 
      it links against Qt4 and you get a mixup of Qt3 and Qt4 libraries.
      To fix this problem you must download the sources from www.coin3d.org and run
      configure with the 'with-qt=DIR' switch specifying the location of Qt4.
      Probably, it's best to 'make install' the newly built SoQt into a different directory
      than the installed SoQt to avoid to corrupt your package database and/or to keep other 
      applications working. When configuring FreeCAD you have to use the '--with-soqt=DIR' 
      switch specifying the path of the newly installed SoQt.

During the compilation some Python scripts get executed. So the Python interpreter has
to work properly.

Optionally, you can build the Qt plugin that provides all custom widgets of FreeCAD
we need for the Qt Designer. The sources are located under Tools/plugins/widget.
So far, we don't provide a makefile but calling 'qmake plugin.pro' creates it and
calling 'make' will create the library libFreeCAD_widgets.so. To make known this library
to your Qt Designer you have to copy the file to $QTDIR/plugin/designer.


Configuration
-------------

For the build process of FreeCAD we make use of configure scripts.
To have an overview of all switches type in ./configure --help, first.

You don't need any of these switches unless you have installed a library into a non-standard
path. In this case make use of the appropriate --with-XXX-include or --with-XXX-lib switches,
please. (XXX stands for the corresponding library.)
Of course, for above mentioned problem with SoQt you should use the '--with-soqt=DIR' switch.

Note: To specify FreeCAD's root directory it is recommended to use only the '--prefix'
switch from the configure script but not the --bindir, --libdir, ... switches, because at startup 
FreeCAD makes assumptions about where its module directories are installed.


Installation & Running FreeCAD
------------------------------

Once you have built the sources successfully using 'make', with 'make install' you can
install FreeCAD onto your machine whereever you want. FreeCAD's default root directory 
is $HOME/FreeCAD, so you don't need root privileges therefore. To run FreeCAD go to 
$PREFIX/FreeCAD/bin and type in ./FreeCAD.

Note: In the past there were a lot of problems that the Part workbench couldn't be loaded.
      The problem is that the system wasn't able to find the OpenCascade library files.
      To fix this problem you are strongly recommended to add the path of these libraries
      to LD_LIBRARY_PATH or even to add it to ld.so.conf and run ldconfig.


So, just have fun!


Known problems
--------------

Here I have added a list of known problems concerning installation of libraries or the build
process of FreeCAD. If you encounter any problems please read this section, first.


Worth noting up front that OpenCascade requires at least 500Mb of swap space
( according to their documentation ). Linux uses a separate partition for
the swap space, so you might have to re-partition the hard drive to achieve this
and it is worth doing that before the rest of the install!

Problem:
OCC install wizard doesn't work - just prints a few lines of dots and then stops.

Solution:
Export the display so that root can connect to it, and then run the java script
manually as root:
> xhost +      // Allow root to access our display
> su           // Change user to root
> /usr/lib/java/jre/bin/java -jar ./Linux/setup.jar


Problem:
My unix configure script runs with the following error:
configure: checking Python...
checking for /usr/include/python2.5/Python.h... yes
checking for /usr/lib/libpython2.5.so... no
checking for /usr/local/lib/libpython2.5.so... no
configure: error:
        **** Could not find Python library files.
         Please check your installation. ****

Now my system does contain a libpython2.5.a but NOT libpython2.5.so

Solution:
To run the configure script successfully you have to rebuild Python creating also dynamic libraries.
FreeCAD is designed to have a core system consisting of FreeCADBase, FreeCADApp, FreeCADGui and the main program
FreeCAD for the Gui part or FreeCADCmd for the commandline version respectively and modules for further funcionality.
These modules are written as plugin and get loaded at runtime. To avoid linker errors at build time for the modules we
strongly need dynamic libraries only.


Problem:
If I don't set the CASROOT environment variable then configure fails.
e.g. export CASROOT=/opt/OpenCASCADE5.2/ros

Solution:
Usually if you install OpenCascade (OCC) on your system you have to set several environment variables among them CASROOT. 
But it's also possible to split the OCC library and put its header files e.g. to /usr/local/incude put and the libraries 
to /usr/local/lib. This is mainly common under Debian based systems.
In order to run the configure script successfully in this case you have to specify the --with-occ-include and --with-occ-lib
options. The configure scripts then checks for the file Standard.hxx.


Problem:
The ./configure can't find a file named "Python.h" but I don't have any file named
like that and Python is perfectly running on the computer.

Solution:
You need to have installed the devel package of Python, too. The Python interpreter (or any other application)
doesn't need header files at runtime, but to build an application using Python then you need the header files.



Known Bugs
----------

The following problems are Linux specific, i.e. under Windows they do not appear.

1: Conflicts between OpenCascade 5.2 and GTS library.
  The library libTKTopAlgo.so (OpenCascade) and GTS provide the global function 'orient3d()'. This leads to a segmentation fault when
  using GTS functionality from within the Mesh module.
  To avoid the problem you can rename 'orient3d' to 'gts_orient3d' in GTS and recompile the library.
  Note: The problem may occur with older versions of OpenCascade than 5.2.


2: Problems when loading CAD files.
  CAD files can be loaded from the Part module. But there is somehow a conflict caused by the global function 'locate()' in libTKTopAlgo.so
  when the Mesh module has been loaded before the Part module. If the Part module has been loaded first the problem does not appear.
  This problem arised with FreeCAD version 0.5 but isn't fixed yet.

Using later version of OpenCascade these problems might disappear.



Werner Mayer <wmayer@users.sourceforge.net>
April 2007
